/// Copyright 2014-2015 Red Hat, Inc. and/or its affiliates
/// and other contributors as indicated by the @author tags.
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///   http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.


var HawkularMetrics;
(function (HawkularMetrics) {
    HawkularMetrics.pluginName = "hawkular-metrics";
    HawkularMetrics.log = Logger.get(HawkularMetrics.pluginName);
    HawkularMetrics.templatePath = "plugins/metrics/html";
    HawkularMetrics.globalTenantId = "test";
    HawkularMetrics.globalEnvironmentId = "test";
    HawkularMetrics.globalChartTimeRange;
    var ChartTimeRange = (function () {
        function ChartTimeRange(initialHoursDifference) {
            this.initialHoursDifference = initialHoursDifference;
            this.init();
        }
        ChartTimeRange.prototype.init = function () {
            this.endTimestamp = moment().valueOf();
            this.startTimestamp = moment().subtract(this.initialHoursDifference, 'hours').valueOf();
        };
        return ChartTimeRange;
    })();
    HawkularMetrics.ChartTimeRange = ChartTimeRange;
})(HawkularMetrics || (HawkularMetrics = {}));

var HawkularMetrics;
(function (HawkularMetrics) {
    HawkularMetrics._module = angular.module(HawkularMetrics.pluginName, ['ngResource', 'ui.select', 'hawkularCharts', 'hawkular.services', 'ui.bootstrap', 'topbar', 'patternfly.select', 'angular-momentjs', 'angular-md5']);
    var metricsTab;
    HawkularMetrics._module.config(['$httpProvider', '$locationProvider', '$routeProvider', 'HawtioNavBuilderProvider', function ($httpProvider, $locationProvider, $routeProvider, navBuilder) {
        metricsTab = navBuilder.create().id(HawkularMetrics.pluginName).title(function () { return 'Metrics'; }).href(function () { return '/metrics'; }).subPath('Add Url', 'add-url', navBuilder.join(HawkularMetrics.templatePath, 'add-url.html')).subPath('Response Time', 'response-time', navBuilder.join(HawkularMetrics.templatePath, 'response-time.html')).subPath('Availability', 'availability', navBuilder.join(HawkularMetrics.templatePath, 'availability.html')).subPath('Alerts', 'alerts', navBuilder.join(HawkularMetrics.templatePath, 'alerts.html')).build();
        navBuilder.configureRouting($routeProvider, metricsTab);
        $locationProvider.html5Mode(true);
    }]);
    HawkularMetrics._module.run(['HawtioNav', function (HawtioNav) {
        HawtioNav.add(metricsTab);
        HawkularMetrics.log.debug('loaded Metrics Plugin');
    }]);
    HawkularMetrics._module.directive('hkEnter', function () {
        return function (scope, element, attrs) {
            element.bind('keydown keypress', function (event) {
                if (event.which === 13) {
                    scope.$apply(function () {
                        scope.$eval(attrs.hkEnter);
                    });
                    event.preventDefault();
                }
            });
        };
    });
    HawkularMetrics._module.config(["$routeProvider", function ($routeProvider) {
        $routeProvider.when('/hawkular/:resourceId/:timeOffset?/:endTime?', { templateUrl: 'plugins/metrics/html/single-page.html' }).when('/metrics/response-time', { templateUrl: 'plugins/metrics/html/response-time.html', resolve: {
            hkResourceList: function ($filter, $location, $q, HawkularInventory) {
                var resPromise = HawkularInventory.Resource.query({ tenantId: HawkularMetrics.globalTenantId, environmentId: HawkularMetrics.globalEnvironmentId }).$promise;
                resPromise.then(function (hkResourceList) {
                    $location.path('/metrics/response-time/' + hkResourceList[0].id);
                }, function () {
                    $location.url('/error');
                });
                return $q.defer().promise;
            }
        } }).when('/metrics/response-time/:resourceId/:timeOffset?/:endTime?', { templateUrl: 'plugins/metrics/html/response-time.html' }).when('/metrics/availability/:resourceId/:timeOffset?/:endTime?', { templateUrl: 'plugins/metrics/html/availability.html' }).when('/metrics/alerts/:resourceId/:timeOffset?/:endTime?', { templateUrl: 'plugins/metrics/html/alerts.html' }).otherwise({ redirectTo: '/metrics/add-url' });
    }]);
    hawtioPluginLoader.addModule(HawkularMetrics.pluginName);
})(HawkularMetrics || (HawkularMetrics = {}));

var HawkularMetrics;
(function (HawkularMetrics) {
    var HawkularAlertsManager = (function () {
        function HawkularAlertsManager(HawkularAlert, $q, $log, $moment) {
            this.HawkularAlert = HawkularAlert;
            this.$q = $q;
            this.$log = $log;
            this.$moment = $moment;
        }
        HawkularAlertsManager.prototype.createTrigger = function (triggerName, enabled, conditionType, email) {
            var _this = this;
            var triggerId;
            return this.HawkularAlert.Trigger.save({
                name: triggerName,
                id: triggerName,
                description: 'Created on ' + Date(),
                firingMatch: 'ALL',
                safetyMatch: 'ALL',
                enabled: enabled,
                safetyEnabled: false,
                actions: [email]
            }).$promise.then(function (trigger) {
                triggerId = trigger.id;
                var dataId = trigger.name.slice(0, -14) + '.status.duration';
                if (conditionType === 'THRESHOLD') {
                    return _this.createCondition(triggerId, {
                        type: conditionType,
                        triggerId: triggerId,
                        threshold: 1000,
                        dataId: dataId,
                        operator: 'GT'
                    });
                }
                else if (conditionType === 'AVAILABILITY') {
                    return _this.createCondition(triggerId, {
                        type: conditionType,
                        triggerId: triggerId,
                        dataId: trigger.name.slice(0, -14),
                        operator: 'DOWN'
                    });
                }
            }).then(function () {
                return _this.createDampening(triggerId, 7000);
            });
        };
        HawkularAlertsManager.prototype.updateTrigger = function (triggerId, data) {
            data.id = triggerId;
            return this.HawkularAlert.Trigger.put({ triggerId: triggerId }, data).$promise;
        };
        HawkularAlertsManager.prototype.getAction = function (email) {
            return this.HawkularAlert.Action.get({
                actionId: email
            }).$promise;
        };
        HawkularAlertsManager.prototype.createAction = function (email) {
            return this.HawkularAlert.Action.save({
                actionPlugin: 'email',
                actionId: email,
                description: 'Created on ' + Date(),
                to: email
            }).$promise;
        };
        HawkularAlertsManager.prototype.addEmailAction = function (email) {
            var _this = this;
            return this.getAction(email).then(function (data) {
                _this.$log.debug('Action', data, ' for email ', email);
                if (!data.actionId) {
                    _this.$log.debug('Action does not exist, creating one');
                    return _this.createAction(email);
                }
                _this.$log.debug('Action does already exist');
            });
        };
        HawkularAlertsManager.prototype.updateAction = function (email) {
            return this.HawkularAlert.Action.put({
                actionPlugin: 'email',
                actionId: email,
                description: 'Created on ' + Date(),
                to: email
            }).$promise;
        };
        HawkularAlertsManager.prototype.createCondition = function (triggerId, condition) {
            return this.HawkularAlert.Condition.save({ triggerId: triggerId }, condition).$promise;
        };
        HawkularAlertsManager.prototype.updateCondition = function (triggerId, conditionId, condition) {
            return this.HawkularAlert.Condition.put({ triggerId: triggerId, conditionId: conditionId }, condition).$promise;
        };
        HawkularAlertsManager.prototype.createDampening = function (triggerId, duration) {
            return this.HawkularAlert.Dampening.save({ triggerId: triggerId }, {
                triggerId: triggerId,
                evalTimeSetting: duration,
                type: 'STRICT_TIME'
            }).$promise;
        };
        HawkularAlertsManager.prototype.updateDampening = function (triggerId, dampeningId, dampening) {
            dampening.dampeningId = dampeningId;
            return this.HawkularAlert.Dampening.put({ triggerId: triggerId, dampeningId: dampeningId }, dampening).$promise;
        };
        HawkularAlertsManager.prototype.getActions = function (triggerId) {
            return undefined;
        };
        HawkularAlertsManager.prototype.getTrigger = function (triggerId) {
            return this.HawkularAlert.Trigger.get({ triggerId: triggerId }).$promise;
        };
        HawkularAlertsManager.prototype.setEmail = function (triggerId, email) {
            var _this = this;
            var actions = this.getActions(triggerId);
            return actions.then(function (actions) {
                if (!actions) {
                    return _this.HawkularAlert.Action.save({}).$promise;
                }
                else {
                    return _this.HawkularAlert.Action.put({
                        actionId: ''
                    }, {}).$promise;
                }
            });
        };
        HawkularAlertsManager.prototype.setResponseTime = function (triggerId, treshold, duration, enabled) {
            return undefined;
        };
        HawkularAlertsManager.prototype.setDowntime = function (triggerId, duration, enabled) {
            return undefined;
        };
        HawkularAlertsManager.prototype.queryConsoleAlerts = function (metricId) {
            var _this = this;
            var alertList = [];
            return this.HawkularAlert.Alert.query({ triggerIds: metricId + '_trigger_avail,' + metricId + '_trigger_thres' }).$promise.then(function (serverAlerts) {
                var momentNow = _this.$moment();
                _this.$log.debug('querying data finished', serverAlerts);
                for (var i = 0; i < serverAlerts.length; i++) {
                    var consoleAlert = {};
                    var serverAlert = serverAlerts[i];
                    _this.$log.debug('server Alert to inspect: ', serverAlert);
                    consoleAlert.end = serverAlert.ctime;
                    var sum = 0.0;
                    var count = 0.0;
                    for (var j = 0; j < serverAlert.evalSets.length; j++) {
                        var eval = serverAlert.evalSets[j][0];
                        if (!consoleAlert.start && eval.dataTimestamp) {
                            consoleAlert.start = eval.dataTimestamp;
                        }
                        if (!consoleAlert.threshold && eval.condition.threshold) {
                            consoleAlert.threshold = eval.condition.threshold;
                        }
                        if (!consoleAlert.type && eval.condition.type) {
                            consoleAlert.type = eval.condition.type;
                        }
                        var momentAlert = _this.$moment(consoleAlert.end);
                        if (momentAlert.year() === momentNow.year()) {
                            consoleAlert.isThisYear = true;
                            if (momentAlert.dayOfYear() === momentNow.dayOfYear()) {
                                consoleAlert.isToday = true;
                            }
                        }
                        sum += eval.value;
                        count++;
                    }
                    consoleAlert.avg = sum / count;
                    alertList.push(consoleAlert);
                }
            }, function (error) {
                _this.$log.debug('querying data error', error);
            }).then(function () {
                return alertList;
            });
        };
        HawkularAlertsManager.$inject = ['HawkularAlert', '$q', '$log', '$moment'];
        return HawkularAlertsManager;
    })();
    HawkularMetrics.HawkularAlertsManager = HawkularAlertsManager;
    HawkularMetrics._module.service('HawkularAlertsManager', HawkularAlertsManager);
})(HawkularMetrics || (HawkularMetrics = {}));

var HawkularMetrics;
(function (HawkularMetrics) {
    var HawkularErrorManager = (function () {
        function HawkularErrorManager($q, $log) {
            this.$q = $q;
            this.$log = $log;
        }
        HawkularErrorManager.prototype.errorToastr = function (error, errorMsg) {
            var errorMsgComplete;
            if (error.data && error.data.errorMsg) {
                errorMsgComplete = error.data.errorMsg;
            }
            else {
                errorMsgComplete = errorMsg + ' ' + error;
            }
            this.$log.error(errorMsgComplete);
            toastr.error(errorMsgComplete);
        };
        HawkularErrorManager.prototype.errorHandler = function (error, msg) {
            if (error) {
                this.errorToastr(error, msg);
            }
            return this.$q.reject(null);
        };
        HawkularErrorManager.$inject = ['$q', '$log'];
        return HawkularErrorManager;
    })();
    HawkularMetrics.HawkularErrorManager = HawkularErrorManager;
    HawkularMetrics._module.service('HawkularErrorManager', HawkularErrorManager);
})(HawkularMetrics || (HawkularMetrics = {}));

var HawkularMetrics;
(function (HawkularMetrics) {
    var AddUrlController = (function () {
        function AddUrlController($location, $scope, $rootScope, $interval, $log, $filter, $modal, HawkularInventory, HawkularMetric, HawkularAlert, HawkularAlertsManager, HawkularErrorManager, $q, md5, resourceUrl) {
            this.$location = $location;
            this.$scope = $scope;
            this.$rootScope = $rootScope;
            this.$interval = $interval;
            this.$log = $log;
            this.$filter = $filter;
            this.$modal = $modal;
            this.HawkularInventory = HawkularInventory;
            this.HawkularMetric = HawkularMetric;
            this.HawkularAlert = HawkularAlert;
            this.HawkularAlertsManager = HawkularAlertsManager;
            this.HawkularErrorManager = HawkularErrorManager;
            this.$q = $q;
            this.md5 = md5;
            this.resourceUrl = resourceUrl;
            this.httpUriPart = 'http://';
            this.addProgress = false;
            $scope.vm = this;
            this.resourceUrl = this.httpUriPart;
            this.getResourceList();
            this.autoRefresh(20);
        }
        AddUrlController.prototype.cancelAutoRefresh = function () {
            this.$interval.cancel(this.autoRefreshPromise);
            toastr.info('Canceling Auto Refresh');
        };
        AddUrlController.prototype.autoRefresh = function (intervalInSeconds) {
            var _this = this;
            this.autoRefreshPromise = this.$interval(function () {
                _this.getResourceList();
            }, intervalInSeconds * 1000);
            this.$scope.$on('$destroy', function () {
                _this.$interval.cancel(_this.autoRefreshPromise);
            });
        };
        AddUrlController.prototype.addUrl = function (url) {
            var _this = this;
            this.addProgress = true;
            var resourceId = this.md5.createHash(url || '');
            var resource = {
                resourceTypeId: 'URL',
                id: resourceId,
                properties: {
                    url: url
                }
            };
            this.$log.info('Adding new Resource Url to Hawkular-inventory: ' + url);
            HawkularMetrics.globalChartTimeRange = new HawkularMetrics.ChartTimeRange(1);
            var metricId;
            var defaultEmail = this.$rootScope['user_email'] ? this.$rootScope['user_email'] : 'myemail@company.com';
            var err = function (error, msg) { return _this.HawkularErrorManager.errorHandler(error, msg); };
            this.HawkularInventory.Resource.save({ tenantId: HawkularMetrics.globalTenantId, environmentId: HawkularMetrics.globalEnvironmentId }, resource).$promise.then(function (newResource) {
                _this.getResourceList();
                metricId = resourceId;
                console.dir(newResource);
                _this.$log.info('New Resource ID: ' + metricId + ' created.');
                var metricsIds = [metricId + '.status.duration', metricId + '.status.code'];
                var metrics = [{
                    id: metricsIds[0],
                    metricTypeId: 'status.duration.type',
                    properties: {
                        description: 'Response Time in ms.'
                    }
                }, {
                    id: metricsIds[1],
                    metricTypeId: 'status.code.type',
                    properties: {
                        description: 'Status Code'
                    }
                }];
                var errMetric = function (error) { return err(error, 'Error saving metric.'); };
                var createMetric = function (metric) { return _this.HawkularInventory.Metric.save({
                    tenantId: HawkularMetrics.globalTenantId,
                    environmentId: HawkularMetrics.globalEnvironmentId
                }, metric).$promise; };
                var associateResourceWithMetrics = function () { return _this.HawkularInventory.ResourceMetric.save({
                    tenantId: HawkularMetrics.globalTenantId,
                    environmentId: HawkularMetrics.globalEnvironmentId,
                    resourceId: resourceId
                }, metricsIds).$promise; };
                return createMetric(metrics[0]).then(createMetric(metrics[1]), errMetric).then(associateResourceWithMetrics, errMetric).catch('Error associating metrics with resource.');
            }).then(function () { return _this.HawkularAlertsManager.addEmailAction(defaultEmail); }, function (e) { return err(e, 'Error during saving metrics.'); }).then(function () { return _this.HawkularAlertsManager.createTrigger(metricId + '_trigger_thres', true, 'THRESHOLD', defaultEmail); }, function (e) { return err(e, 'Error saving email action.'); }).then(function (alert) { return _this.HawkularAlertsManager.createTrigger(metricId + '_trigger_avail', false, 'AVAILABILITY', defaultEmail); }, function (e) { return err(e, 'Error saving threshold trigger.'); }).then(function () { return toastr.info('Your data is being collected. Please be patient (should be about another minute).'); }, function (e) { return err(e, 'Error saving availability trigger.'); }).finally(function () {
                _this.resourceUrl = _this.httpUriPart;
                _this.$scope.addUrlForm.$setPristine();
                _this.addProgress = false;
            });
        };
        AddUrlController.prototype.getResourceList = function () {
            var _this = this;
            this.HawkularInventory.Resource.query({ tenantId: HawkularMetrics.globalTenantId, environmentId: HawkularMetrics.globalEnvironmentId }, function (aResourceList) {
                var expanded = _this.resourceList ? _this.resourceList.expanded : [];
                aResourceList.expanded = expanded;
                _this.HawkularAlert.Alert.query({}, function (anAlertList) {
                    _this.alertList = anAlertList;
                }, _this);
                var promises = [];
                angular.forEach(aResourceList, function (res, idx) {
                    promises.push(this.HawkularMetric.NumericMetricData.queryMetrics({
                        tenantId: HawkularMetrics.globalTenantId,
                        resourceId: res.id,
                        numericId: (res.id + '.status.duration'),
                        start: moment().subtract(24, 'hours').valueOf(),
                        end: moment().valueOf()
                    }, function (resource) {
                        res['responseTime'] = resource;
                    }).$promise);
                    promises.push(this.HawkularMetric.NumericMetricData.queryMetrics({
                        tenantId: HawkularMetrics.globalTenantId,
                        resourceId: res.id,
                        numericId: (res.id + '.status.code'),
                        start: moment().subtract(24, 'hours').valueOf(),
                        end: moment().valueOf()
                    }, function (resource) {
                        res['isUp'] = (resource[0] && resource[0].value >= 200 && resource[0].value < 300);
                    }).$promise);
                    promises.push(this.HawkularMetric.AvailabilityMetricData.query({
                        tenantId: HawkularMetrics.globalTenantId,
                        availabilityId: res.id,
                        start: moment().subtract(24, 'hours').valueOf(),
                        end: moment().valueOf(),
                        buckets: 1
                    }, function (resource) {
                        res['availability'] = resource[0].uptimeRatio * 100;
                        res['downTime'] = Math.round(resource[0].downtimeDuration / 1000 / 60);
                    }).$promise);
                    res['updateTime'] = new Date();
                }, _this);
                _this.$q.all(promises).then(function (result) {
                    _this.resourceList = aResourceList;
                });
            });
        };
        AddUrlController.prototype.getAverage = function (data, field) {
            if (data) {
                var sum = 0;
                for (var i = 0; i < data.length; i++) {
                    sum += parseInt(data[i][field], 10);
                }
                return Math.round(sum / data.length);
            }
        };
        AddUrlController.prototype.deleteResource = function (resource) {
            var _this = this;
            this.$modal.open({
                templateUrl: 'plugins/metrics/html/modals/delete-resource.html',
                controller: DeleteResourceModalController,
                resolve: {
                    resource: function () { return resource; }
                }
            }).result.then(function (result) { return _this.getResourceList(); });
        };
        AddUrlController.$inject = ['$location', '$scope', '$rootScope', '$interval', '$log', '$filter', '$modal', 'HawkularInventory', 'HawkularMetric', 'HawkularAlert', 'HawkularAlertsManager', 'HawkularErrorManager', '$q', 'md5'];
        return AddUrlController;
    })();
    HawkularMetrics.AddUrlController = AddUrlController;
    HawkularMetrics._module.controller('HawkularMetrics.AddUrlController', AddUrlController);
    var DeleteResourceModalController = (function () {
        function DeleteResourceModalController($scope, $modalInstance, HawkularInventory, resource) {
            this.$scope = $scope;
            this.$modalInstance = $modalInstance;
            this.HawkularInventory = HawkularInventory;
            this.resource = resource;
            $scope.vm = this;
        }
        DeleteResourceModalController.prototype.deleteResource = function () {
            var _this = this;
            this.HawkularInventory.Resource.delete({
                tenantId: HawkularMetrics.globalTenantId,
                environmentId: HawkularMetrics.globalEnvironmentId,
                resourceId: this.resource.id
            }).$promise.then(function (res) {
                toastr.info('The site ' + _this.resource.parameters.url + ' is no longer being monitored.');
                _this.$modalInstance.close(res);
            });
        };
        DeleteResourceModalController.prototype.cancel = function () {
            this.$modalInstance.dismiss('cancel');
        };
        DeleteResourceModalController.$inject = ['$scope', '$modalInstance', 'HawkularInventory', 'resource'];
        return DeleteResourceModalController;
    })();
})(HawkularMetrics || (HawkularMetrics = {}));

var HawkularMetrics;
(function (HawkularMetrics) {
    var MetricsAlertController = (function () {
        function MetricsAlertController($scope, HawkularAlert, HawkularAlertsManager, HawkularErrorManager, $log, $q, $rootScope, $routeParams) {
            var _this = this;
            this.$scope = $scope;
            this.HawkularAlert = HawkularAlert;
            this.HawkularAlertsManager = HawkularAlertsManager;
            this.HawkularErrorManager = HawkularErrorManager;
            this.$log = $log;
            this.$q = $q;
            this.$rootScope = $rootScope;
            this.$routeParams = $routeParams;
            this.alertList = [];
            this.$log.debug('querying data');
            this.$log.debug('$routeParams', $routeParams);
            this.metricId = $routeParams.resourceId;
            $scope.alertsTimeOffset = $routeParams.timeOffset;
            $scope.alertsTimeEnd = $routeParams.endTime ? $routeParams.endTime : (new Date()).getTime();
            $scope.alertsTimeStart = $scope.alertsTimeEnd - $scope.alertsTimeOffset;
            $scope.timeFilter = function (value) {
                if (!$scope.alertsTimeOffset) {
                    return true;
                }
                return !!((value.start > $scope.alertsTimeStart) && (value.start < $scope.alertsTimeEnd));
            };
            HawkularAlertsManager.queryConsoleAlerts(this.metricId).then(function (data) {
                _this.$log.debug('data', data);
                _this.alertList = data;
            }, function (error) {
                return _this.HawkularErrorManager.errorHandler(error, 'Error fetching alerts.');
            });
        }
        MetricsAlertController.$inject = ['$scope', 'HawkularAlert', 'HawkularAlertsManager', 'HawkularErrorManager', '$log', '$q', '$rootScope', '$routeParams'];
        return MetricsAlertController;
    })();
    HawkularMetrics.MetricsAlertController = MetricsAlertController;
    HawkularMetrics._module.controller('MetricsAlertController', MetricsAlertController);
    var MetricsAlertSetupController = (function () {
        function MetricsAlertSetupController($scope, HawkularAlert, HawkularAlertsManager, HawkularErrorManager, $log, $q, $rootScope, $routeParams) {
            var _this = this;
            this.$scope = $scope;
            this.HawkularAlert = HawkularAlert;
            this.HawkularAlertsManager = HawkularAlertsManager;
            this.HawkularErrorManager = HawkularErrorManager;
            this.$log = $log;
            this.$q = $q;
            this.$rootScope = $rootScope;
            this.$routeParams = $routeParams;
            this.saveProgress = false;
            this.responseUnit = 1;
            this.downtimeUnit = 1;
            this.timeUnits = [
                { value: 1, label: 'miliseconds' },
                { value: 1000, label: 'seconds' },
                { value: 60000, label: 'minutes' },
                { value: 360000, label: 'hours' }
            ];
            this.timeUnitsDict = {
                '1': 'miliseconds',
                '1000': 'seconds',
                '60000': 'minutes',
                '360000': 'hours'
            };
            this.$log.debug('querying data');
            this.$log.debug('$routeParams', $routeParams.resourceId);
            HawkularAlertsManager.getTrigger($routeParams.resourceId + '_trigger_thres').then(function (data) {
                _this.trigger_thres = data;
                _this.$log.debug('this.trigger_thres', _this.trigger_thres);
                return HawkularAlert.Dampening.query({ triggerId: $routeParams.resourceId + '_trigger_thres' }).$promise;
            }, function (error) {
                return _this.HawkularErrorManager.errorHandler(error, 'Error fetching threshold trigger.');
            }).then(function (data) {
                _this.trigger_thres_damp = data;
                _this.responseDuration = data[0].evalTimeSetting;
                _this.$log.debug('this.trigger_thres_damp', _this.trigger_thres_damp);
                return HawkularAlert.Condition.query({ triggerId: $routeParams.resourceId + '_trigger_thres' }).$promise;
            }, function (error) {
                return _this.HawkularErrorManager.errorHandler(error, 'Error fetching threshold trigger dampening.');
            }).then(function (data) {
                _this.trigger_thres_cond = data;
                _this.$log.debug('this.trigger_thres_cond', _this.trigger_thres_cond);
            }, function (error) {
                return _this.HawkularErrorManager.errorHandler(error, 'Error fetching threshold trigger condition.');
            });
            HawkularAlertsManager.getTrigger($routeParams.resourceId + '_trigger_avail').then(function (data) {
                _this.trigger_avail = data;
                _this.$log.debug('this.trigger_avail', _this.trigger_avail);
                return HawkularAlert.Dampening.query({ triggerId: $routeParams.resourceId + '_trigger_avail' }).$promise;
            }, function (error) {
                return _this.HawkularErrorManager.errorHandler(error, 'Error fetching availability trigger.');
            }).then(function (data) {
                _this.trigger_avail_damp = data;
                _this.downtimeDuration = data[0].evalTimeSetting;
                _this.$log.debug('this.trigger_avail_damp', _this.trigger_avail_damp);
            }, function (error) {
                return _this.HawkularErrorManager.errorHandler(error, 'Error fetching availability trigger dampening.');
            });
            this.metricId = $routeParams.resourceId;
            this.$log.debug('this.metricId', this.metricId);
        }
        MetricsAlertSetupController.prototype.changeResponseTimeUnits = function () {
            this.trigger_thres_damp[0].evalTimeSetting = this.responseDuration * this.responseUnit;
        };
        MetricsAlertSetupController.prototype.changeDowntimeTimeUnits = function () {
            this.trigger_avail_damp[0].evalTimeSetting = this.downtimeDuration * this.downtimeUnit;
        };
        MetricsAlertSetupController.prototype.save = function () {
            var _this = this;
            this.$log.debug('Saving Alert Settings');
            this.saveProgress = true;
            this.HawkularAlertsManager.addEmailAction(this.trigger_thres.actions[0]).then(function () {
                return _this.HawkularAlertsManager.updateTrigger(_this.trigger_thres.id, _this.trigger_thres);
            }, function (error) {
                return _this.HawkularErrorManager.errorHandler(error, 'Error saving email action.');
            }).then(function () {
                _this.trigger_avail.actions = _this.trigger_thres.actions;
                return _this.HawkularAlertsManager.updateTrigger(_this.trigger_avail.id, _this.trigger_avail);
            }, function (error) {
                return _this.HawkularErrorManager.errorHandler(error, 'Error updating threshold trigger.');
            }).then(function () {
                return _this.HawkularAlertsManager.updateDampening(_this.trigger_thres.id, _this.trigger_thres_damp[0].dampeningId, _this.trigger_thres_damp[0]);
            }, function (error) {
                return _this.HawkularErrorManager.errorHandler(error, 'Error updating availability trigger.');
            }).then(function () {
                return _this.HawkularAlertsManager.updateDampening(_this.trigger_avail.id, _this.trigger_avail_damp[0].dampeningId, _this.trigger_avail_damp[0]);
            }, function (error) {
                return _this.HawkularErrorManager.errorHandler(error, 'Error updating threshold trigger dampening.');
            }).then(function () {
                return _this.HawkularAlertsManager.updateCondition(_this.trigger_thres.id, _this.trigger_thres_cond[0].conditionId, _this.trigger_thres_cond[0]);
            }, function (error) {
                return _this.HawkularErrorManager.errorHandler(error, 'Error updating availability dampening.');
            }).then(angular.noop, function (error) {
                return _this.HawkularErrorManager.errorHandler(error, 'Error updating availability condition.');
            }).finally(function () {
                _this.saveProgress = false;
            });
        };
        MetricsAlertSetupController.$inject = ['$scope', 'HawkularAlert', 'HawkularAlertsManager', 'HawkularErrorManager', '$log', '$q', '$rootScope', '$routeParams'];
        return MetricsAlertSetupController;
    })();
    HawkularMetrics.MetricsAlertSetupController = MetricsAlertSetupController;
    HawkularMetrics._module.controller('MetricsAlertSetupController', MetricsAlertSetupController);
})(HawkularMetrics || (HawkularMetrics = {}));

var HawkularMetrics;
(function (HawkularMetrics) {
    var MetricsAvailabilityController = (function () {
        function MetricsAvailabilityController($scope, $interval, $log, HawkularMetric, $routeParams, startTimeStamp, endTimeStamp) {
            var _this = this;
            this.$scope = $scope;
            this.$interval = $interval;
            this.$log = $log;
            this.HawkularMetric = HawkularMetric;
            this.$routeParams = $routeParams;
            this.startTimeStamp = startTimeStamp;
            this.endTimeStamp = endTimeStamp;
            this.availabilityDataPoints = [];
            this.uptimeRatio = 0;
            this.downtimeDuration = 0;
            this.downtimeCount = 0;
            this.empty = true;
            $scope.vm = this;
            this.startTimeStamp = +moment().subtract(1, 'hours');
            this.endTimeStamp = +moment();
            this.metricId = $scope.hkParams.resourceId;
            $scope.$watch('hkParams.resourceId', function (resourceId) {
                if (resourceId) {
                    _this.metricId = resourceId;
                    _this.refreshAvailPageNow(_this.getRawMetricId());
                }
            });
            $scope.$on('RefreshAvailabilityChart', function (event) {
                _this.refreshAvailPageNow(_this.getRawMetricId());
            });
            this.autoRefreshAvailability(20);
        }
        MetricsAvailabilityController.prototype.refreshAvailPageNow = function (rawMetricId, startTime) {
            this.$scope.hkEndTimestamp = +moment();
            var adjStartTimeStamp = +moment().subtract(this.$scope.hkParams.timeOffset, 'milliseconds');
            this.endTimeStamp = this.$scope.hkEndTimestamp;
            if (rawMetricId) {
                this.refreshSummaryAvailabilityData(rawMetricId, startTime ? startTime : adjStartTimeStamp, this.endTimeStamp);
                this.refreshAvailDataForTimestamp(rawMetricId, startTime ? startTime : adjStartTimeStamp, this.endTimeStamp);
            }
        };
        MetricsAvailabilityController.prototype.cancelAutoRefresh = function () {
            this.$interval.cancel(this.autoRefreshPromise);
            toastr.info('Canceling Auto Refresh Availability');
        };
        MetricsAvailabilityController.prototype.autoRefreshAvailability = function (intervalInSeconds) {
            var _this = this;
            this.endTimeStamp = this.$scope.hkEndTimestamp;
            this.startTimeStamp = this.$scope.hkStartTimestamp;
            this.$log.debug("first time through Availability page raw metricId is: " + this.getRawMetricId());
            this.refreshAvailPageNow(this.getRawMetricId());
            this.autoRefreshPromise = this.$interval(function () {
                console.info('Autorefresh Availabilty for: ' + _this.getRawMetricId());
                _this.$scope.hkEndTimestamp = +moment();
                _this.endTimeStamp = _this.$scope.hkEndTimestamp;
                _this.$scope.hkStartTimestamp = +moment().subtract(_this.$scope.hkParams.timeOffset, 'milliseconds');
                _this.startTimeStamp = _this.$scope.hkStartTimestamp;
                _this.refreshAvailPageNow(_this.getRawMetricId());
            }, intervalInSeconds * 1000);
            this.$scope.$on('$destroy', function () {
                _this.$interval.cancel(_this.autoRefreshPromise);
            });
        };
        MetricsAvailabilityController.prototype.noDataFoundForId = function (id) {
            this.$log.warn('No Data found for id: ' + id);
        };
        MetricsAvailabilityController.prototype.refreshSummaryAvailabilityData = function (metricId, startTime, endTime) {
            var _this = this;
            if (metricId) {
                this.HawkularMetric.AvailabilityMetricData.query({
                    tenantId: HawkularMetrics.globalTenantId,
                    availabilityId: metricId,
                    start: startTime,
                    end: endTime,
                    buckets: 1
                }).$promise.then(function (availResponse) {
                    console.info("Avail Summary:");
                    console.dir(availResponse);
                    if (availResponse && !_.last(availResponse).empty) {
                        _this.uptimeRatio = _.last(availResponse).uptimeRatio;
                        _this.downtimeDuration = Math.round(_.last(availResponse).downtimeDuration);
                        _this.lastDowntime = new Date(_.last(availResponse).lastDowntime);
                        _this.downtimeCount = _.last(availResponse).downtimeCount;
                        _this.empty = _.last(availResponse).empty;
                    }
                }, function (error) {
                    _this.$log.error('Error Loading Avail Summary data');
                    toastr.error('Error Loading Avail Summary Data: ' + error);
                });
            }
        };
        MetricsAvailabilityController.prototype.getRawMetricId = function () {
            return this.metricId;
        };
        MetricsAvailabilityController.prototype.refreshAvailDataForTimestamp = function (metricId, startTime, endTime) {
            var _this = this;
            if (metricId) {
                this.HawkularMetric.AvailabilityMetricData.query({
                    tenantId: HawkularMetrics.globalTenantId,
                    availabilityId: metricId,
                    start: startTime,
                    end: endTime,
                    buckets: 60
                }).$promise.then(function (response) {
                    console.info("Availability Data: ");
                    console.dir(response);
                    if (_this.availabilityDataPoints.length) {
                        _this.availabilityDataPoints = response;
                    }
                    else {
                        _this.noDataFoundForId(_this.getRawMetricId());
                    }
                }, function (error) {
                    _this.$log.error('Error Loading Avail data');
                    toastr.error('Error Loading Avail Data: ' + error);
                });
            }
        };
        MetricsAvailabilityController.$inject = ['$scope', '$interval', '$log', 'HawkularMetric', '$routeParams'];
        return MetricsAvailabilityController;
    })();
    HawkularMetrics.MetricsAvailabilityController = MetricsAvailabilityController;
    HawkularMetrics._module.controller('MetricsAvailabilityController', MetricsAvailabilityController);
})(HawkularMetrics || (HawkularMetrics = {}));

var HawkularMetrics;
(function (HawkularMetrics) {
    var QuickAlertController = (function () {
        function QuickAlertController($scope, HawkularAlert, $log, $q) {
            var _this = this;
            this.$scope = $scope;
            this.HawkularAlert = HawkularAlert;
            this.$log = $log;
            this.$q = $q;
            this.PROMISE_BREAK = 'magicValue1234';
            this.$scope.showQuickAlert = false;
            this.$scope.quickTrigger = {
                operator: 'LT',
                threshold: 0
            };
            this.$scope.$watch('hkParams.resourceId', function (resourceId) {
                if (resourceId) {
                    _this.metricId = resourceId;
                }
            });
            this.allActions();
        }
        QuickAlertController.prototype.toggleQuickAlert = function () {
            this.$scope.showQuickAlert = !this.$scope.showQuickAlert;
        };
        QuickAlertController.prototype.allActions = function () {
            var _this = this;
            this.$scope.actions = [];
            this.HawkularAlert.Action.query(function (result) {
                _this.$scope.actions = result;
            }, function (error) {
                _this.errorToastr(error, 'Error loading Alerts Notifiers:');
            });
        };
        QuickAlertController.prototype.errorToastr = function (error, errorMsg) {
            var errorMsgComplete;
            if (error.data && error.data.errorMsg) {
                errorMsgComplete = error.data.errorMsg;
            }
            else {
                errorMsgComplete = errorMsg + ' ' + error;
            }
            this.$log.error(errorMsgComplete);
            toastr.error(errorMsgComplete);
        };
        QuickAlertController.prototype.errorHandler = function (error, msg) {
            if (error !== this.PROMISE_BREAK) {
                this.errorToastr(error, msg);
            }
            return this.$q.reject(this.PROMISE_BREAK);
        };
        QuickAlertController.prototype.saveQuickAlert = function () {
            var _this = this;
            if (this.metricId !== '.status.duration' && this.metricId !== '.status.code') {
                var newTrigger = {};
                newTrigger.name = this.metricId + 'ResponseTime' + '-' + this.$scope.quickTrigger.operator + '-' + this.$scope.quickTrigger.threshold;
                newTrigger.description = 'Created on ' + new Date();
                newTrigger.firingMatch = 'ALL';
                newTrigger.safetyMatch = 'ALL';
                newTrigger.enabled = true;
                newTrigger.safetyEnabled = false;
                newTrigger.actions = this.$scope.quickTrigger.actions;
                var newDampening = {
                    triggerId: '',
                    type: 'RELAXED_COUNT',
                    evalTrueSetting: 1,
                    evalTotalSetting: 1,
                    evalTimeSetting: 0
                };
                this.HawkularAlert.Trigger.save(newTrigger).$promise.then(function (trigger) {
                    _this.$log.debug('Success Trigger save');
                    newDampening.triggerId = trigger.id;
                    return _this.HawkularAlert.Dampening.save({ triggerId: newDampening.triggerId }, newDampening).$promise;
                }, function (error) {
                    return _this.errorHandler(error, 'Error saving Trigger');
                }).then(function (dampening) {
                    _this.$log.debug('Success Dampening save', dampening);
                    var newThresholdCondition = {
                        triggerId: dampening.triggerId,
                        type: 'THRESHOLD',
                        dataId: _this.metricId,
                        operator: _this.$scope.quickTrigger.operator,
                        threshold: _this.$scope.quickTrigger.threshold
                    };
                    return _this.HawkularAlert.Condition.save({ triggerId: newThresholdCondition.triggerId }, newThresholdCondition).$promise;
                }, function (errorDampening) {
                    return _this.errorHandler(errorDampening, 'Error saving Trigger');
                }).then(function () {
                    _this.$log.debug('Success ThresholdCondition save');
                    _this.$log.debug('Alert Created!');
                    toastr.success('Alert Created!');
                    _this.toggleQuickAlert();
                    return _this.HawkularAlert.Alert.reload().$promise;
                }, function (errorCondition) {
                    return _this.errorHandler(errorCondition, 'Error saving Trigger Condition');
                }).then(angular.noop, function (errorReload) {
                    return _this.errorHandler(errorReload, 'Error reloading Alerts');
                }).catch(function (error) {
                    _this.errorHandler(error, 'Error:');
                });
            }
            else {
                this.$log.debug('No metric selected');
                toastr.warning('No metric selected');
            }
        };
        QuickAlertController.$inject = ['$scope', 'HawkularAlert', '$log', '$q'];
        return QuickAlertController;
    })();
    HawkularMetrics.QuickAlertController = QuickAlertController;
    HawkularMetrics._module.controller('QuickAlertController', QuickAlertController);
})(HawkularMetrics || (HawkularMetrics = {}));

var HawkularMetrics;
(function (HawkularMetrics) {
    var MetricsViewController = (function () {
        function MetricsViewController($scope, $rootScope, $interval, $log, HawkularMetric, HawkularAlert, $routeParams, startTimeStamp, endTimeStamp) {
            var _this = this;
            this.$scope = $scope;
            this.$rootScope = $rootScope;
            this.$interval = $interval;
            this.$log = $log;
            this.HawkularMetric = HawkularMetric;
            this.HawkularAlert = HawkularAlert;
            this.$routeParams = $routeParams;
            this.startTimeStamp = startTimeStamp;
            this.endTimeStamp = endTimeStamp;
            this.bucketedDataPoints = [];
            this.contextDataPoints = [];
            this.threshold = 5000;
            this.median = 0;
            this.percentile95th = 0;
            this.average = 0;
            $scope.vm = this;
            this.startTimeStamp = moment().subtract(1, 'hours').valueOf();
            this.endTimeStamp = +moment();
            this.metricId = $scope.hkParams.resourceId;
            $scope.$on('RefreshChart', function (event) {
                _this.refreshChartDataNow(_this.getMetricId());
            });
            $scope.$watch('hkParams.resourceId', function (resourceId) {
                if (resourceId) {
                    _this.metricId = resourceId;
                    _this.refreshChartDataNow(_this.getMetricId());
                }
            });
            this.autoRefresh(20);
        }
        MetricsViewController.prototype.cancelAutoRefresh = function () {
            this.$interval.cancel(this.autoRefreshPromise);
            toastr.info('Canceling Auto Refresh');
        };
        MetricsViewController.prototype.autoRefresh = function (intervalInSeconds) {
            var _this = this;
            this.autoRefreshPromise = this.$interval(function () {
                _this.$scope.hkEndTimestamp = +moment();
                _this.endTimeStamp = _this.$scope.hkEndTimestamp;
                _this.$scope.hkStartTimestamp = moment().subtract(_this.$scope.hkParams.timeOffset, 'milliseconds').valueOf();
                _this.startTimeStamp = _this.$scope.hkStartTimestamp;
                _this.refreshSummaryData(_this.getMetricId());
                _this.refreshHistoricalChartDataForTimestamp(_this.getMetricId());
                _this.retrieveThreshold();
            }, intervalInSeconds * 1000);
            this.$scope.$on('$destroy', function () {
                _this.$interval.cancel(_this.autoRefreshPromise);
            });
        };
        MetricsViewController.prototype.noDataFoundForId = function (id) {
            this.$log.warn('No Data found for id: ' + id);
        };
        MetricsViewController.prototype.refreshChartDataNow = function (metricId, startTime) {
            this.$scope.hkEndTimestamp = +moment();
            var adjStartTimeStamp = moment().subtract(this.$scope.hkParams.timeOffset, 'milliseconds').valueOf();
            this.endTimeStamp = this.$scope.hkEndTimestamp;
            this.refreshSummaryData(metricId, startTime ? startTime : adjStartTimeStamp, this.endTimeStamp);
            this.refreshHistoricalChartDataForTimestamp(metricId, !startTime ? adjStartTimeStamp : startTime, this.endTimeStamp);
            this.retrieveThreshold();
        };
        MetricsViewController.prototype.getMetricId = function () {
            return this.metricId + '.status.duration';
        };
        MetricsViewController.prototype.retrieveThreshold = function () {
            var _this = this;
            this.HawkularAlert.Condition.query({ triggerId: this.$routeParams.resourceId + '_trigger_thres' }).$promise.then(function (response) {
                _this.threshold = response[0].threshold;
            }, function (error) {
                _this.$log.error('Error Loading Threshold data');
                toastr.error('Error Loading Threshold Data: ' + error);
            });
        };
        MetricsViewController.prototype.refreshSummaryData = function (metricId, startTime, endTime) {
            var _this = this;
            var dataPoints;
            if (!endTime) {
                endTime = this.endTimeStamp;
            }
            if (!startTime) {
                startTime = this.startTimeStamp;
            }
            if (metricId) {
                this.HawkularMetric.NumericMetricData.queryMetrics({
                    tenantId: HawkularMetrics.globalTenantId,
                    numericId: metricId,
                    start: startTime,
                    end: endTime,
                    buckets: 1
                }).$promise.then(function (response) {
                    dataPoints = _this.formatBucketedChartOutput(response);
                    console.dir(dataPoints);
                    _this.median = Math.round(_.last(dataPoints).median);
                    _this.percentile95th = Math.round(_.last(dataPoints).percentile95th);
                    _this.average = Math.round(_.last(dataPoints).avg);
                }, function (error) {
                    _this.$log.error('Error Loading Chart data');
                    toastr.error('Error Loading Chart Data: ' + error);
                });
            }
        };
        MetricsViewController.prototype.refreshHistoricalChartDataForTimestamp = function (metricId, startTime, endTime) {
            var _this = this;
            if (!endTime) {
                endTime = this.endTimeStamp;
            }
            if (!startTime) {
                startTime = this.startTimeStamp;
            }
            if (metricId) {
                this.HawkularMetric.NumericMetricData.queryMetrics({
                    tenantId: HawkularMetrics.globalTenantId,
                    numericId: metricId,
                    start: startTime,
                    end: endTime,
                    buckets: 60
                }).$promise.then(function (response) {
                    _this.bucketedDataPoints = _this.formatBucketedChartOutput(response);
                    console.dir(_this.bucketedDataPoints);
                    if (_this.bucketedDataPoints.length) {
                        _this.chartData = {
                            id: metricId,
                            startTimeStamp: startTime,
                            endTimeStamp: endTime,
                            dataPoints: _this.bucketedDataPoints,
                            contextDataPoints: _this.contextDataPoints,
                            annotationDataPoints: []
                        };
                    }
                    else {
                        _this.noDataFoundForId(metricId);
                    }
                }, function (error) {
                    _this.$log.error('Error Loading Chart data');
                    toastr.error('Error Loading Chart Data: ' + error);
                });
            }
        };
        MetricsViewController.prototype.formatBucketedChartOutput = function (response) {
            return _.map(response, function (point) {
                return {
                    timestamp: point.start,
                    date: new Date(point.start),
                    value: !angular.isNumber(point.value) ? 0 : point.value,
                    avg: (point.empty) ? 0 : point.avg,
                    min: !angular.isNumber(point.min) ? 0 : point.min,
                    max: !angular.isNumber(point.max) ? 0 : point.max,
                    percentile95th: !angular.isNumber(point.percentile95th) ? 0 : point.percentile95th,
                    median: !angular.isNumber(point.median) ? 0 : point.median,
                    empty: point.empty
                };
            });
        };
        MetricsViewController.$inject = ['$scope', '$rootScope', '$interval', '$log', 'HawkularMetric', 'HawkularAlert', '$routeParams'];
        return MetricsViewController;
    })();
    HawkularMetrics.MetricsViewController = MetricsViewController;
    HawkularMetrics._module.controller('MetricsViewController', MetricsViewController);
})(HawkularMetrics || (HawkularMetrics = {}));

angular.module("hawkular-ui-components-metrics-templates", []).run(["$templateCache", function($templateCache) {$templateCache.put("plugins/metrics/html/add-url.html","<div ng-controller=\"HawkularMetrics.AddUrlController as vm\">\n  <div class=\"container text-center sc-insert-url\" ng-class=\"{\'sec-urls-list\': vm.resourceList.length === 0}\">\n    <div ng-class=\"{\'fade-in\': vm.resourceList.length === 0}\">\n      <h1>Hello {{userDetails.firstName}}!</h1>\n      <i class=\"fa fa-line-chart\" ng-show=\"vm.resourceList.length === 0\"></i>\n      <h2 ng-show=\"vm.resourceList.length === 0\">Collect metrics from a website that you want to monitor.</h2>\n      <form class=\"form-horizontal add-url\" name=\"addUrlForm\" role=\"form\" novalidate ng-submit=\"vm.addUrl(vm.resourceUrl)\">\n        <div class=\"form-group input\">\n          <div class=\"col-lg-6 col-sm-8 col-xs-12 align-center\">\n            <div class=\"input-group input-group-lg\">\n              <input type=\"url\" class=\"form-control\" name=\"resourceUrl\" ng-model=\"vm.resourceUrl\"\n                     ng-model-options=\"{ updateOn: \'default blur\'}\"\n                     placeholder=\"Enter a website URL (e.g.: http://www.website.com)\" required>\n              <span class=\"input-group-btn\">\n                <button class=\"btn btn-primary\" class=\"btn-lg\" type=\"submit\" ng-disabled=\"addUrlForm.$invalid || vm.addProgress\">\n                 <div ng-show=\"vm.addProgress\" class=\"spinner spinner-sm\"></div>\n                Add URL\n                </button>\n              </span>\n            </div>\n            <span class=\"help-block\"\n                    ng-show=\"addUrlForm.resourceUrl.$dirty && addUrlForm.resourceUrl.$invalid\">The URL you entered is not valid. Please enter a valid URL.</span>\n\n          </div>\n        </div>\n      </form>\n    </div>\n\n    <div class=\"row urls-list-labels\" ng-show=\"vm.resourceList.length > 0\">\n      <div class=\"col-md-4 text-left\">\n        <button class=\"btn btn-link\" tooltip=\"Sort\" tooltip-trigger tooltip-placement=\"top\" ng-click=\"vm.reverse = !vm.reverse\">\n          URL <i class=\"fa\" ng-class=\"vm.reverse ? \'fa-angle-up\' : \'fa-angle-down\'\"></i>\n        </button>\n      </div>\n      <div class=\"col-md-4\">\n        Current Response Time\n      </div>\n      <div class=\"col-md-4\">\n        Current Availability\n      </div>\n    </div>\n\n    <div class=\"panel panel-default summary url-info\" ng-repeat=\"res in vm.resourceList | orderBy:\'properties.url\':vm.reverse\">\n      <div class=\"row row-table\">\n        <div class=\"col-md-4 summary-item\">\n          <span class=\"url-link\"><a href=\"/hawkular/{{res.id}}\">{{res.properties.url}}</a><i class=\"fa fa-flag\" tooltip=\"Some alert happened\" tooltip-trigger tooltip-placement=\"top\" ng-show=\"(vm.alertList|filter:{triggerId: (res.id + \'_trigger\')}).length > 0\"></i></span>\n          <button class=\"btn btn-link delete\" tooltip=\"Remove\" tooltip-trigger tooltip-placement=\"top\" ng-click=\"vm.deleteResource(res)\"><i class=\"fa fa-trash-o\"></i></button>\n          <button class=\"btn btn-link trigger\" ng-show=\"res.responseTime.length > 0\" tooltip=\"Expand/collapse\" tooltip-trigger tooltip-placement=\"top\" ng-click=\"vm.resourceList.expanded[res.id] = !vm.resourceList.expanded[res.id]\"><i class=\"fa\" ng-class=\"vm.resourceList.expanded[res.id] ? \'fa-minus-square-o\' : \'fa-plus-square-o\'\"></i>Last 24 hours</button>\n        </div>\n        <div class=\"col-md-4 summary-item\">\n          <span class=\"data\" ng-show=\"res.responseTime.length > 0\">{{res.responseTime[0].value}} <span>ms</span></span>\n          <span class=\"data spinner\" ng-hide=\"res.responseTime.length > 0\" popover=\"Your data is being collected. You should see something in a few seconds.\" popover-trigger=\"mouseenter\" popover-placement=\"bottom\"></span>\n        </div>\n        <div class=\"col-md-4 summary-item\">\n          <span class=\"data\" ng-show=\"res.responseTime.length > 0\"><i class=\"fa \" ng-class=\"res.isUp ? \'fa-arrow-up\' : \'fa-arrow-down\'\"></i>{{res.isUp ? \'Up\' : \'Down\'}}</span>\n          <span class=\"data spinner\" ng-hide=\"res.responseTime.length > 0\" popover=\"Your data is being collected. You should see something in a few seconds.\" popover-trigger=\"mouseenter\" popover-placement=\"bottom\"></span>\n          <span class=\"time\" tooltip=\"Last update\" tooltip-trigger tooltip-placement=\"top\"><i class=\"fa fa-clock-o\"></i>{{res.updateTime| date:\"HH:mm\" }}</span>\n        </div>\n      </div>\n      <hr ng-show=\"vm.resourceList.expanded[res.id]\" class=\"panel-expanded\">\n      <div class=\"row row-table panel-expanded-content\" ng-show=\"vm.resourceList.expanded[res.id]\">\n        <div class=\"col-md-4 summary-item text-left\">\n          <ul class=\"list-unstyled alert-status\" ng-hide=\"(vm.alertList|filter:{triggerId: (res.id + \'_trigger\')}).length === 0\">\n            <li ng-repeat=\"alert in (vm.alertList|filter:{triggerId: (res.id + \'_trigger\')}).slice().reverse() | limitTo:3 track by $index\">\n              <i class=\"fa fa-flag\"></i>{{alert.evalSets[0][0].dataTimestamp|date:\'hh:mm a\'}}: <span ng-if=\"alert.evalSets[0][0].condition.type==\'AVAILABILITY\'\"><strong>server down</strong></span><span ng-if=\"alert.evalSets[0][0].condition.type==\'THRESHOLD\'\"><strong>high response time</strong> ({{alert.evalSets[0][0].value}}ms)</span>\n            </li>\n          </ul>\n          <span class=\"no-alerts\" ng-show=\"(vm.alertList|filter:{triggerId: (res.id + \'_trigger\')}).length === 0\">No alerts.</span>\n          <a href=\"/hawkular/{{res.id}}\" class=\"bottom-area\" ng-show=\"(vm.alertList|filter:{triggerId: (res.id + \'_trigger\')}).length > 0\">View All Alerts ({{(vm.alertList|filter:{triggerId: (res.id + \'_trigger\')}).length}})</a>\n        </div>\n        <div class=\"col-md-4 summary-item\">\n          <!--<div id=\"metrics-chart\" class=\"top-area\" style=\"height: 44px; width: 237px;\">-->\n            <!--<hawkular-chart data=\"{{res.responseTime}}\" chart-type=\"line\" chart-height=\"44\" chart-width=\"237\"></hawkular-chart>-->\n          <!--</div>-->\n          <div class=\"bottom-area\">\n            <span class=\"data\">{{vm.getAverage(res.responseTime, \'value\')}} <span>ms</span></span>\n            <span class=\"item\">Average Response Time</span>\n          </div>\n        </div>\n        <div class=\"col-md-4 summary-item\">\n          <span class=\"time\"><i class=\"fa fa-clock-o\"></i>Last 24 hours</span>\n          <div class=\"top-area\">\n            <span class=\"data\" ng-show=\"res.availability === 100\"><i class=\"fa fa-arrow-up\"></i>Always Up</span>\n            <span class=\"data\" ng-hide=\"res.availability === 100\"><i class=\"fa fa-arrow-down\"></i>Down {{res.downTime / 3 | number:0}} min</span>\n          </div>\n          <div class=\"bottom-area\">\n            <span class=\"data\" ng-hide=\"res.availability === 100\">{{res.availability | number:3}} <span>%</span></span>\n            <span class=\"data\" ng-show=\"res.availability === 100\">{{res.availability}} <span>%</span></span>\n            <span class=\"item\">Availability</span>\n          </div>\n        </div>\n      </div>\n    </div>\n\n  </div>\n</div>\n");
$templateCache.put("plugins/metrics/html/alerts-setup.html","<div class=\"alert-settings\">\n  <form class=\"form-horizontal\" name=\"alertsSetup\">\n    <fieldset>\n      <legend>Preferences</legend>\n      <div class=\"form-group\">\n        <label class=\"col-md-2 control-label\" for=\"email\">Email</label>\n        <div class=\"col-md-6\">\n          <input type=\"text\" id=\"email\" class=\"form-control\"  ng-model=\"mas.trigger_thres.actions[0]\">\n          <span class=\"help-block\">Send alerts to this email address.</span>\n        </div>\n      </div>\n    </fieldset>\n    <fieldset>\n      <legend>Response Time</legend>\n      <div class=\"form-group onffswitch-form-group\">\n        <label class=\"col-md-2 control-label\" for=\"trigger_thres.enabled\">Status</label>\n        <div class=\"onoffswitch-container\">\n          <div class=\"onoffswitch\">\n            <input type=\"checkbox\" id=\"trigger_thres.enabled\" class=\"onoffswitch-checkbox\" ng-model=\"mas.trigger_thres.enabled\">\n            <label class=\"onoffswitch-label\" for=\"trigger_thres.enabled\">\n              <span class=\"onoffswitch-inner\">\n                <span class=\"onoffswitch-active ng-binding\">ON</span>\n                <span class=\"onoffswitch-inactive ng-binding\">OFF</span>\n              </span>\n              <span class=\"onoffswitch-switch\"></span>\n            </label>\n          </div>\n        </div>\n      </div>\n      <div ng-show=\"mas.trigger_thres.enabled\">\n      <div class=\"form-group\">\n        <label class=\"col-md-2 control-label\" for=\"responseDuration\">Threshold and duration</label>\n        <div class=\"col-md-8 inline-row\">\n          <div class=\"input-group time\">\n            <input type=\"text\" class=\"form-control\" placeholder=\"Threshold\" ng-model=\"mas.trigger_thres_cond[0].threshold\">\n            <span class=\"input-group-addon\">ms</span>\n          </div>\n          <span class=\"between-inputs\">for</span>\n          <div class=\"input-group duration\">\n            <input type=\"text\" class=\"form-control\" placeholder=\"Duration\" ng-model=\"mas.responseDuration\"\n                   ng-change=\"mas.changeResponseTimeUnits()\" id=\"responseDuration\">\n            <select pf-select ng-model=\"mas.responseUnit\" id=\"responseUnit\"\n                    ng-options=\"item.value as item.label for item in mas.timeUnits\" ng-change=\"mas.changeResponseTimeUnits()\"></select>\n          </div>\n          <span class=\"help-block\">Send alerts when the response time is over\n            {{mas.trigger_thres_cond[0].threshold}} ms\n            for more than {{mas.responseDuration}} {{mas.timeUnitsDict[mas.responseUnit]}}.</span>\n        </div>\n      </div>\n      </div>\n    </fieldset>\n    <fieldset>\n      <legend>Downtime</legend>\n      <div class=\"form-group onffswitch-form-group\">\n        <label class=\"col-md-2 control-label\" for=\"trigger_avail.enabled\">Status</label>\n        <div class=\"onoffswitch-container\">\n          <div class=\"onoffswitch\">\n            <input type=\"checkbox\" id=\"trigger_avail.enabled\" name=\"trigger_avail.enabled\" class=\"onoffswitch-checkbox\" ng-model=\"mas.trigger_avail.enabled\">\n            <label class=\"onoffswitch-label\" for=\"trigger_avail.enabled\">\n              <span class=\"onoffswitch-inner\">\n                <span class=\"onoffswitch-active ng-binding\">ON</span>\n                <span class=\"onoffswitch-inactive ng-binding\">OFF</span>\n              </span>\n              <span class=\"onoffswitch-switch\"></span>\n            </label>\n          </div>\n        </div>\n      </div>\n      <div ng-show=\"mas.trigger_avail.enabled\">\n      <div class=\"form-group\">\n        <label class=\"col-md-2 control-label\" for=\"downtimeDuration\">Duration</label>\n        <div class=\"col-md-6 inline-row\">\n          <div class=\"input-group duration\">\n            <input type=\"text\" class=\"form-control\" placeholder=\"Duration\" ng-model=\"mas.downtimeDuration\"\n                   ng-change=\"mas.changeDowntimeTimeUnits()\" id=\"downtimeDuration\">\n            <select pf-select ng-model=\"mas.downtimeUnit\" id=\"downtimeUnit\"\n                    ng-options=\"item.value as item.label for item in mas.timeUnits\" ng-change=\"mas.changeDowntimeTimeUnits()\"></select>\n          </div>\n          <span class=\"help-block\">Send alerts when the downtime lasts\n            more than {{mas.downtimeDuration}} {{mas.timeUnitsDict[mas.downtimeUnit]}}.</span>\n        </div>\n      </div>\n      </div>\n    </fieldset>\n    <div class=\"form-group\">\n      <div class=\"col-md-10 col-md-offset-2\">\n\n        <button type=\"button\" class=\"btn btn-primary\" ng-click=\"mas.save()\" ng-disabled=\"addUrlForm.$invalid || mas.saveProgress\">\n          <div ng-show=\"mas.saveProgress\" class=\"spinner spinner-sm\"></div>Save</button>\n        <button type=\"button\" class=\"btn btn-default\">Cancel</button>\n      </div>\n    </div>\n  </form>\n\n</div>\n");
$templateCache.put("plugins/metrics/html/alerts-view.html","<p class=\"info-top\"><strong>{{(mac.alertList | filter:timeFilter).length}} alerts</strong><!--  last week. --></p>\n\n<div class=\"alerts-activity\">\n  <div ng-repeat=\"alert in mac.alertList | filter:timeFilter | orderBy: \'-start\'\">\n\n    <div class=\"panel panel-default alert alert-danger\" ng-if=\"alert.type==\'AVAILABILITY\'\">\n      <div class=\"alert-icon\">\n        <i class=\"fa fa-arrow-down\"></i>\n      </div>\n      <div class=\"date\">\n        {{alert.start | date:\'medium\' }}\n      </div>\n      <div class=\"event\">\n        Server <strong>down</strong> for {{(alert.end - alert.start)/1000 | number: 0}} seconds (until\n        <span ng-if=\"alert.isThisYear && alert.isToday\">{{alert.end | date:\'shortTime\' }}).</span>\n        <span ng-if=\"alert.isThisYear && !alert.isToday\">{{alert.end | date:\'MMM d, h:mm:ss a\' }}).</span>\n        <span ng-if=\"!alert.isThisYear\">{{alert.end | date:\'medium\' }}).</span>\n      </div>\n    </div>\n\n    <div class=\"panel panel-default alert alert-danger\" ng-if=\"alert.type==\'THRESHOLD\'\">\n      <div class=\"alert-icon\">\n        <i class=\"fa fa-line-chart\"></i>\n      </div>\n      <div class=\"date\">\n        {{alert.start | date:\'medium\' }}\n      </div>\n      <div class=\"event\">\n        <strong>Response time</strong> was above the threshold ({{alert.threshold | number: 0}} ms) for {{(alert.end - alert.start) / 1000.0 | number: 0}} seconds (until\n        <span ng-if=\"alert.isThisYear && alert.isToday\">{{alert.end | date:\'shortTime\' }}).</span>\n        <span ng-if=\"alert.isThisYear && !alert.isToday\">{{alert.end | date:\'MMM d, h:mm:ss a\' }}).</span>\n        <span ng-if=\"!alert.isThisYear\">{{alert.end | date:\'medium\' }}).</span>\n        The average response time was {{alert.avg  | number: 0}} ms.\n      </div>\n    </div>\n\n  </div>\n\n\n</div>\n");
$templateCache.put("plugins/metrics/html/alerts.html","<div class=\"row hk-alerts\">\n  <div class=\"col-md-12\">\n    <h1>Alerts</h1>\n    <tabset>\n      <tab heading=\"Alerts\">\n        <div ng-include=\"\'plugins/metrics/html/alerts-view.html\'\" ng-controller=\"MetricsAlertController as mac\"></div>\n      </tab>\n      <tab heading=\"Alerts Setup\">\n        <div ng-include=\"\'plugins/metrics/html/alerts-setup.html\'\" ng-controller=\"MetricsAlertSetupController as mas\"></div>\n      </tab>\n    </tabset>\n  </div>\n</div>\n");
$templateCache.put("plugins/metrics/html/availability.html","<section class=\"availability\" ng-controller=\"MetricsAvailabilityController as vm\">\n\n  <h1>Availability</h1>\n\n  <div class=\"panel panel-default summary\">\n    <div class=\"row\">\n      <div class=\"col-md-3 summary-item\">\n        <span class=\"data\" ng-show=\"vm.uptimeRatio < 1\">{{vm.uptimeRatio * 100 | number:3}} %</span>\n        <span class=\"data\" ng-show=\"vm.uptimeRatio === 1\">{{vm.uptimeRatio * 100}} %</span>\n        <span class=\"item\">Availability</span>\n      </div>\n      <div class=\"col-md-3 summary-item\">\n        <span class=\"data\">{{vm.downtimeDuration / 1000 | number:0}}s</span>\n        <span class=\"item\">Total Downtime Duration</span>\n      </div>\n      <div class=\"col-md-3 summary-item\">\n        <span class=\"data\" ng-show=\"vm.lastDowntime.valueOf() !== 0\">{{vm.lastDowntime | date:\'mediumDate\'}}</span>\n        <span class=\"data\" ng-show=\"!vm.lastDowntime || vm.lastDowntime.valueOf() === 0\">Always Up</span>\n        <span class=\"item\">Last Downtime</span>\n      </div>\n      <div class=\"col-md-3 summary-item\">\n        <span class=\"data\">{{vm.downtimeCount}}</span>\n        <span class=\"item\">Downtime Events</span>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"panel panel-default graph\">\n    <div class=\"update pull-right\" ng-show=\"vm.availabilityDataPoints.length > 0\" >\n      <i class=\"fa fa-clock-o\"></i><a ng-click=\"vm.refreshAvailPageNow(vm.getRawMetricId())\"><strong>Last update</strong> 20 seconds ago</a>\n    </div>\n\n    <h3>Chart Placeholder</h3>\n    <!--<hawkular-chart-->\n      <!--data=\"{{vm.availabilityDataPoints}}\"-->\n      <!--chart-type=\"availability\"-->\n      <!--chart-height=\"250\">-->\n    <!--</hawkular-chart>-->\n  </div>\n\n</section>\n");
$templateCache.put("plugins/metrics/html/create-alert-form.html","<div ng-controller=\"QuickAlertController as qac\" ng-show=\"vm.chartData.dataPoints.length > 1\">\n  <div ng-show=\"!showQuickAlert\" class=\"col-sm-9 col-md-10 content\">\n    <button class=\"btn btn-primary pull-left\" ng-click=\"qac.toggleQuickAlert()\">Add an Alert</button>\n  </div>\n  <div ng-show=\"showQuickAlert\" class=\"col-sm-9 col-md-10 content\">\n    <h1>Add an Alert</h1>\n\n    <form class=\"form-horizontal\" name=\"addQuickAlertForm\" role=\"form\">\n      <div class=\"form-group\">\n        <label class=\"col-md-4 control-label\">\n          Fire when metric is\n        </label>\n\n        <div id=\"alert-radio-container\" class=\"col-md-4\">\n          <label class=\"radio-inline\">\n            <input type=\"radio\" ng-model=\"quickTrigger.operator\" class=\"radio\" value=\"LT\"> <\n          </label>\n          <label class=\"radio-inline\">\n            <input type=\"radio\" ng-model=\"quickTrigger.operator\" class=\"radio\" value=\"GT\"> >\n          </label>\n          <label class=\"radio-inline\">\n            <input type=\"radio\" ng-model=\"quickTrigger.operator\" class=\"radio\" value=\"LTE\"> <=\n          </label>\n          <label class=\"radio-inline\">\n            <input type=\"radio\" ng-model=\"quickTrigger.operator\" class=\"radio\" value=\"GTE\"> >=\n          </label>\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <label class=\"col-md-4 control-label\" for=\"threshold\">\n          Of threshold\n        </label>\n\n        <div class=\"col-md-2\">\n          <input type=\"number\" id=\"threshold\" ng-model=\"quickTrigger.threshold\" class=\"form-control\"\n                 ng-minlength=\"1\" required>\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <label class=\"col-md-4 control-label\" for=\"actions\">\n          Notify to:\n        </label>\n\n        <div class=\"col-md-3\">\n          <ui-select id=\"actions\" multiple ng-model=\"quickTrigger.actions\" theme=\"bootstrap\"\n                     ng-disabled=\"disabled\" close-on-select=\"false\">\n            <ui-select-match placeholder=\"Select action...\">{{$item}}</ui-select-match>\n            <ui-select-choices repeat=\"action in actions | filter:$select.search\">\n              {{ action }}\n            </ui-select-choices>\n          </ui-select>\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <div class=\"col-md-offset-4 col-md-6\">\n          <button class=\"btn btn-primary\" ng-click=\"qac.saveQuickAlert()\">Create Alert</button>\n          <button type=\"button\" class=\"btn btn-default\" ng-click=\"qac.toggleQuickAlert()\">Cancel</button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>\n");
$templateCache.put("plugins/metrics/html/response-time.html","<section class=\"response-time\" id=\"response-time\" ng-controller=\"MetricsViewController as vm\">\n      \n  <h1>Response Time</h1>\n\n  <div class=\"panel panel-default summary\">\n    <div class=\"row\">\n      <div class=\"col-md-4 summary-item\">\n        <span class=\"data\">{{vm.average}} <span>ms</span></span>\n        <span class=\"item\">Average</span>\n      </div>\n      <div class=\"col-md-4 summary-item\">\n        <span class=\"data\">{{vm.median}} <span>ms</span></span>\n        <span class=\"item\">Median</span>\n      </div>\n      <div class=\"col-md-4 summary-item\">\n        <span class=\"data\">{{vm.percentile95th}} <span>ms</span></span>\n        <span class=\"item\">95th percentile</span>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"panel panel-default graph\">\n    <div class=\"legend pull-left\" ng-show=\"vm.chartData.dataPoints.length > 0\">\n      <span><i class=\"fa fa-circle primary\"></i>Response Time</span>\n      <span><i class=\"fa fa-circle danger\"></i>Response Time (above the threshold)</span>\n    </div>\n    <div class=\"update pull-right\" ng-show=\"vm.chartData.dataPoints.length > 0\" >\n      <i class=\"fa fa-clock-o\"></i><a ng-click=\"vm.refreshChartDataNow(vm.getMetricId())\"><strong>Last\n      update</strong> 20 seconds ago</a>\n    </div>\n\n    <p class=\"label label-info waiting-label\" ng-hide=\"vm.chartData.dataPoints.length > 0\" >We are\n      collecting your initial data. Please be patient(could be up to a minute)...</p>\n\n    <div id=\"metrics-chart\">\n      <!-- HINT: colors for the chart can be changed in the hawkular-charts.css -->\n      <hawkular-chart\n        data=\"{{vm.chartData.dataPoints}}\"\n        chart-type=\"hawkularmetric\"\n        alert-value=\"{{vm.threshold}}\"\n        y-axis-units=\"Response Time (ms)\"\n        chart-height=\"250\">\n      </hawkular-chart>\n    </div>\n  </div>\n\n</section>");
$templateCache.put("plugins/metrics/html/single-page.html","<div id=\"spcontainer\" du-scroll-container>\n  <section id=\"secav\">\n    <div ng-include=\"\'plugins/metrics/html/availability.html\'\"></div>\n    <p><h1>&nbsp;</h1></p>\n  </section>\n  <section id=\"secrt\">\n    <div ng-include=\"\'plugins/metrics/html/response-time.html\'\"></div>\n    <p><h1>&nbsp;</h1></p>\n  </section>\n  <section id=\"secal\">\n    <div ng-include=\"\'plugins/metrics/html/alerts.html\'\"></div>\n  </section>\n</div>\n");
$templateCache.put("plugins/metrics/html/modals/delete-resource.html","<div class=\"modal-header\">\n  <button type=\"button\" class=\"close\" ng-click=\"cancel()\">\n    <span class=\"pficon pficon-close\"></span>\n  </button>\n  <h4 class=\"modal-title\">Delete Resource</h4>\n</div>\n<div class=\"modal-body\">\n  <div class=\"form-group\">\n    <p class=\"primary-message\">Are you sure you want to stop monitoring and delete the data for the site <strong>{{ vm.resource.parameters.url }}</strong> (Resource ID: {{ vm.resource.id }}) ?</p>\n    <p>This action can\'t be undone.</p>\n  </div>\n</div>\n<div class=\"modal-footer\">\n  <button type=\"button\" class=\"btn btn-default\" ng-click=\"vm.cancel()\">Cancel</button>\n  <button type=\"button\" class=\"btn btn-danger\" ng-click=\"vm.deleteResource()\">Delete</button>\n</div>\n");}]); hawtioPluginLoader.addModule("hawkular-ui-components-metrics-templates");
//# sourceMappingURL=data:application/json;base64,