/// Copyright 2014-2015 Red Hat, Inc. and/or its affiliates
/// and other contributors as indicated by the @author tags.
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///   http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.


var HawkularMetrics;
(function (HawkularMetrics) {
    HawkularMetrics.pluginName = "hawkular-metrics";
    HawkularMetrics.log = Logger.get(HawkularMetrics.pluginName);
    HawkularMetrics.templatePath = "plugins/metrics/html";
    HawkularMetrics.globalTenantId = "test";
    HawkularMetrics.globalMetricId = "";
    HawkularMetrics.globalResourceUrl = "";
    HawkularMetrics.globalResourceList = [];
    HawkularMetrics.globalChartTimeRange;
    var ChartTimeRange = (function () {
        function ChartTimeRange(initialHoursDifference) {
            this.initialHoursDifference = initialHoursDifference;
            this.init();
        }
        ChartTimeRange.prototype.init = function () {
            this.endTimestamp = moment().valueOf();
            this.startTimestamp = moment().subtract('hour', this.initialHoursDifference).valueOf();
        };
        ChartTimeRange.prototype.getStartDate = function () {
            return new Date(this.startTimestamp);
        };
        ChartTimeRange.prototype.getEndDate = function () {
            return new Date(this.endTimestamp);
        };
        ChartTimeRange.prototype.getFormattedTimeRange = function () {
            return moment(this.startTimestamp).format('H:mm') + ' - ' + moment(this.endTimestamp).format('H:mm') + ' (' + moment(this.endTimestamp).from(moment(this.startTimestamp), true) + ')';
        };
        return ChartTimeRange;
    })();
    HawkularMetrics.ChartTimeRange = ChartTimeRange;
})(HawkularMetrics || (HawkularMetrics = {}));

var HawkularMetrics;
(function (HawkularMetrics) {
    HawkularMetrics._module = angular.module(HawkularMetrics.pluginName, ['ngResource', 'ui.select', 'hawkularCharts', 'hawkular.services', 'ui.bootstrap', 'topbar']);
    var metricsTab;
    HawkularMetrics._module.config(['$httpProvider', '$locationProvider', '$routeProvider', 'HawtioNavBuilderProvider', function ($httpProvider, $locationProvider, $routeProvider, navBuilder) {
        metricsTab = navBuilder.create().id(HawkularMetrics.pluginName).title(function () { return 'Metrics'; }).href(function () { return '/metrics'; }).subPath('Add Url', 'addUrl', navBuilder.join(HawkularMetrics.templatePath, 'add-url.html')).subPath('Home', 'home', navBuilder.join(HawkularMetrics.templatePath, 'home.html')).subPath('Response Time', 'responseTime', navBuilder.join(HawkularMetrics.templatePath, 'response-time.html')).subPath('Up/Downtime', 'upDowntime', navBuilder.join(HawkularMetrics.templatePath, 'up-downtime.html')).subPath('Alerts', 'alerts', navBuilder.join(HawkularMetrics.templatePath, 'alerts.html')).build();
        navBuilder.configureRouting($routeProvider, metricsTab);
        $locationProvider.html5Mode(true);
    }]);
    HawkularMetrics._module.run(['HawtioNav', function (HawtioNav) {
        HawtioNav.add(metricsTab);
        HawkularMetrics.log.debug('loaded Metrics Plugin');
    }]);
    HawkularMetrics._module.directive('hkEnter', function () {
        return function (scope, element, attrs) {
            element.bind('keydown keypress', function (event) {
                if (event.which === 13) {
                    scope.$apply(function () {
                        scope.$eval(attrs.hkEnter);
                    });
                    event.preventDefault();
                }
            });
        };
    });
    HawkularMetrics._module.config(["$routeProvider", function ($routeProvider) {
        $routeProvider.when('/metrics/responseTime', { templateUrl: 'plugins/metrics/html/response-time.html', resolve: {
            hkResourceList: function ($filter, $location, $q, HawkularInventory) {
                var resPromise = HawkularInventory.Resource.query({ tenantId: HawkularMetrics.globalTenantId }).$promise;
                resPromise.then(function (hkResourceList) {
                    $location.path('/metrics/responseTime/' + hkResourceList[0].id);
                }, function () {
                    $location.url('/error');
                });
                return $q.defer().promise;
            }
        } }).when('/metrics/responseTime/:resourceId/', { templateUrl: 'plugins/metrics/html/response-time.html' }).when('/metrics/responseTime/:resourceId/:rangeStart', { templateUrl: 'plugins/metrics/html/response-time.html' }).when('/metrics/responseTime/:resourceId/:rangeStart/:rangeEnd', { templateUrl: 'plugins/metrics/html/response-time.html' }).when('/metrics/availability/:resourceId', { templateUrl: 'plugins/metrics/html/response-time.html' });
    }]);
    hawtioPluginLoader.addModule(HawkularMetrics.pluginName);
})(HawkularMetrics || (HawkularMetrics = {}));

var HawkularMetrics;
(function (HawkularMetrics) {
    var AddUrlController = (function () {
        function AddUrlController($location, $scope, $rootScope, $log, $filter, HawkularInventory, HawkularMetric, HawkularAlert, DataResource, resourceUrl) {
            this.$location = $location;
            this.$scope = $scope;
            this.$rootScope = $rootScope;
            this.$log = $log;
            this.$filter = $filter;
            this.HawkularInventory = HawkularInventory;
            this.HawkularMetric = HawkularMetric;
            this.HawkularAlert = HawkularAlert;
            this.DataResource = DataResource;
            this.resourceUrl = resourceUrl;
            this.httpUriPart = 'http://';
            $scope.vm = this;
            this.resourceUrl = this.httpUriPart;
            this.resourceList = this.getResourceList();
        }
        AddUrlController.prototype.addUrl = function (url) {
            var _this = this;
            var resource = {
                type: 'URL',
                id: '',
                parameters: {
                    url: url
                }
            };
            this.$log.info('Adding new Resource Url to Hawkular-inventory: ' + url);
            HawkularMetrics.globalChartTimeRange = new HawkularMetrics.ChartTimeRange(1);
            this.HawkularInventory.Resource.save({ tenantId: HawkularMetrics.globalTenantId }, resource).$promise.then(function (newResource) {
                _this.DataResource.updateResources();
                HawkularMetrics.globalMetricId = newResource.id;
                HawkularMetrics.globalResourceUrl = resource.parameters.url;
                console.dir(newResource);
                _this.$log.info('New Resource ID: ' + HawkularMetrics.globalMetricId + ' created for url: ' + HawkularMetrics.globalResourceUrl);
                var metrics = [{
                    name: HawkularMetrics.globalMetricId + '.status.duration',
                    unit: 'MILLI_SECOND',
                    description: 'Response Time in ms.'
                }, {
                    name: HawkularMetrics.globalMetricId + '.status.code',
                    unit: 'NONE',
                    description: 'Status Code'
                }];
                _this.HawkularInventory.Metric.save({
                    tenantId: HawkularMetrics.globalTenantId,
                    resourceId: newResource.id
                }, metrics).$promise.then(function (newMetrics) {
                    toastr.info('Your data is being collected. Please be patient (should be about another minute).');
                    _this.$location.url('/metrics/responseTime/' + newResource.id);
                });
            });
        };
        AddUrlController.prototype.getResourceList = function () {
            var _this = this;
            return this.HawkularInventory.Resource.query({ tenantId: HawkularMetrics.globalTenantId }, function (aResourceList) {
                _this.resourceList = aResourceList;
                angular.forEach(_this.resourceList, function (res, idx) {
                    this.HawkularMetric.NumericMetricData.queryMetrics({
                        tenantId: HawkularMetrics.globalTenantId,
                        resourceId: res.id,
                        numericId: (res.id + '.status.duration'),
                        start: moment().subtract(1, 'hour').valueOf(),
                        end: moment().valueOf()
                    }, function (resource) {
                        res['responseTime'] = resource;
                    });
                    this.HawkularMetric.NumericMetricData.queryMetrics({
                        tenantId: HawkularMetrics.globalTenantId,
                        resourceId: res.id,
                        numericId: (res.id + '.status.code'),
                        start: moment().subtract(1, 'hour').valueOf(),
                        end: moment().valueOf()
                    }, function (resource) {
                        res['isUp'] = (resource[0].value >= 200 && resource[0].value < 300);
                        var upTime = 0;
                        for (var i = 0; i < resource.length; i++) {
                            if (resource[i].value >= 200 && resource[i].value < 300) {
                                upTime++;
                            }
                        }
                        res['availability'] = upTime / resource.length * 100;
                        res['downTime'] = resource.length - upTime;
                    });
                    this.HawkularAlert.Alert.query({ query: res.id, start: moment().subtract(1, 'hour').valueOf(), end: moment().valueOf() }, function (alertsList) {
                        res['alerts'] = [];
                        for (var i = 0; i < alertsList.length; i++) {
                            if (alertsList[i].evalSets[0][0].condition.dataId.indexOf(res.id) === 0) {
                                res['alerts'].push(alertsList[i].evalSets[0][0]);
                            }
                        }
                    });
                    res['updateTime'] = new Date();
                }, _this);
            });
        };
        AddUrlController.prototype.getAverage = function (data, field) {
            if (data) {
                var sum = 0;
                for (var i = 0; i < data.length; i++) {
                    sum += parseInt(data[i][field], 10);
                }
                return Math.round(sum / data.length);
            }
        };
        AddUrlController.prototype.deleteResource = function (resource) {
            var _this = this;
            this.HawkularInventory.Resource.delete({
                tenantId: HawkularMetrics.globalTenantId,
                resourceId: resource.id
            }).$promise.then(function (res) {
                toastr.info('The site ' + resource.parameters.url + ' is no longer being monitored.');
                _this.resourceList = _this.getResourceList();
            });
        };
        AddUrlController.$inject = ['$location', '$scope', '$rootScope', '$log', '$filter', 'HawkularInventory', 'HawkularMetric', 'HawkularAlert', 'DataResource'];
        return AddUrlController;
    })();
    HawkularMetrics.AddUrlController = AddUrlController;
    HawkularMetrics._module.controller('HawkularMetrics.AddUrlController', AddUrlController);
})(HawkularMetrics || (HawkularMetrics = {}));

var HawkularMetrics;
(function (HawkularMetrics) {
    var MetricsAlertController = (function () {
        function MetricsAlertController($scope, HawkularAlert, $log, $q, alertList) {
            var _this = this;
            this.$scope = $scope;
            this.HawkularAlert = HawkularAlert;
            this.$log = $log;
            this.$q = $q;
            this.alertList = alertList;
            this.$log.debug('querying data');
            this.alertList = [];
            this.HawkularAlert.Alert.query().$promise.then(function (data) {
                _this.$log.debug('querying data finished');
                _this.alertList = data;
            }, function (error) {
                _this.$log.debug('querying data error', error);
            });
        }
        MetricsAlertController.$inject = ['$scope', 'HawkularAlert', '$log', '$q'];
        return MetricsAlertController;
    })();
    HawkularMetrics.MetricsAlertController = MetricsAlertController;
    HawkularMetrics._module.controller('MetricsAlertController', MetricsAlertController);
})(HawkularMetrics || (HawkularMetrics = {}));

var HawkularMetrics;
(function (HawkularMetrics) {
    var QuickAlertController = (function () {
        function QuickAlertController($scope, HawkularAlert, $log, $q) {
            this.$scope = $scope;
            this.HawkularAlert = HawkularAlert;
            this.$log = $log;
            this.$q = $q;
            this.PROMISE_BREAK = 'magicValue1234';
            this.$scope.showQuickAlert = false;
            this.$scope.quickTrigger = {
                operator: 'LT',
                threshold: 0
            };
            this.allActions();
        }
        QuickAlertController.prototype.toggleQuickAlert = function () {
            this.$scope.showQuickAlert = !this.$scope.showQuickAlert;
        };
        QuickAlertController.prototype.allActions = function () {
            var _this = this;
            this.$scope.actions = [];
            this.HawkularAlert.Action.query(function (result) {
                _this.$scope.actions = result;
            }, function (error) {
                _this.errorToastr(error, 'Error loading Alerts Notifiers:');
            });
        };
        QuickAlertController.prototype.errorToastr = function (error, errorMsg) {
            var errorMsgComplete;
            if (error.data && error.data.errorMsg) {
                errorMsgComplete = error.data.errorMsg;
            }
            else {
                errorMsgComplete = errorMsg + ' ' + error;
            }
            this.$log.error(errorMsgComplete);
            toastr.error(errorMsgComplete);
        };
        QuickAlertController.prototype.errorHandler = function (error, msg) {
            if (error !== this.PROMISE_BREAK) {
                this.errorToastr(error, msg);
            }
            return this.$q.reject(this.PROMISE_BREAK);
        };
        QuickAlertController.prototype.saveQuickAlert = function () {
            var _this = this;
            if (HawkularMetrics.globalMetricId !== '.status.duration' && HawkularMetrics.globalMetricId !== '.status.code') {
                var newTrigger = {};
                newTrigger.name = HawkularMetrics.globalMetricId + 'ResponseTime' + '-' + this.$scope.quickTrigger.operator + '-' + this.$scope.quickTrigger.threshold;
                newTrigger.description = 'Created on ' + new Date();
                newTrigger.firingMatch = 'ALL';
                newTrigger.safetyMatch = 'ALL';
                newTrigger.enabled = true;
                newTrigger.safetyEnabled = false;
                newTrigger.actions = this.$scope.quickTrigger.actions;
                var newDampening = {
                    triggerId: '',
                    type: 'RELAXED_COUNT',
                    evalTrueSetting: 1,
                    evalTotalSetting: 1,
                    evalTimeSetting: 0
                };
                this.HawkularAlert.Trigger.save(newTrigger).$promise.then(function (trigger) {
                    _this.$log.debug('Success Trigger save');
                    newDampening.triggerId = trigger.id;
                    return _this.HawkularAlert.Dampening.save({ triggerId: newDampening.triggerId }, newDampening).$promise;
                }, function (error) {
                    return _this.errorHandler(error, 'Error saving Trigger');
                }).then(function (dampening) {
                    _this.$log.debug('Success Dampening save', dampening);
                    var newThresholdCondition = {
                        triggerId: dampening.triggerId,
                        type: 'THRESHOLD',
                        dataId: HawkularMetrics.globalMetricId,
                        operator: _this.$scope.quickTrigger.operator,
                        threshold: _this.$scope.quickTrigger.threshold
                    };
                    return _this.HawkularAlert.Condition.save({ triggerId: newThresholdCondition.triggerId }, newThresholdCondition).$promise;
                }, function (errorDampening) {
                    return _this.errorHandler(errorDampening, 'Error saving Trigger');
                }).then(function () {
                    _this.$log.debug('Success ThresholdCondition save');
                    _this.$log.debug('Alert Created!');
                    toastr.success('Alert Created!');
                    _this.toggleQuickAlert();
                    return _this.HawkularAlert.Alert.reload().$promise;
                }, function (errorCondition) {
                    return _this.errorHandler(errorCondition, 'Error saving Trigger Condition');
                }).then(angular.noop, function (errorReload) {
                    return _this.errorHandler(errorReload, 'Error reloading Alerts');
                }).catch(function (error) {
                    _this.errorHandler(error, 'Error:');
                });
            }
            else {
                this.$log.debug('No metric selected');
                toastr.warning('No metric selected');
            }
        };
        QuickAlertController.$inject = ['$scope', 'HawkularAlert', '$log', '$q'];
        return QuickAlertController;
    })();
    HawkularMetrics.QuickAlertController = QuickAlertController;
    HawkularMetrics._module.controller('QuickAlertController', QuickAlertController);
})(HawkularMetrics || (HawkularMetrics = {}));

var HawkularMetrics;
(function (HawkularMetrics) {
    var MetricsViewController = (function () {
        function MetricsViewController($scope, $rootScope, $interval, $log, HawkularMetric, HawkularInventory, $routeParams, startTimeStamp, endTimeStamp, dateRange) {
            var _this = this;
            this.$scope = $scope;
            this.$rootScope = $rootScope;
            this.$interval = $interval;
            this.$log = $log;
            this.HawkularMetric = HawkularMetric;
            this.HawkularInventory = HawkularInventory;
            this.$routeParams = $routeParams;
            this.startTimeStamp = startTimeStamp;
            this.endTimeStamp = endTimeStamp;
            this.dateRange = dateRange;
            this.bucketedDataPoints = [];
            this.contextDataPoints = [];
            this._resourceList = [];
            this.median = 0;
            this.percentile95th = 0;
            this.average = 0;
            $scope.vm = this;
            this.startTimeStamp = moment().subtract(1, 'hours').toDate();
            this.endTimeStamp = new Date();
            this.dateRange = moment(this.startTimeStamp).format('H:mm') + ' - ' + moment(this.endTimeStamp).format('H:mm') + ' (' + moment(this.endTimeStamp).from(moment(this.startTimeStamp), true) + ')';
            $scope.$on('RefreshChart', function (event) {
                _this.refreshChartDataNow(_this.getMetricId());
            });
            this.onCreate($routeParams.resourceId);
        }
        Object.defineProperty(MetricsViewController.prototype, "resourceList", {
            get: function () {
                return this._resourceList;
            },
            set: function (newResourceList) {
                HawkularMetrics.globalResourceList = newResourceList;
                this._resourceList = newResourceList;
            },
            enumerable: true,
            configurable: true
        });
        MetricsViewController.prototype.onCreate = function (curResourceId) {
            var _this = this;
            this.autoRefresh(60);
            this.HawkularInventory.Resource.query({ tenantId: HawkularMetrics.globalTenantId }, function (aResourceList) {
                _this.resourceList = aResourceList;
                _this.selectedResource = _.last(_this._resourceList);
                for (var i = 0; i < _this._resourceList.length; i++) {
                    if (aResourceList[i].id === curResourceId) {
                        _this.selectedResource = _this._resourceList[i];
                    }
                }
                _this.refreshChartDataNow(_this.getMetricId());
            });
        };
        MetricsViewController.prototype.cancelAutoRefresh = function () {
            this.$interval.cancel(this.autoRefreshPromise);
            toastr.info('Canceling Auto Refresh');
        };
        MetricsViewController.prototype.autoRefresh = function (intervalInSeconds) {
            var _this = this;
            this.refreshHistoricalChartDataForTimestamp(this.getMetricId());
            this.autoRefreshPromise = this.$interval(function () {
                _this.endTimeStamp = new Date();
                _this.refreshHistoricalChartDataForTimestamp(_this.getMetricId());
            }, intervalInSeconds * 1000);
            this.$scope.$on('$destroy', function () {
                _this.$interval.cancel(_this.autoRefreshPromise);
            });
        };
        MetricsViewController.prototype.noDataFoundForId = function (id) {
            this.$log.warn('No Data found for id: ' + id);
        };
        MetricsViewController.prototype.refreshChartDataNow = function (metricId, startTime) {
            var adjStartTimeStamp = moment().subtract('hours', 1).toDate();
            this.endTimeStamp = new Date();
            this.refreshHistoricalChartData(metricId, angular.isUndefined(startTime) ? adjStartTimeStamp : startTime, this.endTimeStamp);
        };
        MetricsViewController.prototype.refreshHistoricalChartData = function (metricId, startDate, endDate) {
            this.refreshHistoricalChartDataForTimestamp(metricId, startDate.getTime(), endDate.getTime());
        };
        MetricsViewController.prototype.getMetricId = function () {
            return MetricsViewController.getResourceDurationMetricId();
        };
        MetricsViewController.getResourceDurationMetricId = function () {
            return HawkularMetrics.globalMetricId + '.status.duration';
        };
        MetricsViewController.prototype.refreshHistoricalChartDataForTimestamp = function (metricId, startTime, endTime) {
            var _this = this;
            if (!endTime) {
                endTime = this.endTimeStamp.getTime();
            }
            if (!startTime) {
                startTime = this.startTimeStamp.getTime();
            }
            if (metricId) {
                this.HawkularMetric.NumericMetricData.queryMetrics({
                    tenantId: HawkularMetrics.globalTenantId,
                    numericId: metricId,
                    start: startTime,
                    end: endTime,
                    buckets: 60
                }).$promise.then(function (response) {
                    _this.bucketedDataPoints = _this.formatBucketedChartOutput(response);
                    console.dir(_this.bucketedDataPoints);
                    _this.median = Math.round(_.last(_this.bucketedDataPoints).median);
                    _this.percentile95th = Math.round(_.last(_this.bucketedDataPoints).percentile95th);
                    _this.average = Math.round(_.last(_this.bucketedDataPoints).avg);
                    if (_this.bucketedDataPoints.length) {
                        _this.chartData = {
                            id: metricId,
                            startTimeStamp: _this.startTimeStamp,
                            endTimeStamp: _this.endTimeStamp,
                            dataPoints: _this.bucketedDataPoints,
                            contextDataPoints: _this.contextDataPoints,
                            annotationDataPoints: []
                        };
                    }
                    else {
                        _this.noDataFoundForId(_this.getMetricId());
                    }
                }, function (error) {
                    _this.$log.error('Error Loading Chart data');
                    toastr.error('Error Loading Chart Data: ' + error);
                });
            }
        };
        MetricsViewController.prototype.formatBucketedChartOutput = function (response) {
            return _.map(response, function (point) {
                return {
                    timestamp: point.start,
                    date: new Date(point.start),
                    value: !angular.isNumber(point.value) ? 0 : point.value,
                    avg: (point.empty) ? 0 : point.avg,
                    min: !angular.isNumber(point.min) ? 0 : point.min,
                    max: !angular.isNumber(point.max) ? 0 : point.max,
                    percentile95th: !angular.isNumber(point.percentile95th) ? 0 : point.percentile95th,
                    median: !angular.isNumber(point.median) ? 0 : point.median,
                    empty: point.empty
                };
            });
        };
        MetricsViewController.$inject = ['$scope', '$rootScope', '$interval', '$log', 'HawkularMetric', 'HawkularInventory', '$routeParams'];
        return MetricsViewController;
    })();
    HawkularMetrics.MetricsViewController = MetricsViewController;
    HawkularMetrics._module.controller('MetricsViewController', MetricsViewController);
})(HawkularMetrics || (HawkularMetrics = {}));

var HawkularMetrics;
(function (HawkularMetrics) {
    HawkularMetrics.OverviewController = HawkularMetrics._module.controller("HawkularMetrics.OverviewController", ['$scope', function ($scope) {
        $scope.overview = "Over View";
    }]);
})(HawkularMetrics || (HawkularMetrics = {}));

angular.module("hawkular-ui-components-metrics-templates", []).run(["$templateCache", function($templateCache) {$templateCache.put("plugins/metrics/html/add-url.html","<div ng-controller=\"HawkularMetrics.AddUrlController as vm\">\n  <div class=\"container text-center\">\n    <h1>Welcome Back {{username}}!</h1>\n    <h2 ng-show=\"resourcesList.length === 0\">Collect metrics from a website that you want to monitor.</h2>\n\n    <form class=\"form-horizontal add-url\" name=\"addUrlForm\" role=\"form\" novalidate ng-submit=\"vm.addUrl(vm.resourceUrl)\">\n      <div class=\"form-group input\">\n        <div class=\"col-lg-5 col-sm-6 align-center\">\n          <div class=\"input-group\" ng-class=\"{\'input-group-lg\': resourcesList.length === 0}\">\n            <input type=\"url\" class=\"form-control\" name=\"resourceUrl\" ng-model=\"vm.resourceUrl\"\n                   ng-model-options=\"{ updateOn: \'default blur\'}\"\n                   placeholder=\"Enter a website URL (e.g., http://mysite.com/home)\" required>\n            <span class=\"help-block\"\n                  ng-show=\"addUrlForm.resourceUrl.$dirty && addUrlForm.resourceUrl.$invalid\">The URL you entered is not valid. Please enter a valid URL.</span>\n              <span class=\"input-group-btn\">\n                   <button class=\"btn btn-primary\" ng-class=\"{\'btn-lg\': resourcesList.length === 0}\" type=\"submit\" ng-disabled=\"addUrlForm.$invalid\">\n                   Add URL\n                   </button>\n              </span>\n          </div>\n        </div>\n      </div>\n      <div class=\"form-group loading hide\">\n        <div class=\"spinner spinner-lg\"></div>\n        <button type=\"button\" class=\"btn btn-link\">Cancel</button>\n      </div>\n    </form>\n\n    <div class=\"row urls-list-labels\">\n      <div class=\"col-md-4 text-left\">\n        <button class=\"btn btn-link\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"Sort\">\n          URL <b class=\"caret\"></b>\n        </button>\n      </div>\n      <div class=\"col-md-4\">\n        Current Response Time\n      </div>\n      <div class=\"col-md-4\">\n        Current Availability\n      </div>\n    </div>\n\n    <div class=\"panel panel-default summary url-info\" ng-repeat=\"res in vm.resourceList\">\n      <div class=\"row row-table\">\n        <div class=\"col-md-4 summary-item\">\n          <span class=\"url-link\"><a href=\"/metrics/responseTime/{{res.id}}\">{{res.parameters.url}}</a></span>\n          <button class=\"btn btn-link trigger\" tooltip=\"Expand/collapse\" ng-click=\"res.expanded = !res.expanded\"><i class=\"fa\" ng-class=\"res.expanded ? \'fa-minus-square-o\' : \'fa-plus-square-o\'\"></i>Last 24 hours</button>\n        </div>\n        <div class=\"col-md-4 summary-item\">\n          <span class=\"data\">{{res.responseTime[0].value}} <span>ms</span></span>\n        </div>\n        <div class=\"col-md-4 summary-item\">\n          <span class=\"data\"><i class=\"fa \" ng-class=\"res.isUp ? \'fa-arrow-up\' : \'fa-arrow-down\'\"></i>{{res.isUp ? \'Up\' : \'Down\'}}</span>\n          <span class=\"update\" tooltip=\"Last update\"><i class=\"fa fa-clock-o\"></i>{{res.updateTime| date:\"HH:mm\" }}</span>\n        </div>\n      </div>\n      <hr ng-show=\"res.expanded\">\n      <div class=\"row row-table panel-expanded-content\" ng-show=\"res.expanded\">\n        <div class=\"col-md-4 summary-item text-left\">\n          <ul class=\"list-unstyled alert-status\" ng-hide=\"res.alerts.length === 0\">\n            <li ng-repeat=\"alert in res.alerts|limitTo:3\">\n              <i class=\"fa fa-flag\"></i>{{alert.dataTimestamp|date:\'yyyy-MM-dd HH:mm\'}}: <strong>{{alert.condition.type}}: {{alert.value}}</strong>\n            </li>\n          </ul>\n          <a href=\"/metrics/alerts/{{res.id}}\">View All Alerts ({{res.alerts.length}})</a>\n          <div class=\"data\" ng-show=\"res.alerts.length === 0\"><i class=\"fa fa-thumbs-o-up\"></i>No Alerts</div>\n        </div>\n        <div class=\"col-md-4 summary-item\">\n          <div id=\"metrics-chart\" class=\"top-area\" style=\"height: 44px; width: 237px;\">\n            <hawkular-chart data=\"{{res.responseTime}}\" chart-type=\"line\" chart-height=\"44\" chart-width=\"237\"></hawkular-chart>\n            <!--<img src=\"img/overview-graph.png\" alt=\"overview-graph\" width=\"237\" height=\"44\">-->\n          </div>\n          <div class=\"bottom-area\">\n            <span class=\"data\">{{vm.getAverage(res.responseTime, \'value\')}} <span>ms</span></span>\n            <span class=\"item\">Average Response Time</span>\n          </div>\n\n        </div>\n        <div class=\"col-md-4 summary-item\">\n          <div class=\"top-area\">\n            <span class=\"data\" ng-show=\"res.availability === 100\"><i class=\"fa fa-check\"></i>No Downtime</span>\n            <span class=\"data\" ng-hide=\"res.availability === 100\"><i class=\"fa fa-arrow-down\"></i>Down {{res.downTime}} min</span>\n          </div>\n          <div class=\"bottom-area\">\n            <span class=\"data\" ng-hide=\"res.availability === 100\">{{res.availability | number:3}} <span>%</span></span>\n            <span class=\"data\" ng-show=\"res.availability === 100\">{{res.availability}} <span>%</span></span>\n            <span class=\"item\">Availability</span>\n          </div>\n          <button class=\"btn btn-link delete\" tooltip=\"Delete\" ng-click=\"vm.deleteResource(res)\"><i class=\"fa fa-trash-o\"></i></button>\n        </div>\n      </div>\n    </div>\n\n  </div>\n</div>\n");
$templateCache.put("plugins/metrics/html/alerts-setup.html","<div class=\"alert-settings\">\n  <form class=\"form-horizontal\">\n    <fieldset>\n      <legend>Preferences</legend>\n      <div class=\"form-group\">\n        <label class=\"col-md-2 control-label\" for=\"email\">Email</label>\n        <div class=\"col-md-6\">\n          <input type=\"text\" id=\"email\" class=\"form-control\">\n          <span class=\"help-block\">Send alerts to this email address.</span>\n        </div>\n      </div>\n    </fieldset>\n    <fieldset>\n      <legend>Response Time</legend>\n      <div class=\"form-group\">\n        <label class=\"col-md-2 control-label\" for=\"email\">Status</label>\n        <div class=\"col-md-6\">\n          <div class=\"onoffswitch\">\n            <input type=\"checkbox\" id=\"rt\" class=\"onoffswitch-checkbox\">\n            <label class=\"onoffswitch-label\" for=\"rt\">\n                        <span class=\"onoffswitch-inner\">\n                          <span class=\"onoffswitch-active ng-binding\">ON</span>\n                          <span class=\"onoffswitch-inactive ng-binding\">OFF</span>\n                        </span>\n              <span class=\"onoffswitch-switch\"></span>\n            </label>\n          </div>\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <label class=\"col-md-2 control-label\" for=\"email\">Threshold and duration</label>\n        <div class=\"col-md-6 inline-row\">\n          <div class=\"input-group time\">\n            <input type=\"text\" class=\"form-control\" placeholder=\"Threshold\">\n            <span class=\"input-group-addon\">ms</span>\n          </div>\n          <span class=\"between-inputs\">for</span>\n          <div class=\"input-group duration\">\n            <input type=\"text\" class=\"form-control\" placeholder=\"Duration\">\n            <select class=\"selectpicker\" style=\"display: none;\">\n              <option>miliseconds</option>\n              <option>seconds</option>\n              <option>minutes</option>\n              <option>hours</option>\n            </select><div class=\"btn-group bootstrap-select input-group-btn\"><button type=\"button\" class=\"btn dropdown-toggle selectpicker btn-default\" data-toggle=\"dropdown\" title=\"miliseconds\"><span class=\"filter-option pull-left\">miliseconds</span>&nbsp;<span class=\"caret\"></span></button><div class=\"dropdown-menu open\"><ul class=\"dropdown-menu inner selectpicker\" role=\"menu\"><li rel=\"0\" class=\"selected\"><a tabindex=\"0\" class=\"\" style=\"\"><span class=\"text\">miliseconds</span><i class=\"glyphicon glyphicon-ok icon-ok check-mark\"></i></a></li><li rel=\"1\"><a tabindex=\"0\" class=\"\" style=\"\"><span class=\"text\">seconds</span><i class=\"glyphicon glyphicon-ok icon-ok check-mark\"></i></a></li><li rel=\"2\"><a tabindex=\"0\" class=\"\" style=\"\"><span class=\"text\">minutes</span><i class=\"glyphicon glyphicon-ok icon-ok check-mark\"></i></a></li><li rel=\"3\"><a tabindex=\"0\" class=\"\" style=\"\"><span class=\"text\">hours</span><i class=\"glyphicon glyphicon-ok icon-ok check-mark\"></i></a></li></ul></div></div>\n          </div>\n          <span class=\"help-block\">Send alerts when the response time is over 2000 ms for more than 3 minutes.</span>\n        </div>\n      </div>\n    </fieldset>\n    <fieldset>\n      <legend>Downtime</legend>\n      <div class=\"form-group\">\n        <label class=\"col-md-2 control-label\" for=\"email\">Status</label>\n        <div class=\"col-md-6\">\n          <div class=\"onoffswitch\">\n            <input type=\"checkbox\" id=\"rt\" name=\"access\" class=\"onoffswitch-checkbox\">\n            <label class=\"onoffswitch-label\" for=\"rt\">\n                        <span class=\"onoffswitch-inner\">\n                          <span class=\"onoffswitch-active ng-binding\">ON</span>\n                          <span class=\"onoffswitch-inactive ng-binding\">OFF</span>\n                        </span>\n              <span class=\"onoffswitch-switch\"></span>\n            </label>\n          </div>\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <label class=\"col-md-2 control-label\" for=\"email\">Duration</label>\n        <div class=\"col-md-6 inline-row\">\n          <div class=\"input-group duration\">\n            <input type=\"text\" class=\"form-control\" placeholder=\"Duration\">\n            <select class=\"selectpicker\" style=\"display: none;\">\n              <option>miliseconds</option>\n              <option>seconds</option>\n              <option>minutes</option>\n              <option>hours</option>\n            </select><div class=\"btn-group bootstrap-select input-group-btn\"><button type=\"button\" class=\"btn dropdown-toggle selectpicker btn-default\" data-toggle=\"dropdown\" title=\"miliseconds\"><span class=\"filter-option pull-left\">miliseconds</span>&nbsp;<span class=\"caret\"></span></button><div class=\"dropdown-menu open\"><ul class=\"dropdown-menu inner selectpicker\" role=\"menu\"><li rel=\"0\" class=\"selected\"><a tabindex=\"0\" class=\"\" style=\"\"><span class=\"text\">miliseconds</span><i class=\"glyphicon glyphicon-ok icon-ok check-mark\"></i></a></li><li rel=\"1\"><a tabindex=\"0\" class=\"\" style=\"\"><span class=\"text\">seconds</span><i class=\"glyphicon glyphicon-ok icon-ok check-mark\"></i></a></li><li rel=\"2\"><a tabindex=\"0\" class=\"\" style=\"\"><span class=\"text\">minutes</span><i class=\"glyphicon glyphicon-ok icon-ok check-mark\"></i></a></li><li rel=\"3\"><a tabindex=\"0\" class=\"\" style=\"\"><span class=\"text\">hours</span><i class=\"glyphicon glyphicon-ok icon-ok check-mark\"></i></a></li></ul></div></div>\n          </div>\n          <span class=\"help-block\">Send alerts when the downtime lasts more than 2 minutes.</span>\n        </div>\n      </div>\n    </fieldset>\n    <div class=\"form-group\">\n      <div class=\"col-md-10 col-md-offset-2\">\n        <button type=\"button\" class=\"btn btn-primary\">Save</button>\n        <button type=\"button\" class=\"btn btn-default\">Cancel</button>\n      </div>\n    </div>\n  </form>\n\n</div>\n");
$templateCache.put("plugins/metrics/html/alerts-view.html","<p class=\"info-top\"><strong>{{mac.alertList.length}} alerts</strong> last week.</p>\n\n<div class=\"alerts-activity\">\n  <div ng-repeat=\"alert in mac.alertList\">\n    <div class=\"panel panel-default alert alert-danger\">\n      <div class=\"alert-icon\">\n        <i class=\"fa fa-line-chart\"></i>\n      </div>\n      <div class=\"date\">\n        {{alert.ctime | date:\'medium\' }}\n      </div>\n      <div class=\"event\">\n        <strong>Metrics</strong> met the condition.\n      </div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/metrics/html/alerts.html","<div class=\"row\" >\n  <div class=\"col-md-12\">\n    <h1>Alerts</h1>\n    <tabset>\n      <tab heading=\"Alerts\">\n        <div ng-include=\"\'plugins/metrics/html/alerts-view.html\'\" ng-controller=\"MetricsAlertController as mac\"></div>\n      </tab>\n      <tab heading=\"Alerts Setup\">\n        <div ng-include=\"\'plugins/metrics/html/alerts-setup.html\'\"></div>\n      </tab>\n    </tabset>\n  </div>\n</div>\n");
$templateCache.put("plugins/metrics/html/create-alert-form.html","<div ng-controller=\"QuickAlertController as qac\" ng-show=\"vm.chartData.dataPoints.length > 1\">\n  <div ng-show=\"!showQuickAlert\" class=\"col-sm-9 col-md-10 content\">\n    <button class=\"btn btn-primary pull-left\" ng-click=\"qac.toggleQuickAlert()\">Add an Alert</button>\n  </div>\n  <div ng-show=\"showQuickAlert\" class=\"col-sm-9 col-md-10 content\">\n    <h1>Add an Alert</h1>\n\n    <form class=\"form-horizontal\" name=\"addQuickAlertForm\" role=\"form\">\n      <div class=\"form-group\">\n        <label class=\"col-md-4 control-label\">\n          Fire when metric is\n        </label>\n\n        <div id=\"alert-radio-container\" class=\"col-md-4\">\n          <label class=\"radio-inline\">\n            <input type=\"radio\" ng-model=\"quickTrigger.operator\" class=\"radio\" value=\"LT\"> <\n          </label>\n          <label class=\"radio-inline\">\n            <input type=\"radio\" ng-model=\"quickTrigger.operator\" class=\"radio\" value=\"GT\"> >\n          </label>\n          <label class=\"radio-inline\">\n            <input type=\"radio\" ng-model=\"quickTrigger.operator\" class=\"radio\" value=\"LTE\"> <=\n          </label>\n          <label class=\"radio-inline\">\n            <input type=\"radio\" ng-model=\"quickTrigger.operator\" class=\"radio\" value=\"GTE\"> >=\n          </label>\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <label class=\"col-md-4 control-label\" for=\"threshold\">\n          Of threshold\n        </label>\n\n        <div class=\"col-md-2\">\n          <input type=\"number\" id=\"threshold\" ng-model=\"quickTrigger.threshold\" class=\"form-control\"\n                 ng-minlength=\"1\" required>\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <label class=\"col-md-4 control-label\" for=\"actions\">\n          Notify to:\n        </label>\n\n        <div class=\"col-md-3\">\n          <ui-select id=\"actions\" multiple ng-model=\"quickTrigger.actions\" theme=\"bootstrap\"\n                     ng-disabled=\"disabled\" close-on-select=\"false\">\n            <ui-select-match placeholder=\"Select action...\">{{$item}}</ui-select-match>\n            <ui-select-choices repeat=\"action in actions | filter:$select.search\">\n              {{ action }}\n            </ui-select-choices>\n          </ui-select>\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <div class=\"col-md-offset-4 col-md-6\">\n          <button class=\"btn btn-primary\" ng-click=\"qac.saveQuickAlert()\">Create Alert</button>\n          <button type=\"button\" class=\"btn btn-default\" ng-click=\"qac.toggleQuickAlert()\">Cancel</button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>\n");
$templateCache.put("plugins/metrics/html/home.html","<div class=\"row\" ng-controller=\"HawkularMetrics.OverviewController as vm\">\n  <div class=\"col-md-12\">\n    <h1>Home Page (when url exists)</h1>\n  </div>\n</div>\n");
$templateCache.put("plugins/metrics/html/response-time.html","<div ng-controller=\"MetricsViewController as vm\">\n\n  <div class=\"col-sm-9 col-md-10 content\">\n\n    <!--<div class=\"well\" id=\"control-bar\">-->\n            <!--<span class=\"col-md-3 col-sm-4 select-url-container\">-->\n                <!--<select class=\"form-control input-sm select-url\" ng-model=\"vm.selectedResource\"-->\n                        <!--ng-options=\"rs.parameters.url for rs in vm.resourceList\"></select>-->\n            <!--</span>-->\n            <!--<span id=\"date-range-container\" class=\"col-md-3 col-sm-2 pull-right\">-->\n                <!--<span id=\"date-range\" class=\"input-group input-group-sm\">-->\n                    <!--<input type=\"text\" class=\"form-control input-sm\" value=\"{{vm.dateRange}}\" readonly>-->\n                <!--</span>-->\n            <!--</span>-->\n    <!--</div>-->\n\n    <div class=\"col-sm-9 col-md-10 content response-time\">\n      <h1>Response Time</h1>\n\n      <div class=\"panel panel-default graph-summary\">\n        <div class=\"row\">\n          <div class=\"col-md-4 summary-item\">\n            <span class=\"data\">{{vm.average}} <span>ms</span></span>\n            <span class=\"item\">Average</span>\n          </div>\n          <div class=\"col-md-4 summary-item\">\n            <span class=\"data\">{{vm.median}} <span>ms</span></span>\n            <span class=\"item\">Median</span>\n          </div>\n          <div class=\"col-md-4 summary-item\">\n            <span class=\"data\">{{vm.percentile95th}} <span>ms</span></span>\n            <span class=\"item\">95th percentile</span>\n          </div>\n        </div>\n      </div>\n\n\n      <div class=\"panel panel-default graph\">\n        <div class=\"legend pull-left\" ng-show=\"vm.chartData.dataPoints.length > 0\">\n          <span><i class=\"fa fa-circle primary\"></i>Response Time</span>\n          <span><i class=\"fa fa-circle danger\"></i>Response Time (above the threshold)</span>\n        </div>\n        <div class=\"update pull-right\" ng-show=\"vm.chartData.dataPoints.length > 0\" >\n          <i class=\"fa fa-clock-o\"></i><a ng-click=\"vm.refreshChartDataNow(vm.getMetricId())\"><strong>Last\n          update</strong> 1 minutes ago</a>\n        </div>\n\n        <p class=\"label label-info waiting-label\" ng-hide=\"vm.chartData.dataPoints.length > 0\" >We are\n          collecting your initial data. Please be patient(could be up to a minute)...</p>\n\n\n        <div id=\"metrics-chart\">\n          <!-- HINT: colors for the chart can be changed in the hawkular-charts.css -->\n          <hawkular-chart\n            data=\"{{vm.chartData.dataPoints}}\"\n            chart-type=\"hawkularmetric\"\n            alert-value=\"500\"\n            hide-high-low-values=\"true\"\n            y-axis-units=\"Response Time (ms)\"\n            chart-height=\"250\">\n          </hawkular-chart>\n        </div>\n      </div>\n\n\n    </div>\n\n\n  </div>\n\n</div>\n\n\n");
$templateCache.put("plugins/metrics/html/up-downtime.html","<div class=\"row\" ng-controller=\"HawkularMetrics.OverviewController as vm\">\n  <div class=\"col-md-12\">\n    <h1>Availability</h1>\n  </div>\n</div>\n");}]); hawtioPluginLoader.addModule("hawkular-ui-components-metrics-templates");
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpY2VuY2UudHh0IiwiL3NvdXJjZS9pbmNsdWRlcy5qcyIsIi9tZXRyaWNzL3RzL21ldHJpY3NHbG9iYWxzLnRzIiwiL21ldHJpY3MvdHMvbWV0cmljc1BsdWdpbi50cyIsIi9tZXRyaWNzL3RzL2FkZFVybFBhZ2UudHMiLCIvbWV0cmljcy90cy9tZXRyaWNzQWxlcnRzLnRzIiwiL21ldHJpY3MvdHMvbWV0cmljc1Jlc3BvbnNlQWxlcnRGb3JtLnRzIiwiL21ldHJpY3MvdHMvbWV0cmljc1Jlc3BvbnNlUGFnZS50cyIsIi9tZXRyaWNzL3RzL292ZXJ2aWV3UGFnZS50cyIsInRlbXBsYXRlcy5qcyJdLCJuYW1lcyI6WyJIYXdrdWxhck1ldHJpY3MiLCJIYXdrdWxhck1ldHJpY3MuQ2hhcnRUaW1lUmFuZ2UiLCJIYXdrdWxhck1ldHJpY3MuQ2hhcnRUaW1lUmFuZ2UuY29uc3RydWN0b3IiLCJIYXdrdWxhck1ldHJpY3MuQ2hhcnRUaW1lUmFuZ2UuaW5pdCIsIkhhd2t1bGFyTWV0cmljcy5DaGFydFRpbWVSYW5nZS5nZXRTdGFydERhdGUiLCJIYXdrdWxhck1ldHJpY3MuQ2hhcnRUaW1lUmFuZ2UuZ2V0RW5kRGF0ZSIsIkhhd2t1bGFyTWV0cmljcy5DaGFydFRpbWVSYW5nZS5nZXRGb3JtYXR0ZWRUaW1lUmFuZ2UiLCJIYXdrdWxhck1ldHJpY3MuQWRkVXJsQ29udHJvbGxlciIsIkhhd2t1bGFyTWV0cmljcy5BZGRVcmxDb250cm9sbGVyLmNvbnN0cnVjdG9yIiwiSGF3a3VsYXJNZXRyaWNzLkFkZFVybENvbnRyb2xsZXIuYWRkVXJsIiwiSGF3a3VsYXJNZXRyaWNzLkFkZFVybENvbnRyb2xsZXIuZ2V0UmVzb3VyY2VMaXN0IiwiSGF3a3VsYXJNZXRyaWNzLkFkZFVybENvbnRyb2xsZXIuZ2V0QXZlcmFnZSIsIkhhd2t1bGFyTWV0cmljcy5BZGRVcmxDb250cm9sbGVyLmRlbGV0ZVJlc291cmNlIiwiSGF3a3VsYXJNZXRyaWNzLk1ldHJpY3NBbGVydENvbnRyb2xsZXIiLCJIYXdrdWxhck1ldHJpY3MuTWV0cmljc0FsZXJ0Q29udHJvbGxlci5jb25zdHJ1Y3RvciIsIkhhd2t1bGFyTWV0cmljcy5RdWlja0FsZXJ0Q29udHJvbGxlciIsIkhhd2t1bGFyTWV0cmljcy5RdWlja0FsZXJ0Q29udHJvbGxlci5jb25zdHJ1Y3RvciIsIkhhd2t1bGFyTWV0cmljcy5RdWlja0FsZXJ0Q29udHJvbGxlci50b2dnbGVRdWlja0FsZXJ0IiwiSGF3a3VsYXJNZXRyaWNzLlF1aWNrQWxlcnRDb250cm9sbGVyLmFsbEFjdGlvbnMiLCJIYXdrdWxhck1ldHJpY3MuUXVpY2tBbGVydENvbnRyb2xsZXIuZXJyb3JUb2FzdHIiLCJIYXdrdWxhck1ldHJpY3MuUXVpY2tBbGVydENvbnRyb2xsZXIuZXJyb3JIYW5kbGVyIiwiSGF3a3VsYXJNZXRyaWNzLlF1aWNrQWxlcnRDb250cm9sbGVyLnNhdmVRdWlja0FsZXJ0IiwiSGF3a3VsYXJNZXRyaWNzLk1ldHJpY3NWaWV3Q29udHJvbGxlciIsIkhhd2t1bGFyTWV0cmljcy5NZXRyaWNzVmlld0NvbnRyb2xsZXIuY29uc3RydWN0b3IiLCJIYXdrdWxhck1ldHJpY3MuTWV0cmljc1ZpZXdDb250cm9sbGVyLnJlc291cmNlTGlzdCIsIkhhd2t1bGFyTWV0cmljcy5NZXRyaWNzVmlld0NvbnRyb2xsZXIub25DcmVhdGUiLCJIYXdrdWxhck1ldHJpY3MuTWV0cmljc1ZpZXdDb250cm9sbGVyLmNhbmNlbEF1dG9SZWZyZXNoIiwiSGF3a3VsYXJNZXRyaWNzLk1ldHJpY3NWaWV3Q29udHJvbGxlci5hdXRvUmVmcmVzaCIsIkhhd2t1bGFyTWV0cmljcy5NZXRyaWNzVmlld0NvbnRyb2xsZXIubm9EYXRhRm91bmRGb3JJZCIsIkhhd2t1bGFyTWV0cmljcy5NZXRyaWNzVmlld0NvbnRyb2xsZXIucmVmcmVzaENoYXJ0RGF0YU5vdyIsIkhhd2t1bGFyTWV0cmljcy5NZXRyaWNzVmlld0NvbnRyb2xsZXIucmVmcmVzaEhpc3RvcmljYWxDaGFydERhdGEiLCJIYXdrdWxhck1ldHJpY3MuTWV0cmljc1ZpZXdDb250cm9sbGVyLmdldE1ldHJpY0lkIiwiSGF3a3VsYXJNZXRyaWNzLk1ldHJpY3NWaWV3Q29udHJvbGxlci5nZXRSZXNvdXJjZUR1cmF0aW9uTWV0cmljSWQiLCJIYXdrdWxhck1ldHJpY3MuTWV0cmljc1ZpZXdDb250cm9sbGVyLnJlZnJlc2hIaXN0b3JpY2FsQ2hhcnREYXRhRm9yVGltZXN0YW1wIiwiSGF3a3VsYXJNZXRyaWNzLk1ldHJpY3NWaWV3Q29udHJvbGxlci5mb3JtYXRCdWNrZXRlZENoYXJ0T3V0cHV0Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDYkE7QUFDQTtBQ2dCQSxJQUFPLGVBQWUsQ0F1RHJCO0FBdkRELFdBQU8sZUFBZSxFQUFDLENBQUM7SUFHWEEsMEJBQVVBLEdBQUdBLGtCQUFrQkEsQ0FBQ0E7SUFFaENBLG1CQUFHQSxHQUFrQkEsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsMEJBQVVBLENBQUNBLENBQUNBO0lBRTVDQSw0QkFBWUEsR0FBR0Esc0JBQXNCQSxDQUFDQTtJQU10Q0EsOEJBQWNBLEdBQUdBLE1BQU1BLENBQUNBO0lBRXhCQSw4QkFBY0EsR0FBR0EsRUFBRUEsQ0FBQ0E7SUFDcEJBLGlDQUFpQkEsR0FBR0EsRUFBRUEsQ0FBQ0E7SUFFdkJBLGtDQUFrQkEsR0FBR0EsRUFBRUEsQ0FBQ0E7SUFFeEJBLG9DQUFtQ0EsQ0FBQ0E7SUFFL0NBLElBQWFBLGNBQWNBO1FBSXpCQyxTQUpXQSxjQUFjQSxDQUlMQSxzQkFBNkJBO1lBQTdCQywyQkFBc0JBLEdBQXRCQSxzQkFBc0JBLENBQU9BO1lBRS9DQSxJQUFJQSxDQUFDQSxJQUFJQSxFQUFFQSxDQUFDQTtRQUNkQSxDQUFDQTtRQUVERCw2QkFBSUEsR0FBSkE7WUFDRUUsSUFBSUEsQ0FBQ0EsWUFBWUEsR0FBR0EsTUFBTUEsRUFBRUEsQ0FBQ0EsT0FBT0Es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TUFBTUE7UUFDekdBLE1BQU1BLENBQUNBLFFBQVFBLEdBQUdBLFdBQVdBLENBQUNBO0lBRWhDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtBQUVOQSxDQUFDQSxFQVJNLGVBQWUsS0FBZixlQUFlLFFBUXJCOztBQ3pCRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Imhhd2t1bGFyLXVpLWNvbXBvbmVudHMtbWV0cmljcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyBDb3B5cmlnaHQgMjAxNC0yMDE1IFJlZCBIYXQsIEluYy4gYW5kL29yIGl0cyBhZmZpbGlhdGVzXG4vLy8gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycyBhcyBpbmRpY2F0ZWQgYnkgdGhlIEBhdXRob3IgdGFncy5cbi8vL1xuLy8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy8vXG4vLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vL1xuLy8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLiIsbnVsbCwiLy8vIENvcHlyaWdodCAyMDE0LTIwMTUgUmVkIEhhdCwgSW5jLiBhbmQvb3IgaXRzIGFmZmlsaWF0ZXNcbi8vLyBhbmQgb3RoZXIgY29udHJpYnV0b3JzIGFzIGluZGljYXRlZCBieSB0aGUgQGF1dGhvciB0YWdzLlxuLy8vXG4vLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vLy9cbi8vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy8vXG4vLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9pbmNsdWRlcy50c1wiLz5cblxubW9kdWxlIEhhd2t1bGFyTWV0cmljcyB7XG5cbiAgLy8vIHNvbWUgY29uZmlnIHZhcnNcbiAgZXhwb3J0IHZhciBwbHVnaW5OYW1lID0gXCJoYXdrdWxhci1tZXRyaWNzXCI7XG5cbiAgZXhwb3J0IHZhciBsb2c6TG9nZ2luZy5Mb2dnZXIgPSBMb2dnZXIuZ2V0KHBsdWdpbk5hbWUpO1xuXG4gIGV4cG9ydCB2YXIgdGVtcGxhdGVQYXRoID0gXCJwbHVnaW5zL21ldHJpY3MvaHRtbFwiO1xuXG5cbiAgLy8vIFRoZXNlIGFyZSBwbHVnaW4gZ2xvYmFscyB1c2VkIGFjcm9zcyBzZXZlcmFsIHNjcmVlbnMgKHRoaW5rIHNlc3Npb24gdmFycyBmcm9tIHNlcnZlciBzaWRlIHByb2dyYW1taW5nKVxuXG4gIC8vLyBAdG9kbzogdGhpcyB3aWxsIGdvIGF3YXkgb25jZSB3ZSBoYXZlIEtleUNsb2FrIGludGVncmF0aW9uXG4gIGV4cG9ydCB2YXIgZ2xvYmFsVGVuYW50SWQgPSBcInRlc3RcIjtcblxuICBleHBvcnQgdmFyIGdsb2JhbE1ldHJpY0lkID0gXCJcIjtcbiAgZXhwb3J0IHZhciBnbG9iYWxSZXNvdXJjZVVybCA9IFwiXCI7XG5cbiAgZXhwb3J0IHZhciBnbG9iYWxSZXNvdXJjZUxpc3QgPSBbXTtcblxuICBleHBvcnQgdmFyIGdsb2JhbENoYXJ0VGltZVJhbmdlOkNoYXJ0VGltZVJhbmdlO1xuXG4gIGV4cG9ydCBjbGFzcyBDaGFydFRpbWVSYW5nZSB7XG4gICAgc3RhcnRUaW1lc3RhbXA6bnVtYmVyO1xuICAgIGVuZFRpbWVzdGFtcDpudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGluaXRpYWxIb3Vyc0RpZmZlcmVuY2U6bnVtYmVyKSB7XG4gICAgICAvLy8ganVzdCBzZXQgYSBkZWZhdWx0IGlmIG5vIGN0b3JzIGdpdmVuXG4gICAgICB0aGlzLmluaXQoKTtcbiAgICB9XG5cbiAgICBpbml0KCkge1xuICAgICAgdGhpcy5lbmRUaW1lc3RhbXAgPSBtb21lbnQoKS52YWx1ZU9mKCk7XG4gICAgICB0aGlzLnN0YXJ0VGltZXN0YW1wID0gbW9tZW50KCkuc3VidHJhY3QoJ2hvdXInLCB0aGlzLmluaXRpYWxIb3Vyc0RpZmZlcmVuY2UpLnZhbHVlT2YoKTtcbiAgICB9XG5cbiAgICBnZXRTdGFydERhdGUoKTpEYXRlIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZSh0aGlzLnN0YXJ0VGltZXN0YW1wKTtcbiAgICB9XG5cbiAgICBnZXRFbmREYXRlKCk6RGF0ZSB7XG4gICAgICByZXR1cm4gbmV3IERhdGUodGhpcy5lbmRUaW1lc3RhbXApO1xuICAgIH1cblxuICAgIGdldEZvcm1hdHRlZFRpbWVSYW5nZSgpOnN0cmluZyB7XG4gICAgICAvLy9AdG9kbzogaWYgbGVzcyA8IDI0IGhyIHNob3cgdGltZXMgb3RoZXJ3aXNlIGRhdGVzXG4gICAgICAvLy9yZXR1cm4gbW9tZW50KHRoaXMuc3RhcnRUaW1lc3RhbXApLmZvcm1hdCgnTU1NIGRvJykgKyAnIC0gJyArIG1vbWVudCh0aGlzLmVuZFRpbWVzdGFtcCkuZm9ybWF0KCdNTU0gZG8nKVxuICAgICAgLy8vIGlmIHdpdGhpbiA3IGRheXNcbiAgICAgIC8vcmV0dXJuIG1vbWVudCh0aGlzLnN0YXJ0VGltZXN0YW1wKS5mb3JtYXQoJ2RkZCwgaEEnKSArICcgLSAnICsgbW9tZW50KHRoaXMuZW5kVGltZXN0YW1wKS5mb3JtYXQoJ2RkZCwgaEEnKTtcbiAgICAgIC8vIGlmIHdpdGhpbiAyNCBob3Vyc1xuICAgICAgcmV0dXJuIG1vbWVudCh0aGlzLnN0YXJ0VGltZXN0YW1wKS5mb3JtYXQoJ0g6bW0nKSArICcgLSAnICsgbW9tZW50KHRoaXMuZW5kVGltZXN0YW1wKS5mb3JtYXQoJ0g6bW0nKVxuICAgICAgICArICcgKCcgKyBtb21lbnQodGhpcy5lbmRUaW1lc3RhbXApLmZyb20obW9tZW50KHRoaXMuc3RhcnRUaW1lc3RhbXApLCB0cnVlKSArICcpJztcbiAgICB9XG4gIH1cblxufVxuIiwiLy8vIENvcHlyaWdodCAyMDE0LTIwMTUgUmVkIEhhdCwgSW5jLiBhbmQvb3IgaXRzIGFmZmlsaWF0ZXNcbi8vLyBhbmQgb3RoZXIgY29udHJpYnV0b3JzIGFzIGluZGljYXRlZCBieSB0aGUgQGF1dGhvciB0YWdzLlxuLy8vXG4vLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vLy9cbi8vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy8vXG4vLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9pbmNsdWRlcy50c1wiLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJtZXRyaWNzR2xvYmFscy50c1wiLz5cblxubW9kdWxlIEhhd2t1bGFyTWV0cmljcyB7XG5cbiAgZXhwb3J0IHZhciBfbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoSGF3a3VsYXJNZXRyaWNzLnBsdWdpbk5hbWUsIFsnbmdSZXNvdXJjZScsICd1aS5zZWxlY3QnLCAnaGF3a3VsYXJDaGFydHMnLFxuICAgICdoYXdrdWxhci5zZXJ2aWNlcycsICd1aS5ib290c3RyYXAnLCAndG9wYmFyJ10pO1xuXG4gIHZhciBtZXRyaWNzVGFiOmFueTtcblxuICBfbW9kdWxlLmNvbmZpZyhbJyRodHRwUHJvdmlkZXInLCAnJGxvY2F0aW9uUHJvdmlkZXInLCAnJHJvdXRlUHJvdmlkZXInLCAnSGF3dGlvTmF2QnVpbGRlclByb3ZpZGVyJywgKCRodHRwUHJvdmlkZXIsICRsb2NhdGlvblByb3ZpZGVyLCAkcm91dGVQcm92aWRlcjpuZy5yb3V0ZS5JUm91dGVQcm92aWRlciwgbmF2QnVpbGRlcjpIYXd0aW9NYWluTmF2LkJ1aWxkZXJGYWN0b3J5KSA9PiB7XG5cbiAgICBtZXRyaWNzVGFiID0gbmF2QnVpbGRlci5jcmVhdGUoKVxuICAgICAgLmlkKEhhd2t1bGFyTWV0cmljcy5wbHVnaW5OYW1lKVxuICAgICAgLnRpdGxlKCgpID0+ICdNZXRyaWNzJylcbiAgICAgIC5ocmVmKCgpID0+ICcvbWV0cmljcycpXG4gICAgICAuc3ViUGF0aCgnQWRkIFVybCcsICdhZGRVcmwnLCBuYXZCdWlsZGVyLmpvaW4oSGF3a3VsYXJNZXRyaWNzLnRlbXBsYXRlUGF0aCwgJ2FkZC11cmwuaHRtbCcpKVxuICAgICAgLnN1YlBhdGgoJ0hvbWUnLCAnaG9tZScsIG5hdkJ1aWxkZXIuam9pbihIYXdrdWxhck1ldHJpY3MudGVtcGxhdGVQYXRoLCAnaG9tZS5odG1sJykpXG4gICAgICAuc3ViUGF0aCgnUmVzcG9uc2UgVGltZScsICdyZXNwb25zZVRpbWUnLCBuYXZCdWlsZGVyLmpvaW4oSGF3a3VsYXJNZXRyaWNzLnRlbXBsYXRlUGF0aCwgJ3Jlc3BvbnNlLXRpbWUuaHRtbCcpKVxuICAgICAgLnN1YlBhdGgoJ1VwL0Rvd250aW1lJywgJ3VwRG93bnRpbWUnLCBuYXZCdWlsZGVyLmpvaW4oSGF3a3VsYXJNZXRyaWNzLnRlbXBsYXRlUGF0aCwgJ3VwLWRvd250aW1lLmh0bWwnKSlcbiAgICAgIC5zdWJQYXRoKCdBbGVydHMnLCAnYWxlcnRzJywgbmF2QnVpbGRlci5qb2luKEhhd2t1bGFyTWV0cmljcy50ZW1wbGF0ZVBhdGgsICdhbGVydHMuaHRtbCcpKVxuICAgICAgLmJ1aWxkKCk7XG5cbiAgICBuYXZCdWlsZGVyLmNvbmZpZ3VyZVJvdXRpbmcoJHJvdXRlUHJvdmlkZXIsIG1ldHJpY3NUYWIpO1xuXG4gICAgJGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKHRydWUpO1xuICB9XSk7XG5cbiAgX21vZHVsZS5ydW4oWydIYXd0aW9OYXYnLCAoSGF3dGlvTmF2Okhhd3Rpb01haW5OYXYuUmVnaXN0cnkpID0+IHtcbiAgICBIYXd0aW9OYXYuYWRkKG1ldHJpY3NUYWIpO1xuICAgIGxvZy5kZWJ1ZygnbG9hZGVkIE1ldHJpY3MgUGx1Z2luJyk7XG4gIH1dKTtcblxuICAvLy9AdG9kbzogbW92ZSB0aGlzIHNvbWVwbGFjZSBjb21tb25cbiAgX21vZHVsZS5kaXJlY3RpdmUoJ2hrRW50ZXInLCAoKSA9PiB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgIGVsZW1lbnQuYmluZCgna2V5ZG93biBrZXlwcmVzcycsIChldmVudCkgPT4ge1xuICAgICAgICBpZiAoZXZlbnQud2hpY2ggPT09IDEzKSB7XG4gICAgICAgICAgc2NvcGUuJGFwcGx5KCgpID0+IHtcbiAgICAgICAgICAgIHNjb3BlLiRldmFsKGF0dHJzLmhrRW50ZXIpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcbiAgfSk7XG5cbiAgX21vZHVsZS5jb25maWcoW1wiJHJvdXRlUHJvdmlkZXJcIiwgKCRyb3V0ZVByb3ZpZGVyKSA9PiB7XG4gICAgJHJvdXRlUHJvdmlkZXIuXG4gICAgICAgIHdoZW4oJy9tZXRyaWNzL3Jlc3BvbnNlVGltZScsIHt0ZW1wbGF0ZVVybDogJ3BsdWdpbnMvbWV0cmljcy9odG1sL3Jlc3BvbnNlLXRpbWUuaHRtbCcsXG4gICAgICAgIHJlc29sdmU6IHtcbiAgICAgICAgICBoa1Jlc291cmNlTGlzdCA6IGZ1bmN0aW9uKCRmaWx0ZXIsICRsb2NhdGlvbiwgJHEsIEhhd2t1bGFySW52ZW50b3J5KSB7XG4gICAgICAgICAgICB2YXIgcmVzUHJvbWlzZSA9IEhhd2t1bGFySW52ZW50b3J5LlJlc291cmNlLnF1ZXJ5KHt0ZW5hbnRJZDogZ2xvYmFsVGVuYW50SWR9KS4kcHJvbWlzZTtcbiAgICAgICAgICAgIHJlc1Byb21pc2UudGhlbihmdW5jdGlvbihoa1Jlc291cmNlTGlzdCl7XG4gICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvbWV0cmljcy9yZXNwb25zZVRpbWUvJyArIGhrUmVzb3VyY2VMaXN0WzBdLmlkKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICRsb2NhdGlvbi51cmwoJy9lcnJvcicpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIFJldHVybmluZyBhIHByb21pc2Ugd2hpY2ggd291bGQgbmV2ZXIgYmUgcmVzb2x2ZWQsIHNvIHRoYXQgdGhlIHBhZ2Ugd291bGQgbm90IHJlbmRlci5cbiAgICAgICAgICAgIC8vIFRoZSBwYWdlIHdpbGwgYmUgcmVkaXJlY3RlZCBiZWZvcmUgcmVuZGVyaW5nIGJhc2VkIG9uIHRoZSByZXNvdXJjZSBsaXN0IGxvYWRlZCBhYm92ZS5cbiAgICAgICAgICAgIHJldHVybiAkcS5kZWZlcigpLnByb21pc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9fSkuXG4gICAgICAgIHdoZW4oJy9tZXRyaWNzL3Jlc3BvbnNlVGltZS86cmVzb3VyY2VJZC8nLCB7dGVtcGxhdGVVcmw6ICdwbHVnaW5zL21ldHJpY3MvaHRtbC9yZXNwb25zZS10aW1lLmh0bWwnfSkuXG4gICAgICAgIHdoZW4oJy9tZXRyaWNzL3Jlc3BvbnNlVGltZS86cmVzb3VyY2VJZC86cmFuZ2VTdGFydCcsIHt0ZW1wbGF0ZVVybDogJ3BsdWdpbnMvbWV0cmljcy9odG1sL3Jlc3BvbnNlLXRpbWUuaHRtbCd9KS5cbiAgICAgICAgd2hlbignL21ldHJpY3MvcmVzcG9uc2VUaW1lLzpyZXNvdXJjZUlkLzpyYW5nZVN0YXJ0LzpyYW5nZUVuZCcsIHt0ZW1wbGF0ZVVybDogJ3BsdWdpbnMvbWV0cmljcy9odG1sL3Jlc3BvbnNlLXRpbWUuaHRtbCd9KS5cbiAgICAgICAgd2hlbignL21ldHJpY3MvYXZhaWxhYmlsaXR5LzpyZXNvdXJjZUlkJywge3RlbXBsYXRlVXJsOiAncGx1Z2lucy9tZXRyaWNzL2h0bWwvcmVzcG9uc2UtdGltZS5odG1sJ30pO1xuICB9XSk7XG5cbiAgaGF3dGlvUGx1Z2luTG9hZGVyLmFkZE1vZHVsZShIYXdrdWxhck1ldHJpY3MucGx1Z2luTmFtZSk7XG59XG4iLCIvLy8gQ29weXJpZ2h0IDIwMTQtMjAxNSBSZWQgSGF0LCBJbmMuIGFuZC9vciBpdHMgYWZmaWxpYXRlc1xuLy8vIGFuZCBvdGhlciBjb250cmlidXRvcnMgYXMgaW5kaWNhdGVkIGJ5IHRoZSBAYXV0aG9yIHRhZ3MuXG4vLy9cbi8vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vL1xuLy8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vLy9cbi8vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIm1ldHJpY3NQbHVnaW4udHNcIi8+XG5cbm1vZHVsZSBIYXdrdWxhck1ldHJpY3Mge1xuXG5cbiAgZXhwb3J0IGNsYXNzIEFkZFVybENvbnRyb2xsZXIge1xuICAgIC8vLyB0aGlzIGlzIGZvciBtaW5pZmljYXRpb24gcHVycG9zZXNcbiAgICBwdWJsaWMgc3RhdGljICRpbmplY3QgPSBbJyRsb2NhdGlvbicsICckc2NvcGUnLCAnJHJvb3RTY29wZScsICckbG9nJywgJyRmaWx0ZXInLCAnSGF3a3VsYXJJbnZlbnRvcnknLCAnSGF3a3VsYXJNZXRyaWMnLCAnSGF3a3VsYXJBbGVydCcsICdEYXRhUmVzb3VyY2UnXTtcblxuICAgIHByaXZhdGUgaHR0cFVyaVBhcnQgPSAnaHR0cDovLyc7XG5cbiAgICBwcml2YXRlIHJlc291cmNlTGlzdDtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgJGxvY2F0aW9uOm5nLklMb2NhdGlvblNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSAkc2NvcGU6YW55LFxuICAgICAgICAgICAgICAgIHByaXZhdGUgJHJvb3RTY29wZTpuZy5JUm9vdFNjb3BlU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlICRsb2c6bmcuSUxvZ1NlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSAkZmlsdGVyOm5nLklGaWx0ZXJTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgSGF3a3VsYXJJbnZlbnRvcnk6YW55LFxuICAgICAgICAgICAgICAgIHByaXZhdGUgSGF3a3VsYXJNZXRyaWM6YW55LFxuICAgICAgICAgICAgICAgIHByaXZhdGUgSGF3a3VsYXJBbGVydDphbnksXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBEYXRhUmVzb3VyY2U6YW55LFxuICAgICAgICAgICAgICAgIHB1YmxpYyByZXNvdXJjZVVybDpzdHJpbmcpIHtcbiAgICAgICRzY29wZS52bSA9IHRoaXM7XG4gICAgICB0aGlzLnJlc291cmNlVXJsID0gdGhpcy5odHRwVXJpUGFydDtcbiAgICAgIHRoaXMucmVzb3VyY2VMaXN0ID0gdGhpcy5nZXRSZXNvdXJjZUxpc3QoKTtcbiAgICB9XG5cbiAgICBhZGRVcmwodXJsOnN0cmluZyk6dm9pZCB7XG4gICAgICB2YXIgcmVzb3VyY2UgPSB7XG4gICAgICAgIHR5cGU6ICdVUkwnLFxuICAgICAgICBpZDogJycsXG4gICAgICAgIHBhcmFtZXRlcnM6IHtcbiAgICAgICAgICB1cmw6IHVybFxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB0aGlzLiRsb2cuaW5mbygnQWRkaW5nIG5ldyBSZXNvdXJjZSBVcmwgdG8gSGF3a3VsYXItaW52ZW50b3J5OiAnICsgdXJsKTtcblxuICAgICAgZ2xvYmFsQ2hhcnRUaW1lUmFuZ2UgPSBuZXcgQ2hhcnRUaW1lUmFuZ2UoMSk7XG5cbiAgICAgIC8vLyBBZGQgdGhlIFJlc291cmNlXG4gICAgICB0aGlzLkhhd2t1bGFySW52ZW50b3J5LlJlc291cmNlLnNhdmUoe3RlbmFudElkOiBnbG9iYWxUZW5hbnRJZH0sIHJlc291cmNlKS4kcHJvbWlzZVxuICAgICAgICAudGhlbigobmV3UmVzb3VyY2UpID0+IHtcbiAgICAgICAgICB0aGlzLkRhdGFSZXNvdXJjZS51cGRhdGVSZXNvdXJjZXMoKTtcbiAgICAgICAgICAvLyB3ZSBub3cgaGF2ZSBhIHJlc291cmNlSWQgZnJvbSB0aGlzIGNhbGxcbiAgICAgICAgICBnbG9iYWxNZXRyaWNJZCA9IG5ld1Jlc291cmNlLmlkO1xuICAgICAgICAgIGdsb2JhbFJlc291cmNlVXJsID0gcmVzb3VyY2UucGFyYW1ldGVycy51cmw7XG4gICAgICAgICAgY29uc29sZS5kaXIobmV3UmVzb3VyY2UpO1xuICAgICAgICAgIHRoaXMuJGxvZy5pbmZvKCdOZXcgUmVzb3VyY2UgSUQ6ICcgKyBnbG9iYWxNZXRyaWNJZCArICcgY3JlYXRlZCBmb3IgdXJsOiAnICsgZ2xvYmFsUmVzb3VyY2VVcmwpO1xuICAgICAgICAgIHZhciBtZXRyaWNzID0gW3tcbiAgICAgICAgICAgIG5hbWU6IGdsb2JhbE1ldHJpY0lkICsgJy5zdGF0dXMuZHVyYXRpb24nLFxuICAgICAgICAgICAgdW5pdDogJ01JTExJX1NFQ09ORCcsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1Jlc3BvbnNlIFRpbWUgaW4gbXMuJ1xuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIG5hbWU6IGdsb2JhbE1ldHJpY0lkICsgJy5zdGF0dXMuY29kZScsXG4gICAgICAgICAgICB1bml0OiAnTk9ORScsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1N0YXR1cyBDb2RlJ1xuICAgICAgICAgIH1dO1xuXG5cbiAgICAgICAgICAvLy8gRm9yIHJpZ2h0IG5vdyB3ZSB3aWxsIGp1c3QgUmVnaXN0ZXIgYSBjb3VwbGUgb2YgbWV0cmljcyBhdXRvbWF0aWNhbGx5XG4gICAgICAgICAgdGhpcy5IYXdrdWxhckludmVudG9yeS5NZXRyaWMuc2F2ZSh7XG4gICAgICAgICAgICB0ZW5hbnRJZDogZ2xvYmFsVGVuYW50SWQsXG4gICAgICAgICAgICByZXNvdXJjZUlkOiBuZXdSZXNvdXJjZS5pZFxuICAgICAgICAgIH0sIG1ldHJpY3MpLiRwcm9taXNlLnRoZW4oKG5ld01ldHJpY3MpID0+IHtcbiAgICAgICAgICAgICAgLy8gVE9ETzogQWRkIGF2YWlsYWJpbGl0eS4uLlxuICAgICAgICAgICAgICB0b2FzdHIuaW5mbygnWW91ciBkYXRhIGlzIGJlaW5nIGNvbGxlY3RlZC4gUGxlYXNlIGJlIHBhdGllbnQgKHNob3VsZCBiZSBhYm91dCBhbm90aGVyIG1pbnV0ZSkuJyk7XG4gICAgICAgICAgICAgIHRoaXMuJGxvY2F0aW9uLnVybCgnL21ldHJpY3MvcmVzcG9uc2VUaW1lLycgKyBuZXdSZXNvdXJjZS5pZCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZ2V0UmVzb3VyY2VMaXN0KCk6YW55IHtcbiAgICAgIHJldHVybiB0aGlzLkhhd2t1bGFySW52ZW50b3J5LlJlc291cmNlLnF1ZXJ5KHt0ZW5hbnRJZDogZ2xvYmFsVGVuYW50SWR9LCAoYVJlc291cmNlTGlzdCkgPT4ge1xuICAgICAgICB0aGlzLnJlc291cmNlTGlzdCA9IGFSZXNvdXJjZUxpc3Q7XG4gICAgICAgIGFuZ3VsYXIuZm9yRWFjaCh0aGlzLnJlc291cmNlTGlzdCwgZnVuY3Rpb24ocmVzLCBpZHgpIHtcbiAgICAgICAgICB0aGlzLkhhd2t1bGFyTWV0cmljLk51bWVyaWNNZXRyaWNEYXRhLnF1ZXJ5TWV0cmljcyh7XG4gICAgICAgICAgICB0ZW5hbnRJZDogZ2xvYmFsVGVuYW50SWQsIHJlc291cmNlSWQ6IHJlcy5pZCwgbnVtZXJpY0lkOiAocmVzLmlkICsgJy5zdGF0dXMuZHVyYXRpb24nKSxcbiAgICAgICAgICAgIHN0YXJ0OiBtb21lbnQoKS5zdWJ0cmFjdCgxLCAnaG91cicpLnZhbHVlT2YoKSwgZW5kOiBtb21lbnQoKS52YWx1ZU9mKCl9LCAocmVzb3VyY2UpID0+IHtcbiAgICAgICAgICAgIC8vIEZJWE1FOiBXb3JrIGRhdGEgc28gaXQgd29ya3MgZm9yIGNoYXJ0ID9cbiAgICAgICAgICAgIHJlc1sncmVzcG9uc2VUaW1lJ10gPSByZXNvdXJjZTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0aGlzLkhhd2t1bGFyTWV0cmljLk51bWVyaWNNZXRyaWNEYXRhLnF1ZXJ5TWV0cmljcyh7XG4gICAgICAgICAgICB0ZW5hbnRJZDogZ2xvYmFsVGVuYW50SWQsIHJlc291cmNlSWQ6IHJlcy5pZCwgbnVtZXJpY0lkOiAocmVzLmlkICsgJy5zdGF0dXMuY29kZScpLFxuICAgICAgICAgICAgc3RhcnQ6IG1vbWVudCgpLnN1YnRyYWN0KDEsICdob3VyJykudmFsdWVPZigpLCBlbmQ6IG1vbWVudCgpLnZhbHVlT2YoKX0sIChyZXNvdXJjZSkgPT4ge1xuICAgICAgICAgICAgLy8gRklYTUU6IFVzZSBhdmFpbGFiaWxpdHkgaW5zdGVhZC4uXG4gICAgICAgICAgICByZXNbJ2lzVXAnXSA9IChyZXNvdXJjZVswXS52YWx1ZSA+PSAyMDAgJiYgcmVzb3VyY2VbMF0udmFsdWUgPCAzMDApO1xuICAgICAgICAgICAgdmFyIHVwVGltZSA9IDA7XG4gICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgcmVzb3VyY2UubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgaWYocmVzb3VyY2VbaV0udmFsdWUgPj0gMjAwICYmIHJlc291cmNlW2ldLnZhbHVlIDwgMzAwKSB7XG4gICAgICAgICAgICAgICAgdXBUaW1lKys7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc1snYXZhaWxhYmlsaXR5J10gPSB1cFRpbWUvcmVzb3VyY2UubGVuZ3RoICogMTAwO1xuICAgICAgICAgICAgcmVzWydkb3duVGltZSddID0gcmVzb3VyY2UubGVuZ3RoIC0gdXBUaW1lO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRoaXMuSGF3a3VsYXJBbGVydC5BbGVydC5xdWVyeSh7IHF1ZXJ5OiByZXMuaWQsIHN0YXJ0OiBtb21lbnQoKS5zdWJ0cmFjdCgxLCAnaG91cicpLnZhbHVlT2YoKSxcbiAgICAgICAgICAgIGVuZDogbW9tZW50KCkudmFsdWVPZigpfSwgKGFsZXJ0c0xpc3QpID0+IHtcbiAgICAgICAgICAgIHJlc1snYWxlcnRzJ10gPSBbXTtcbiAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBhbGVydHNMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIGlmIChhbGVydHNMaXN0W2ldLmV2YWxTZXRzWzBdWzBdLmNvbmRpdGlvbi5kYXRhSWQuaW5kZXhPZihyZXMuaWQpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmVzWydhbGVydHMnXS5wdXNoKGFsZXJ0c0xpc3RbaV0uZXZhbFNldHNbMF1bMF0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmVzWyd1cGRhdGVUaW1lJ10gPSBuZXcgRGF0ZSgpO1xuICAgICAgICB9LCB0aGlzKTtcblxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZ2V0QXZlcmFnZShkYXRhOmFueSwgZmllbGQ6c3RyaW5nKTpudW1iZXIge1xuICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgdmFyIHN1bSA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHN1bSArPSBwYXJzZUludChkYXRhW2ldW2ZpZWxkXSwgMTApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBNYXRoLnJvdW5kKHN1bSAvIGRhdGEubGVuZ3RoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBkZWxldGVSZXNvdXJjZShyZXNvdXJjZTphbnkpOmFueSB7XG4gICAgICAvLyBUT0RPOiB1c2UgbW9kYWwgdG8gY29uZmlybSBkZWxldGUuLi5cbiAgICAgIHRoaXMuSGF3a3VsYXJJbnZlbnRvcnkuUmVzb3VyY2UuZGVsZXRlKHtcbiAgICAgICAgdGVuYW50SWQ6IGdsb2JhbFRlbmFudElkLFxuICAgICAgICByZXNvdXJjZUlkOiByZXNvdXJjZS5pZFxuICAgICAgfSkuJHByb21pc2UudGhlbigocmVzKSA9PiB7XG4gICAgICAgICAgdG9hc3RyLmluZm8oJ1RoZSBzaXRlICcgKyByZXNvdXJjZS5wYXJhbWV0ZXJzLnVybCArICcgaXMgbm8gbG9uZ2VyIGJlaW5nIG1vbml0b3JlZC4nKTtcbiAgICAgICAgICB0aGlzLnJlc291cmNlTGlzdCA9IHRoaXMuZ2V0UmVzb3VyY2VMaXN0KCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICB9XG5cbiAgX21vZHVsZS5jb250cm9sbGVyKCdIYXdrdWxhck1ldHJpY3MuQWRkVXJsQ29udHJvbGxlcicsIEFkZFVybENvbnRyb2xsZXIpO1xuXG59XG4iLCIvLy8gQ29weXJpZ2h0IDIwMTQtMjAxNSBSZWQgSGF0LCBJbmMuIGFuZC9vciBpdHMgYWZmaWxpYXRlc1xuLy8vIGFuZCBvdGhlciBjb250cmlidXRvcnMgYXMgaW5kaWNhdGVkIGJ5IHRoZSBAYXV0aG9yIHRhZ3MuXG4vLy9cbi8vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vL1xuLy8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vLy9cbi8vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIm1ldHJpY3NQbHVnaW4udHNcIi8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vaW5jbHVkZXMudHNcIi8+XG5cbm1vZHVsZSBIYXdrdWxhck1ldHJpY3Mge1xuXG4gIGV4cG9ydCBpbnRlcmZhY2UgSU1ldHJpY3NBbGVydENvbnRyb2xsZXIge1xuXG4gIH1cblxuICBleHBvcnQgY2xhc3MgTWV0cmljc0FsZXJ0Q29udHJvbGxlciBpbXBsZW1lbnRzIElNZXRyaWNzQWxlcnRDb250cm9sbGVyIHtcbiAgICBwdWJsaWMgc3RhdGljICAkaW5qZWN0ID0gWyckc2NvcGUnLCAnSGF3a3VsYXJBbGVydCcsICckbG9nJywgJyRxJ107XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlICRzY29wZTphbnksXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBIYXdrdWxhckFsZXJ0OmFueSxcbiAgICAgICAgICAgICAgICBwcml2YXRlICRsb2c6IG5nLklMb2dTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgJHE6IG5nLklRU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIGFsZXJ0TGlzdDogYW55KSB7XG5cbiAgICAgIHRoaXMuJGxvZy5kZWJ1ZygncXVlcnlpbmcgZGF0YScpO1xuICAgICAgdGhpcy5hbGVydExpc3QgPSBbXTtcblxuICAgICAgdGhpcy5IYXdrdWxhckFsZXJ0LkFsZXJ0LnF1ZXJ5KCkuJHByb21pc2UudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICB0aGlzLiRsb2cuZGVidWcoJ3F1ZXJ5aW5nIGRhdGEgZmluaXNoZWQnKTtcbiAgICAgICAgdGhpcy5hbGVydExpc3QgPSBkYXRhO1xuICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICAgIHRoaXMuJGxvZy5kZWJ1ZygncXVlcnlpbmcgZGF0YSBlcnJvcicsIGVycm9yKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIF9tb2R1bGUuY29udHJvbGxlcignTWV0cmljc0FsZXJ0Q29udHJvbGxlcicsIE1ldHJpY3NBbGVydENvbnRyb2xsZXIpO1xufVxuXG4iLCIvLy8gQ29weXJpZ2h0IDIwMTQtMjAxNSBSZWQgSGF0LCBJbmMuIGFuZC9vciBpdHMgYWZmaWxpYXRlc1xuLy8vIGFuZCBvdGhlciBjb250cmlidXRvcnMgYXMgaW5kaWNhdGVkIGJ5IHRoZSBAYXV0aG9yIHRhZ3MuXG4vLy9cbi8vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vL1xuLy8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vLy9cbi8vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIm1ldHJpY3NQbHVnaW4udHNcIi8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vaW5jbHVkZXMudHNcIi8+XG5cbm1vZHVsZSBIYXdrdWxhck1ldHJpY3Mge1xuXG4gIGV4cG9ydCBpbnRlcmZhY2UgSVF1aWNrQWxlcnRDb250cm9sbGVyIHtcbiAgICB0b2dnbGVRdWlja0FsZXJ0KCk6dm9pZFxuICAgIHNhdmVRdWlja0FsZXJ0KCk6dm9pZFxuICB9XG5cbiAgZXhwb3J0IGNsYXNzIFF1aWNrQWxlcnRDb250cm9sbGVyIGltcGxlbWVudHMgSVF1aWNrQWxlcnRDb250cm9sbGVyIHtcbiAgICBwdWJsaWMgc3RhdGljICAkaW5qZWN0ID0gWyckc2NvcGUnLCAnSGF3a3VsYXJBbGVydCcsICckbG9nJywgJyRxJ107XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlICRzY29wZTphbnksXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBIYXdrdWxhckFsZXJ0OmFueSxcbiAgICAgICAgICAgICAgICBwcml2YXRlICRsb2c6IG5nLklMb2dTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgJHE6IG5nLklRU2VydmljZSkge1xuICAgICAgdGhpcy4kc2NvcGUuc2hvd1F1aWNrQWxlcnQgPSBmYWxzZTtcbiAgICAgIHRoaXMuJHNjb3BlLnF1aWNrVHJpZ2dlciA9IHtcbiAgICAgICAgb3BlcmF0b3I6ICdMVCcsXG4gICAgICAgIHRocmVzaG9sZDogMFxuICAgICAgfTtcbiAgICAgIHRoaXMuYWxsQWN0aW9ucygpO1xuICAgIH1cblxuICAgIHRvZ2dsZVF1aWNrQWxlcnQoKTp2b2lkIHtcbiAgICAgIHRoaXMuJHNjb3BlLnNob3dRdWlja0FsZXJ0ID0gIXRoaXMuJHNjb3BlLnNob3dRdWlja0FsZXJ0O1xuICAgIH1cblxuICAgIHByaXZhdGUgUFJPTUlTRV9CUkVBSzogc3RyaW5nID0gJ21hZ2ljVmFsdWUxMjM0JztcblxuICAgIHByaXZhdGUgYWxsQWN0aW9ucygpOnZvaWQge1xuICAgICAgdGhpcy4kc2NvcGUuYWN0aW9ucyA9IFtdO1xuICAgICAgdGhpcy5IYXdrdWxhckFsZXJ0LkFjdGlvbi5xdWVyeShcbiAgICAgICAgKHJlc3VsdCkgPT4ge1xuICAgICAgICAgIHRoaXMuJHNjb3BlLmFjdGlvbnMgPSByZXN1bHQ7XG4gICAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgICAgIHRoaXMuZXJyb3JUb2FzdHIoZXJyb3IsICdFcnJvciBsb2FkaW5nIEFsZXJ0cyBOb3RpZmllcnM6Jyk7XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBlcnJvclRvYXN0cihlcnJvcjogYW55LCBlcnJvck1zZzogc3RyaW5nKTp2b2lkIHtcbiAgICAgIHZhciBlcnJvck1zZ0NvbXBsZXRlOiBzdHJpbmc7XG5cbiAgICAgIGlmIChlcnJvci5kYXRhICYmIGVycm9yLmRhdGEuZXJyb3JNc2cpIHtcbiAgICAgICAgZXJyb3JNc2dDb21wbGV0ZSA9IGVycm9yLmRhdGEuZXJyb3JNc2c7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlcnJvck1zZ0NvbXBsZXRlID0gZXJyb3JNc2cgKyAnICcgKyBlcnJvcjtcbiAgICAgIH1cblxuICAgICAgdGhpcy4kbG9nLmVycm9yKGVycm9yTXNnQ29tcGxldGUpO1xuICAgICAgdG9hc3RyLmVycm9yKGVycm9yTXNnQ29tcGxldGUpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZXJyb3JIYW5kbGVyKGVycm9yOiBhbnksIG1zZzogc3RyaW5nKSB7XG4gICAgICBpZiAoZXJyb3IgIT09IHRoaXMuUFJPTUlTRV9CUkVBSykge1xuICAgICAgICB0aGlzLmVycm9yVG9hc3RyKGVycm9yLCBtc2cpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuJHEucmVqZWN0KHRoaXMuUFJPTUlTRV9CUkVBSyk7XG4gICAgfVxuXG4gICAgc2F2ZVF1aWNrQWxlcnQoKTp2b2lkIHtcbiAgICAgIGlmIChnbG9iYWxNZXRyaWNJZCAhPT0gJy5zdGF0dXMuZHVyYXRpb24nICYmIGdsb2JhbE1ldHJpY0lkICE9PSAnLnN0YXR1cy5jb2RlJykge1xuICAgICAgICB2YXIgbmV3VHJpZ2dlcjphbnkgPSB7fTtcbiAgICAgICAgbmV3VHJpZ2dlci5uYW1lID0gZ2xvYmFsTWV0cmljSWQgKyAnUmVzcG9uc2VUaW1lJyArICctJyArIHRoaXMuJHNjb3BlLnF1aWNrVHJpZ2dlci5vcGVyYXRvciArICctJyArIHRoaXMuJHNjb3BlLnF1aWNrVHJpZ2dlci50aHJlc2hvbGQ7XG4gICAgICAgIG5ld1RyaWdnZXIuZGVzY3JpcHRpb24gPSAnQ3JlYXRlZCBvbiAnICsgbmV3IERhdGUoKTtcbiAgICAgICAgbmV3VHJpZ2dlci5maXJpbmdNYXRjaCA9ICdBTEwnO1xuICAgICAgICBuZXdUcmlnZ2VyLnNhZmV0eU1hdGNoID0gJ0FMTCc7XG4gICAgICAgIG5ld1RyaWdnZXIuZW5hYmxlZCA9IHRydWU7XG4gICAgICAgIG5ld1RyaWdnZXIuc2FmZXR5RW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICBuZXdUcmlnZ2VyLmFjdGlvbnMgPSB0aGlzLiRzY29wZS5xdWlja1RyaWdnZXIuYWN0aW9ucztcblxuICAgICAgICB2YXIgbmV3RGFtcGVuaW5nOmFueSA9IHtcbiAgICAgICAgICB0cmlnZ2VySWQ6ICcnLFxuICAgICAgICAgIHR5cGU6ICdSRUxBWEVEX0NPVU5UJyxcbiAgICAgICAgICBldmFsVHJ1ZVNldHRpbmc6IDEsXG4gICAgICAgICAgZXZhbFRvdGFsU2V0dGluZzogMSxcbiAgICAgICAgICBldmFsVGltZVNldHRpbmc6IDBcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLkhhd2t1bGFyQWxlcnQuVHJpZ2dlci5zYXZlKG5ld1RyaWdnZXIpLiRwcm9taXNlLnRoZW4oXG4gICAgICAgICAgLy8gU3VjY2VzcyBUcmlnZ2VyIHNhdmVcbiAgICAgICAgICAodHJpZ2dlcikgPT4ge1xuICAgICAgICAgICAgdGhpcy4kbG9nLmRlYnVnKCdTdWNjZXNzIFRyaWdnZXIgc2F2ZScpO1xuICAgICAgICAgICAgbmV3RGFtcGVuaW5nLnRyaWdnZXJJZCA9IHRyaWdnZXIuaWQ7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLkhhd2t1bGFyQWxlcnQuRGFtcGVuaW5nLnNhdmUoe3RyaWdnZXJJZDogbmV3RGFtcGVuaW5nLnRyaWdnZXJJZH0sXG4gICAgICAgICAgICAgIG5ld0RhbXBlbmluZykuJHByb21pc2U7XG4gICAgICAgICAgfSxcbiAgICAgICAgICAvLyBFcnJvciBUcmlnZ2VyIHNhdmVcbiAgICAgICAgICAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVycm9ySGFuZGxlcihlcnJvciwgJ0Vycm9yIHNhdmluZyBUcmlnZ2VyJyk7XG4gICAgICAgICAgfVxuICAgICAgICApLnRoZW4oXG4gICAgICAgICAgLy8gU3VjY2VzcyBEYW1wZW5pbmcgc2F2ZVxuICAgICAgICAgIChkYW1wZW5pbmcpID0+IHtcbiAgICAgICAgICAgIHRoaXMuJGxvZy5kZWJ1ZygnU3VjY2VzcyBEYW1wZW5pbmcgc2F2ZScsIGRhbXBlbmluZyk7XG4gICAgICAgICAgICB2YXIgbmV3VGhyZXNob2xkQ29uZGl0aW9uID0ge1xuICAgICAgICAgICAgICB0cmlnZ2VySWQ6IGRhbXBlbmluZy50cmlnZ2VySWQsXG4gICAgICAgICAgICAgIHR5cGU6ICdUSFJFU0hPTEQnLFxuICAgICAgICAgICAgICBkYXRhSWQ6IGdsb2JhbE1ldHJpY0lkLFxuICAgICAgICAgICAgICBvcGVyYXRvcjogdGhpcy4kc2NvcGUucXVpY2tUcmlnZ2VyLm9wZXJhdG9yLFxuICAgICAgICAgICAgICB0aHJlc2hvbGQ6IHRoaXMuJHNjb3BlLnF1aWNrVHJpZ2dlci50aHJlc2hvbGRcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLkhhd2t1bGFyQWxlcnQuQ29uZGl0aW9uLnNhdmUoe3RyaWdnZXJJZDogbmV3VGhyZXNob2xkQ29uZGl0aW9uLnRyaWdnZXJJZH0sXG4gICAgICAgICAgICAgIG5ld1RocmVzaG9sZENvbmRpdGlvbikuJHByb21pc2U7XG4gICAgICAgICAgfSxcbiAgICAgICAgICAvLyBFcnJvciBEYW1wZW5pbmcgc2F2ZVxuICAgICAgICAgIChlcnJvckRhbXBlbmluZykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3JIYW5kbGVyKGVycm9yRGFtcGVuaW5nLCAnRXJyb3Igc2F2aW5nIFRyaWdnZXInKTtcbiAgICAgICAgICB9XG4gICAgICAgICkudGhlbihcbiAgICAgICAgICAvLyBTdWNjZXNzIFRocmVzaG9sZENvbmRpdGlvbiBzYXZlXG4gICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy4kbG9nLmRlYnVnKCdTdWNjZXNzIFRocmVzaG9sZENvbmRpdGlvbiBzYXZlJyk7XG4gICAgICAgICAgICB0aGlzLiRsb2cuZGVidWcoJ0FsZXJ0IENyZWF0ZWQhJyk7XG4gICAgICAgICAgICB0b2FzdHIuc3VjY2VzcygnQWxlcnQgQ3JlYXRlZCEnKTtcblxuICAgICAgICAgICAgdGhpcy50b2dnbGVRdWlja0FsZXJ0KCk7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLkhhd2t1bGFyQWxlcnQuQWxlcnQucmVsb2FkKCkuJHByb21pc2U7XG4gICAgICAgICAgfSxcbiAgICAgICAgICAvLyBFcnJvciBUaHJlc2hvbGRDb25kaXRpb24gc2F2ZVxuICAgICAgICAgIChlcnJvckNvbmRpdGlvbikgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3JIYW5kbGVyKGVycm9yQ29uZGl0aW9uLCAnRXJyb3Igc2F2aW5nIFRyaWdnZXIgQ29uZGl0aW9uJyk7XG4gICAgICAgICAgfVxuICAgICAgICApLnRoZW4oXG4gICAgICAgICAgLy8gU3VjY2VzcyBSZWxvYWRcbiAgICAgICAgICBhbmd1bGFyLm5vb3AsXG4gICAgICAgICAgLy8gRXJyb3IgUmVsb2FkXG4gICAgICAgICAgKGVycm9yUmVsb2FkKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lcnJvckhhbmRsZXIoZXJyb3JSZWxvYWQsICdFcnJvciByZWxvYWRpbmcgQWxlcnRzJyk7XG4gICAgICAgICAgfVxuICAgICAgICApLmNhdGNoKFxuICAgICAgICAgIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgdGhpcy5lcnJvckhhbmRsZXIoZXJyb3IsICdFcnJvcjonKTtcbiAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLiRsb2cuZGVidWcoJ05vIG1ldHJpYyBzZWxlY3RlZCcpO1xuICAgICAgICB0b2FzdHIud2FybmluZygnTm8gbWV0cmljIHNlbGVjdGVkJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX21vZHVsZS5jb250cm9sbGVyKCdRdWlja0FsZXJ0Q29udHJvbGxlcicsIFF1aWNrQWxlcnRDb250cm9sbGVyKTtcbn1cblxuIiwiLy8vIENvcHlyaWdodCAyMDE0LTIwMTUgUmVkIEhhdCwgSW5jLiBhbmQvb3IgaXRzIGFmZmlsaWF0ZXNcbi8vLyBhbmQgb3RoZXIgY29udHJpYnV0b3JzIGFzIGluZGljYXRlZCBieSB0aGUgQGF1dGhvciB0YWdzLlxuLy8vXG4vLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vLy9cbi8vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy8vXG4vLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJtZXRyaWNzUGx1Z2luLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2luY2x1ZGVzLnRzXCIvPlxuXG5tb2R1bGUgSGF3a3VsYXJNZXRyaWNzIHtcblxuICBleHBvcnQgaW50ZXJmYWNlIElDb250ZXh0Q2hhcnREYXRhUG9pbnQge1xuICAgIHRpbWVzdGFtcDogbnVtYmVyO1xuICAgIHN0YXJ0PzogbnVtYmVyO1xuICAgIGVuZD86IG51bWJlcjtcbiAgICB2YWx1ZTogbnVtYmVyO1xuICAgIGF2ZzogbnVtYmVyO1xuICAgIGVtcHR5OiBib29sZWFuO1xuICB9XG5cbiAgZXhwb3J0IGludGVyZmFjZSBJQ2hhcnREYXRhUG9pbnQgZXh0ZW5kcyBJQ29udGV4dENoYXJ0RGF0YVBvaW50IHtcbiAgICBkYXRlOiBEYXRlO1xuICAgIG1pbjogbnVtYmVyO1xuICAgIG1heDogbnVtYmVyO1xuICAgIHBlcmNlbnRpbGU5NXRoOiBudW1iZXI7XG4gICAgbWVkaWFuOiBudW1iZXI7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBAbmdkb2MgY29udHJvbGxlclxuICAgKiBAbmFtZSBDaGFydENvbnRyb2xsZXJcbiAgICogQGRlc2NyaXB0aW9uIFRoaXMgY29udHJvbGxlciBpcyByZXNwb25zaWJsZSBmb3IgaGFuZGxpbmcgYWN0aXZpdHkgcmVsYXRlZCB0byB0aGUgQ2hhcnQgdGFiLlxuICAgKiBAcGFyYW0gJHNjb3BlXG4gICAqIEBwYXJhbSAkcm9vdFNjb3BlIGZvciBwdWJsaXNoaW5nICRicm9hZGNhc3QgZXZlbnRzIG9ubHlcbiAgICogQHBhcmFtICRpbnRlcnZhbFxuICAgKiBAcGFyYW0gJGxvZ1xuICAgKiBAcGFyYW0gSGF3a3VsYXJNZXRyaWNcbiAgICogQHBhcmFtIEhhd2t1bGFySW52ZW50b3J5XG4gICAqL1xuICBleHBvcnQgY2xhc3MgTWV0cmljc1ZpZXdDb250cm9sbGVyIHtcbiAgICAvLy8gZm9yIG1pbmlmaWNhdGlvbiBvbmx5XG4gICAgcHVibGljIHN0YXRpYyAgJGluamVjdCA9IFsnJHNjb3BlJywgJyRyb290U2NvcGUnLCAnJGludGVydmFsJywgJyRsb2cnLCAnSGF3a3VsYXJNZXRyaWMnLCAnSGF3a3VsYXJJbnZlbnRvcnknLCAnJHJvdXRlUGFyYW1zJ107XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlICRzY29wZTphbnksXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSAkcm9vdFNjb3BlOm5nLklSb290U2NvcGVTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgJGludGVydmFsOm5nLklJbnRlcnZhbFNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSAkbG9nOm5nLklMb2dTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgSGF3a3VsYXJNZXRyaWM6YW55LFxuICAgICAgICAgICAgICAgIHByaXZhdGUgSGF3a3VsYXJJbnZlbnRvcnk6YW55LFxuICAgICAgICAgICAgICAgIHByaXZhdGUgJHJvdXRlUGFyYW1zOmFueSxcbiAgICAgICAgICAgICAgICBwdWJsaWMgc3RhcnRUaW1lU3RhbXA6RGF0ZSxcbiAgICAgICAgICAgICAgICBwdWJsaWMgZW5kVGltZVN0YW1wOkRhdGUsXG4gICAgICAgICAgICAgICAgcHVibGljIGRhdGVSYW5nZTpzdHJpbmcpIHtcbiAgICAgICRzY29wZS52bSA9IHRoaXM7XG5cbiAgICAgIHRoaXMuc3RhcnRUaW1lU3RhbXAgPSBtb21lbnQoKS5zdWJ0cmFjdCgxLCAnaG91cnMnKS50b0RhdGUoKTtcbiAgICAgIHRoaXMuZW5kVGltZVN0YW1wID0gbmV3IERhdGUoKTtcbiAgICAgIHRoaXMuZGF0ZVJhbmdlID0gbW9tZW50KHRoaXMuc3RhcnRUaW1lU3RhbXApLmZvcm1hdCgnSDptbScpICsgJyAtICcgKyBtb21lbnQodGhpcy5lbmRUaW1lU3RhbXApLmZvcm1hdCgnSDptbScpXG4gICAgICArICcgKCcgKyBtb21lbnQodGhpcy5lbmRUaW1lU3RhbXApLmZyb20obW9tZW50KHRoaXMuc3RhcnRUaW1lU3RhbXApLCB0cnVlKSArICcpJztcblxuICAgICAgJHNjb3BlLiRvbignUmVmcmVzaENoYXJ0JywgKGV2ZW50KSA9PiB7XG4gICAgICAgIHRoaXMucmVmcmVzaENoYXJ0RGF0YU5vdyh0aGlzLmdldE1ldHJpY0lkKCkpO1xuICAgICAgfSk7XG5cbi8qXG4gICAgICAkc2NvcGUuJHdhdGNoKCd2bS5zZWxlY3RlZFJlc291cmNlJywgKHJlc291cmNlKSA9PiB7XG4gICAgICAgIGlmIChyZXNvdXJjZSkge1xuICAgICAgICAgIC8vLyBtYWRlIGEgc2VsZWN0aW9uIGZyb20gdXJsIHN3aXRjaGVyXG4gICAgICAgICAgZ2xvYmFsTWV0cmljSWQgPSByZXNvdXJjZS5pZDtcbiAgICAgICAgICB0aGlzLnJlZnJlc2hDaGFydERhdGFOb3codGhpcy5nZXRNZXRyaWNJZCgpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLy8gY2FzZSB3aGVuIGNvbWluZyBmcm9tIGFkZFVybCBzY3JlZW5cbiAgICAgICAgICBnbG9iYWxSZXNvdXJjZUxpc3QgPSB0aGlzLkhhd2t1bGFySW52ZW50b3J5LlJlc291cmNlLnF1ZXJ5KHt0ZW5hbnRJZDogZ2xvYmFsVGVuYW50SWR9KS4kcHJvbWlzZS5cbiAgICAgICAgICAgIHRoZW4oKHJlc291cmNlcyk9PiB7XG4gICAgICAgICAgICAgIHRoaXMucmVzb3VyY2VMaXN0ID0gcmVzb3VyY2VzO1xuICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkUmVzb3VyY2UgPSBfLmxhc3QocmVzb3VyY2VzKTtcbiAgICAgICAgICAgICAgdGhpcy5yZWZyZXNoQ2hhcnREYXRhTm93KHRoaXMuZ2V0TWV0cmljSWQoKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICB9KTtcbiovXG4gICAgICB0aGlzLm9uQ3JlYXRlKCRyb3V0ZVBhcmFtcy5yZXNvdXJjZUlkKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGJ1Y2tldGVkRGF0YVBvaW50czpJQ2hhcnREYXRhUG9pbnRbXSA9IFtdO1xuICAgIHByaXZhdGUgY29udGV4dERhdGFQb2ludHM6SUNoYXJ0RGF0YVBvaW50W10gPSBbXTtcbiAgICBwcml2YXRlIGNoYXJ0RGF0YTphbnk7XG4gICAgcHJpdmF0ZSBhdXRvUmVmcmVzaFByb21pc2U6bmcuSVByb21pc2U8bnVtYmVyPjtcbiAgICBwcml2YXRlIF9yZXNvdXJjZUxpc3QgPSBbXTtcbiAgICBzZWxlY3RlZFJlc291cmNlO1xuXG4gICAgbWVkaWFuID0gMDtcbiAgICBwZXJjZW50aWxlOTV0aCA9IDA7XG4gICAgYXZlcmFnZSA9IDA7XG5cblxuICAgIHB1YmxpYyBnZXQgcmVzb3VyY2VMaXN0KCk6c3RyaW5nW10ge1xuICAgICAgcmV0dXJuIHRoaXMuX3Jlc291cmNlTGlzdDtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0IHJlc291cmNlTGlzdChuZXdSZXNvdXJjZUxpc3Q6c3RyaW5nW10pIHtcbiAgICAgIGdsb2JhbFJlc291cmNlTGlzdCA9IG5ld1Jlc291cmNlTGlzdDtcbiAgICAgIHRoaXMuX3Jlc291cmNlTGlzdCA9IG5ld1Jlc291cmNlTGlzdDtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uQ3JlYXRlKGN1clJlc291cmNlSWQ6c3RyaW5nKSB7XG4gICAgICAvLy8gc2V0dXAgYXV0b3JlZnJlc2ggZm9yIGV2ZXJ5IG1pbnV0ZVxuICAgICAgdGhpcy5hdXRvUmVmcmVzaCg2MCk7XG4gICAgICB0aGlzLkhhd2t1bGFySW52ZW50b3J5LlJlc291cmNlLnF1ZXJ5KHt0ZW5hbnRJZDogZ2xvYmFsVGVuYW50SWR9LCAoYVJlc291cmNlTGlzdCkgPT4ge1xuICAgICAgICB0aGlzLnJlc291cmNlTGlzdCA9IGFSZXNvdXJjZUxpc3Q7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRSZXNvdXJjZSA9IF8ubGFzdCh0aGlzLl9yZXNvdXJjZUxpc3QpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX3Jlc291cmNlTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChhUmVzb3VyY2VMaXN0W2ldLmlkID09PSBjdXJSZXNvdXJjZUlkKSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkUmVzb3VyY2UgPSB0aGlzLl9yZXNvdXJjZUxpc3RbaV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVmcmVzaENoYXJ0RGF0YU5vdyh0aGlzLmdldE1ldHJpY0lkKCkpO1xuICAgICAgfSk7XG4gICAgfVxuXG5cbiAgICBjYW5jZWxBdXRvUmVmcmVzaCgpOnZvaWQge1xuICAgICAgdGhpcy4kaW50ZXJ2YWwuY2FuY2VsKHRoaXMuYXV0b1JlZnJlc2hQcm9taXNlKTtcbiAgICAgIHRvYXN0ci5pbmZvKCdDYW5jZWxpbmcgQXV0byBSZWZyZXNoJyk7XG4gICAgfVxuXG4gICAgYXV0b1JlZnJlc2goaW50ZXJ2YWxJblNlY29uZHM6bnVtYmVyKTp2b2lkIHtcbiAgICAgIHRoaXMucmVmcmVzaEhpc3RvcmljYWxDaGFydERhdGFGb3JUaW1lc3RhbXAodGhpcy5nZXRNZXRyaWNJZCgpKTtcbiAgICAgIHRoaXMuYXV0b1JlZnJlc2hQcm9taXNlID0gdGhpcy4kaW50ZXJ2YWwoKCkgID0+IHtcbiAgICAgICAgdGhpcy5lbmRUaW1lU3RhbXAgPSBuZXcgRGF0ZSgpO1xuICAgICAgICB0aGlzLnJlZnJlc2hIaXN0b3JpY2FsQ2hhcnREYXRhRm9yVGltZXN0YW1wKHRoaXMuZ2V0TWV0cmljSWQoKSk7XG4gICAgICB9LCBpbnRlcnZhbEluU2Vjb25kcyAqIDEwMDApO1xuXG4gICAgICB0aGlzLiRzY29wZS4kb24oJyRkZXN0cm95JywgKCkgPT4ge1xuICAgICAgICB0aGlzLiRpbnRlcnZhbC5jYW5jZWwodGhpcy5hdXRvUmVmcmVzaFByb21pc2UpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBub0RhdGFGb3VuZEZvcklkKGlkOnN0cmluZyk6dm9pZCB7XG4gICAgICB0aGlzLiRsb2cud2FybignTm8gRGF0YSBmb3VuZCBmb3IgaWQ6ICcgKyBpZCk7XG4gICAgICAvLy90b2FzdHIud2FybmluZygnTm8gRGF0YSBmb3VuZCBmb3IgaWQ6ICcgKyBpZCk7XG4gICAgfVxuXG5cbiAgICByZWZyZXNoQ2hhcnREYXRhTm93KG1ldHJpY0lkOnN0cmluZywgc3RhcnRUaW1lPzpEYXRlKTp2b2lkIHtcbiAgICAgIHZhciBhZGpTdGFydFRpbWVTdGFtcDpEYXRlID0gbW9tZW50KCkuc3VidHJhY3QoJ2hvdXJzJywgMSkudG9EYXRlKCk7IC8vZGVmYXVsdCB0aW1lIHBlcmlvZCBzZXQgdG8gMjQgaG91cnNcbiAgICAgIHRoaXMuZW5kVGltZVN0YW1wID0gbmV3IERhdGUoKTtcbiAgICAgIHRoaXMucmVmcmVzaEhpc3RvcmljYWxDaGFydERhdGEobWV0cmljSWQsIGFuZ3VsYXIuaXNVbmRlZmluZWQoc3RhcnRUaW1lKSA/IGFkalN0YXJ0VGltZVN0YW1wIDogc3RhcnRUaW1lLCB0aGlzLmVuZFRpbWVTdGFtcCk7XG4gICAgfVxuXG4gICAgcmVmcmVzaEhpc3RvcmljYWxDaGFydERhdGEobWV0cmljSWQ6c3RyaW5nLCBzdGFydERhdGU6RGF0ZSwgZW5kRGF0ZTpEYXRlKTp2b2lkIHtcbiAgICAgIHRoaXMucmVmcmVzaEhpc3RvcmljYWxDaGFydERhdGFGb3JUaW1lc3RhbXAobWV0cmljSWQsIHN0YXJ0RGF0ZS5nZXRUaW1lKCksIGVuZERhdGUuZ2V0VGltZSgpKTtcbiAgICB9XG5cbiAgICBnZXRNZXRyaWNJZCgpOnN0cmluZyB7XG4gICAgICByZXR1cm4gTWV0cmljc1ZpZXdDb250cm9sbGVyLmdldFJlc291cmNlRHVyYXRpb25NZXRyaWNJZCgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGdldFJlc291cmNlRHVyYXRpb25NZXRyaWNJZCgpIHtcbiAgICAgIHJldHVybiBnbG9iYWxNZXRyaWNJZCArICcuc3RhdHVzLmR1cmF0aW9uJztcbiAgICB9XG5cblxuICAgIHJlZnJlc2hIaXN0b3JpY2FsQ2hhcnREYXRhRm9yVGltZXN0YW1wKG1ldHJpY0lkOnN0cmluZywgc3RhcnRUaW1lPzpudW1iZXIsIGVuZFRpbWU/Om51bWJlcik6dm9pZCB7XG4gICAgICAvLyBjYWxsaW5nIHJlZnJlc2hDaGFydERhdGEgd2l0aG91dCBwYXJhbXMgdXNlIHRoZSBtb2RlbCB2YWx1ZXNcbiAgICAgIGlmICghZW5kVGltZSkge1xuICAgICAgICBlbmRUaW1lID0gdGhpcy5lbmRUaW1lU3RhbXAuZ2V0VGltZSgpO1xuICAgICAgfVxuICAgICAgaWYgKCFzdGFydFRpbWUpIHtcbiAgICAgICAgc3RhcnRUaW1lID0gdGhpcy5zdGFydFRpbWVTdGFtcC5nZXRUaW1lKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChtZXRyaWNJZCkge1xuICAgICAgICB0aGlzLkhhd2t1bGFyTWV0cmljLk51bWVyaWNNZXRyaWNEYXRhLnF1ZXJ5TWV0cmljcyh7XG4gICAgICAgICAgdGVuYW50SWQ6IGdsb2JhbFRlbmFudElkLFxuICAgICAgICAgIG51bWVyaWNJZDogbWV0cmljSWQsXG4gICAgICAgICAgc3RhcnQ6IHN0YXJ0VGltZSxcbiAgICAgICAgICBlbmQ6IGVuZFRpbWUsXG4gICAgICAgICAgYnVja2V0czogNjBcbiAgICAgICAgfSkuJHByb21pc2VcbiAgICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcblxuICAgICAgICAgICAgLy8gd2Ugd2FudCB0byBpc29sYXRlIHRoZSByZXNwb25zZSBmcm9tIHRoZSBkYXRhIHdlIGFyZSBmZWVkaW5nIHRvIHRoZSBjaGFydFxuICAgICAgICAgICAgdGhpcy5idWNrZXRlZERhdGFQb2ludHMgPSB0aGlzLmZvcm1hdEJ1Y2tldGVkQ2hhcnRPdXRwdXQocmVzcG9uc2UpO1xuICAgICAgICAgICAgY29uc29sZS5kaXIodGhpcy5idWNrZXRlZERhdGFQb2ludHMpO1xuXG4gICAgICAgICAgICB0aGlzLm1lZGlhbiA9IE1hdGgucm91bmQoXy5sYXN0KHRoaXMuYnVja2V0ZWREYXRhUG9pbnRzKS5tZWRpYW4pO1xuICAgICAgICAgICAgdGhpcy5wZXJjZW50aWxlOTV0aCA9IE1hdGgucm91bmQoXy5sYXN0KHRoaXMuYnVja2V0ZWREYXRhUG9pbnRzKS5wZXJjZW50aWxlOTV0aCk7XG4gICAgICAgICAgICB0aGlzLmF2ZXJhZ2UgPSBNYXRoLnJvdW5kKF8ubGFzdCh0aGlzLmJ1Y2tldGVkRGF0YVBvaW50cykuYXZnKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuYnVja2V0ZWREYXRhUG9pbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAvLyB0aGlzIGlzIGJhc2ljYWxseSB0aGUgRFRPIGZvciB0aGUgY2hhcnRcbiAgICAgICAgICAgICAgdGhpcy5jaGFydERhdGEgPSB7XG4gICAgICAgICAgICAgICAgaWQ6IG1ldHJpY0lkLFxuICAgICAgICAgICAgICAgIHN0YXJ0VGltZVN0YW1wOiB0aGlzLnN0YXJ0VGltZVN0YW1wLFxuICAgICAgICAgICAgICAgIGVuZFRpbWVTdGFtcDogdGhpcy5lbmRUaW1lU3RhbXAsXG4gICAgICAgICAgICAgICAgZGF0YVBvaW50czogdGhpcy5idWNrZXRlZERhdGFQb2ludHMsXG4gICAgICAgICAgICAgICAgY29udGV4dERhdGFQb2ludHM6IHRoaXMuY29udGV4dERhdGFQb2ludHMsXG4gICAgICAgICAgICAgICAgYW5ub3RhdGlvbkRhdGFQb2ludHM6IFtdXG4gICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMubm9EYXRhRm91bmRGb3JJZCh0aGlzLmdldE1ldHJpY0lkKCkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICB0aGlzLiRsb2cuZXJyb3IoJ0Vycm9yIExvYWRpbmcgQ2hhcnQgZGF0YScpO1xuICAgICAgICAgICAgdG9hc3RyLmVycm9yKCdFcnJvciBMb2FkaW5nIENoYXJ0IERhdGE6ICcgKyBlcnJvcik7XG4gICAgICAgICAgfSk7XG5cbiAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGZvcm1hdEJ1Y2tldGVkQ2hhcnRPdXRwdXQocmVzcG9uc2UpOklDaGFydERhdGFQb2ludFtdIHtcbiAgICAgIC8vICBUaGUgc2NoZW1hIGlzIGRpZmZlcmVudCBmb3IgYnVja2V0ZWQgb3V0cHV0XG4gICAgICByZXR1cm4gXy5tYXAocmVzcG9uc2UsIChwb2ludDpJQ2hhcnREYXRhUG9pbnQpID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0aW1lc3RhbXA6IHBvaW50LnN0YXJ0LFxuICAgICAgICAgIGRhdGU6IG5ldyBEYXRlKHBvaW50LnN0YXJ0KSxcbiAgICAgICAgICB2YWx1ZTogIWFuZ3VsYXIuaXNOdW1iZXIocG9pbnQudmFsdWUpID8gMCA6IHBvaW50LnZhbHVlLFxuICAgICAgICAgIGF2ZzogKHBvaW50LmVtcHR5KSA/IDAgOiBwb2ludC5hdmcsXG4gICAgICAgICAgbWluOiAhYW5ndWxhci5pc051bWJlcihwb2ludC5taW4pID8gMCA6IHBvaW50Lm1pbixcbiAgICAgICAgICBtYXg6ICFhbmd1bGFyLmlzTnVtYmVyKHBvaW50Lm1heCkgPyAwIDogcG9pbnQubWF4LFxuICAgICAgICAgIHBlcmNlbnRpbGU5NXRoOiAhYW5ndWxhci5pc051bWJlcihwb2ludC5wZXJjZW50aWxlOTV0aCkgPyAwIDogcG9pbnQucGVyY2VudGlsZTk1dGgsXG4gICAgICAgICAgbWVkaWFuOiAhYW5ndWxhci5pc051bWJlcihwb2ludC5tZWRpYW4pID8gMCA6IHBvaW50Lm1lZGlhbixcbiAgICAgICAgICBlbXB0eTogcG9pbnQuZW1wdHlcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH1cblxuICB9XG5cbiAgX21vZHVsZS5jb250cm9sbGVyKCdNZXRyaWNzVmlld0NvbnRyb2xsZXInLCBNZXRyaWNzVmlld0NvbnRyb2xsZXIpO1xuXG5cbn1cbiIsIi8vLyBDb3B5cmlnaHQgMjAxNC0yMDE1IFJlZCBIYXQsIEluYy4gYW5kL29yIGl0cyBhZmZpbGlhdGVzXG4vLy8gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycyBhcyBpbmRpY2F0ZWQgYnkgdGhlIEBhdXRob3IgdGFncy5cbi8vL1xuLy8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy8vXG4vLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vL1xuLy8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwibWV0cmljc1BsdWdpbi50c1wiLz5cblxubW9kdWxlIEhhd2t1bGFyTWV0cmljcyB7XG5cblxuICBleHBvcnQgdmFyIE92ZXJ2aWV3Q29udHJvbGxlciA9IF9tb2R1bGUuY29udHJvbGxlcihcIkhhd2t1bGFyTWV0cmljcy5PdmVydmlld0NvbnRyb2xsZXJcIiwgWyckc2NvcGUnLCAoJHNjb3BlKSA9PiB7XG4gICAgJHNjb3BlLm92ZXJ2aWV3ID0gXCJPdmVyIFZpZXdcIjtcblxuICB9XSk7XG5cbn1cbiIsImFuZ3VsYXIubW9kdWxlKFwiaGF3a3VsYXItdWktY29tcG9uZW50cy1tZXRyaWNzLXRlbXBsYXRlc1wiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7JHRlbXBsYXRlQ2FjaGUucHV0KFwicGx1Z2lucy9tZXRyaWNzL2h0bWwvYWRkLXVybC5odG1sXCIsXCI8ZGl2IG5nLWNvbnRyb2xsZXI9XFxcIkhhd2t1bGFyTWV0cmljcy5BZGRVcmxDb250cm9sbGVyIGFzIHZtXFxcIj5cXG4gIDxkaXYgY2xhc3M9XFxcImNvbnRhaW5lciB0ZXh0LWNlbnRlclxcXCI+XFxuICAgIDxoMT5XZWxjb21lIEJhY2sge3t1c2VybmFtZX19ITwvaDE+XFxuICAgIDxoMiBuZy1zaG93PVxcXCJyZXNvdXJjZXNMaXN0Lmxlbmd0aCA9PT0gMFxcXCI+Q29sbGVjdCBtZXRyaWNzIGZyb20gYSB3ZWJzaXRlIHRoYXQgeW91IHdhbnQgdG8gbW9uaXRvci48L2gyPlxcblxcbiAgICA8Zm9ybSBjbGFzcz1cXFwiZm9ybS1ob3Jpem9udGFsIGFkZC11cmxcXFwiIG5hbWU9XFxcImFkZFVybEZvcm1cXFwiIHJvbGU9XFxcImZvcm1cXFwiIG5vdmFsaWRhdGUgbmctc3VibWl0PVxcXCJ2bS5hZGRVcmwodm0ucmVzb3VyY2VVcmwpXFxcIj5cXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwIGlucHV0XFxcIj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbC1sZy01IGNvbC1zbS02IGFsaWduLWNlbnRlclxcXCI+XFxuICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImlucHV0LWdyb3VwXFxcIiBuZy1jbGFzcz1cXFwie1xcJ2lucHV0LWdyb3VwLWxnXFwnOiByZXNvdXJjZXNMaXN0Lmxlbmd0aCA9PT0gMH1cXFwiPlxcbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJ1cmxcXFwiIGNsYXNzPVxcXCJmb3JtLWNvbnRyb2xcXFwiIG5hbWU9XFxcInJlc291cmNlVXJsXFxcIiBuZy1tb2RlbD1cXFwidm0ucmVzb3VyY2VVcmxcXFwiXFxuICAgICAgICAgICAgICAgICAgIG5nLW1vZGVsLW9wdGlvbnM9XFxcInsgdXBkYXRlT246IFxcJ2RlZmF1bHQgYmx1clxcJ31cXFwiXFxuICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVxcXCJFbnRlciBhIHdlYnNpdGUgVVJMIChlLmcuLCBodHRwOi8vbXlzaXRlLmNvbS9ob21lKVxcXCIgcmVxdWlyZWQ+XFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImhlbHAtYmxvY2tcXFwiXFxuICAgICAgICAgICAgICAgICAgbmctc2hvdz1cXFwiYWRkVXJsRm9ybS5yZXNvdXJjZVVybC4kZGlydHkgJiYgYWRkVXJsRm9ybS5yZXNvdXJjZVVybC4kaW52YWxpZFxcXCI+VGhlIFVSTCB5b3UgZW50ZXJlZCBpcyBub3QgdmFsaWQuIFBsZWFzZSBlbnRlciBhIHZhbGlkIFVSTC48L3NwYW4+XFxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiaW5wdXQtZ3JvdXAtYnRuXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cXFwiYnRuIGJ0bi1wcmltYXJ5XFxcIiBuZy1jbGFzcz1cXFwie1xcJ2J0bi1sZ1xcJzogcmVzb3VyY2VzTGlzdC5sZW5ndGggPT09IDB9XFxcIiB0eXBlPVxcXCJzdWJtaXRcXFwiIG5nLWRpc2FibGVkPVxcXCJhZGRVcmxGb3JtLiRpbnZhbGlkXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgQWRkIFVSTFxcbiAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cXG4gICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICA8L2Rpdj5cXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwIGxvYWRpbmcgaGlkZVxcXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzcGlubmVyIHNwaW5uZXItbGdcXFwiPjwvZGl2PlxcbiAgICAgICAgPGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gYnRuLWxpbmtcXFwiPkNhbmNlbDwvYnV0dG9uPlxcbiAgICAgIDwvZGl2PlxcbiAgICA8L2Zvcm0+XFxuXFxuICAgIDxkaXYgY2xhc3M9XFxcInJvdyB1cmxzLWxpc3QtbGFiZWxzXFxcIj5cXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtNCB0ZXh0LWxlZnRcXFwiPlxcbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cXFwiYnRuIGJ0bi1saW5rXFxcIiBkYXRhLXRvZ2dsZT1cXFwidG9vbHRpcFxcXCIgZGF0YS1wbGFjZW1lbnQ9XFxcInRvcFxcXCIgdGl0bGU9XFxcIlxcXCIgZGF0YS1vcmlnaW5hbC10aXRsZT1cXFwiU29ydFxcXCI+XFxuICAgICAgICAgIFVSTCA8YiBjbGFzcz1cXFwiY2FyZXRcXFwiPjwvYj5cXG4gICAgICAgIDwvYnV0dG9uPlxcbiAgICAgIDwvZGl2PlxcbiAgICAgIDxkaXYgY2xhc3M9XFxcImNvbC1tZC00XFxcIj5cXG4gICAgICAgIEN1cnJlbnQgUmVzcG9uc2UgVGltZVxcbiAgICAgIDwvZGl2PlxcbiAgICAgIDxkaXYgY2xhc3M9XFxcImNvbC1tZC00XFxcIj5cXG4gICAgICAgIEN1cnJlbnQgQXZhaWxhYmlsaXR5XFxuICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcblxcbiAgICA8ZGl2IGNsYXNzPVxcXCJwYW5lbCBwYW5lbC1kZWZhdWx0IHN1bW1hcnkgdXJsLWluZm9cXFwiIG5nLXJlcGVhdD1cXFwicmVzIGluIHZtLnJlc291cmNlTGlzdFxcXCI+XFxuICAgICAgPGRpdiBjbGFzcz1cXFwicm93IHJvdy10YWJsZVxcXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtNCBzdW1tYXJ5LWl0ZW1cXFwiPlxcbiAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwidXJsLWxpbmtcXFwiPjxhIGhyZWY9XFxcIi9tZXRyaWNzL3Jlc3BvbnNlVGltZS97e3Jlcy5pZH19XFxcIj57e3Jlcy5wYXJhbWV0ZXJzLnVybH19PC9hPjwvc3Bhbj5cXG4gICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cXFwiYnRuIGJ0bi1saW5rIHRyaWdnZXJcXFwiIHRvb2x0aXA9XFxcIkV4cGFuZC9jb2xsYXBzZVxcXCIgbmctY2xpY2s9XFxcInJlcy5leHBhbmRlZCA9ICFyZXMuZXhwYW5kZWRcXFwiPjxpIGNsYXNzPVxcXCJmYVxcXCIgbmctY2xhc3M9XFxcInJlcy5leHBhbmRlZCA/IFxcJ2ZhLW1pbnVzLXNxdWFyZS1vXFwnIDogXFwnZmEtcGx1cy1zcXVhcmUtb1xcJ1xcXCI+PC9pPkxhc3QgMjQgaG91cnM8L2J1dHRvbj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTQgc3VtbWFyeS1pdGVtXFxcIj5cXG4gICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImRhdGFcXFwiPnt7cmVzLnJlc3BvbnNlVGltZVswXS52YWx1ZX19IDxzcGFuPm1zPC9zcGFuPjwvc3Bhbj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTQgc3VtbWFyeS1pdGVtXFxcIj5cXG4gICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImRhdGFcXFwiPjxpIGNsYXNzPVxcXCJmYSBcXFwiIG5nLWNsYXNzPVxcXCJyZXMuaXNVcCA/IFxcJ2ZhLWFycm93LXVwXFwnIDogXFwnZmEtYXJyb3ctZG93blxcJ1xcXCI+PC9pPnt7cmVzLmlzVXAgPyBcXCdVcFxcJyA6IFxcJ0Rvd25cXCd9fTwvc3Bhbj5cXG4gICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInVwZGF0ZVxcXCIgdG9vbHRpcD1cXFwiTGFzdCB1cGRhdGVcXFwiPjxpIGNsYXNzPVxcXCJmYSBmYS1jbG9jay1vXFxcIj48L2k+e3tyZXMudXBkYXRlVGltZXwgZGF0ZTpcXFwiSEg6bW1cXFwiIH19PC9zcGFuPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgPC9kaXY+XFxuICAgICAgPGhyIG5nLXNob3c9XFxcInJlcy5leHBhbmRlZFxcXCI+XFxuICAgICAgPGRpdiBjbGFzcz1cXFwicm93IHJvdy10YWJsZSBwYW5lbC1leHBhbmRlZC1jb250ZW50XFxcIiBuZy1zaG93PVxcXCJyZXMuZXhwYW5kZWRcXFwiPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTQgc3VtbWFyeS1pdGVtIHRleHQtbGVmdFxcXCI+XFxuICAgICAgICAgIDx1bCBjbGFzcz1cXFwibGlzdC11bnN0eWxlZCBhbGVydC1zdGF0dXNcXFwiIG5nLWhpZGU9XFxcInJlcy5hbGVydHMubGVuZ3RoID09PSAwXFxcIj5cXG4gICAgICAgICAgICA8bGkgbmctcmVwZWF0PVxcXCJhbGVydCBpbiByZXMuYWxlcnRzfGxpbWl0VG86M1xcXCI+XFxuICAgICAgICAgICAgICA8aSBjbGFzcz1cXFwiZmEgZmEtZmxhZ1xcXCI+PC9pPnt7YWxlcnQuZGF0YVRpbWVzdGFtcHxkYXRlOlxcJ3l5eXktTU0tZGQgSEg6bW1cXCd9fTogPHN0cm9uZz57e2FsZXJ0LmNvbmRpdGlvbi50eXBlfX06IHt7YWxlcnQudmFsdWV9fTwvc3Ryb25nPlxcbiAgICAgICAgICAgIDwvbGk+XFxuICAgICAgICAgIDwvdWw+XFxuICAgICAgICAgIDxhIGhyZWY9XFxcIi9tZXRyaWNzL2FsZXJ0cy97e3Jlcy5pZH19XFxcIj5WaWV3IEFsbCBBbGVydHMgKHt7cmVzLmFsZXJ0cy5sZW5ndGh9fSk8L2E+XFxuICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImRhdGFcXFwiIG5nLXNob3c9XFxcInJlcy5hbGVydHMubGVuZ3RoID09PSAwXFxcIj48aSBjbGFzcz1cXFwiZmEgZmEtdGh1bWJzLW8tdXBcXFwiPjwvaT5ObyBBbGVydHM8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTQgc3VtbWFyeS1pdGVtXFxcIj5cXG4gICAgICAgICAgPGRpdiBpZD1cXFwibWV0cmljcy1jaGFydFxcXCIgY2xhc3M9XFxcInRvcC1hcmVhXFxcIiBzdHlsZT1cXFwiaGVpZ2h0OiA0NHB4OyB3aWR0aDogMjM3cHg7XFxcIj5cXG4gICAgICAgICAgICA8aGF3a3VsYXItY2hhcnQgZGF0YT1cXFwie3tyZXMucmVzcG9uc2VUaW1lfX1cXFwiIGNoYXJ0LXR5cGU9XFxcImxpbmVcXFwiIGNoYXJ0LWhlaWdodD1cXFwiNDRcXFwiIGNoYXJ0LXdpZHRoPVxcXCIyMzdcXFwiPjwvaGF3a3VsYXItY2hhcnQ+XFxuICAgICAgICAgICAgPCEtLTxpbWcgc3JjPVxcXCJpbWcvb3ZlcnZpZXctZ3JhcGgucG5nXFxcIiBhbHQ9XFxcIm92ZXJ2aWV3LWdyYXBoXFxcIiB3aWR0aD1cXFwiMjM3XFxcIiBoZWlnaHQ9XFxcIjQ0XFxcIj4tLT5cXG4gICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImJvdHRvbS1hcmVhXFxcIj5cXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiZGF0YVxcXCI+e3t2bS5nZXRBdmVyYWdlKHJlcy5yZXNwb25zZVRpbWUsIFxcJ3ZhbHVlXFwnKX19IDxzcGFuPm1zPC9zcGFuPjwvc3Bhbj5cXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiaXRlbVxcXCI+QXZlcmFnZSBSZXNwb25zZSBUaW1lPC9zcGFuPlxcbiAgICAgICAgICA8L2Rpdj5cXG5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTQgc3VtbWFyeS1pdGVtXFxcIj5cXG4gICAgICAgICAgPGRpdiBjbGFzcz1cXFwidG9wLWFyZWFcXFwiPlxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJkYXRhXFxcIiBuZy1zaG93PVxcXCJyZXMuYXZhaWxhYmlsaXR5ID09PSAxMDBcXFwiPjxpIGNsYXNzPVxcXCJmYSBmYS1jaGVja1xcXCI+PC9pPk5vIERvd250aW1lPC9zcGFuPlxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJkYXRhXFxcIiBuZy1oaWRlPVxcXCJyZXMuYXZhaWxhYmlsaXR5ID09PSAxMDBcXFwiPjxpIGNsYXNzPVxcXCJmYSBmYS1hcnJvdy1kb3duXFxcIj48L2k+RG93biB7e3Jlcy5kb3duVGltZX19IG1pbjwvc3Bhbj5cXG4gICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImJvdHRvbS1hcmVhXFxcIj5cXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiZGF0YVxcXCIgbmctaGlkZT1cXFwicmVzLmF2YWlsYWJpbGl0eSA9PT0gMTAwXFxcIj57e3Jlcy5hdmFpbGFiaWxpdHkgfCBudW1iZXI6M319IDxzcGFuPiU8L3NwYW4+PC9zcGFuPlxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJkYXRhXFxcIiBuZy1zaG93PVxcXCJyZXMuYXZhaWxhYmlsaXR5ID09PSAxMDBcXFwiPnt7cmVzLmF2YWlsYWJpbGl0eX19IDxzcGFuPiU8L3NwYW4+PC9zcGFuPlxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJpdGVtXFxcIj5BdmFpbGFiaWxpdHk8L3NwYW4+XFxuICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLWxpbmsgZGVsZXRlXFxcIiB0b29sdGlwPVxcXCJEZWxldGVcXFwiIG5nLWNsaWNrPVxcXCJ2bS5kZWxldGVSZXNvdXJjZShyZXMpXFxcIj48aSBjbGFzcz1cXFwiZmEgZmEtdHJhc2gtb1xcXCI+PC9pPjwvYnV0dG9uPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcblxcbiAgPC9kaXY+XFxuPC9kaXY+XFxuXCIpO1xuJHRlbXBsYXRlQ2FjaGUucHV0KFwicGx1Z2lucy9tZXRyaWNzL2h0bWwvYWxlcnRzLXNldHVwLmh0bWxcIixcIjxkaXYgY2xhc3M9XFxcImFsZXJ0LXNldHRpbmdzXFxcIj5cXG4gIDxmb3JtIGNsYXNzPVxcXCJmb3JtLWhvcml6b250YWxcXFwiPlxcbiAgICA8ZmllbGRzZXQ+XFxuICAgICAgPGxlZ2VuZD5QcmVmZXJlbmNlczwvbGVnZW5kPlxcbiAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcbiAgICAgICAgPGxhYmVsIGNsYXNzPVxcXCJjb2wtbWQtMiBjb250cm9sLWxhYmVsXFxcIiBmb3I9XFxcImVtYWlsXFxcIj5FbWFpbDwvbGFiZWw+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtNlxcXCI+XFxuICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJ0ZXh0XFxcIiBpZD1cXFwiZW1haWxcXFwiIGNsYXNzPVxcXCJmb3JtLWNvbnRyb2xcXFwiPlxcbiAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiaGVscC1ibG9ja1xcXCI+U2VuZCBhbGVydHMgdG8gdGhpcyBlbWFpbCBhZGRyZXNzLjwvc3Bhbj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgIDwvZGl2PlxcbiAgICA8L2ZpZWxkc2V0PlxcbiAgICA8ZmllbGRzZXQ+XFxuICAgICAgPGxlZ2VuZD5SZXNwb25zZSBUaW1lPC9sZWdlbmQ+XFxuICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuICAgICAgICA8bGFiZWwgY2xhc3M9XFxcImNvbC1tZC0yIGNvbnRyb2wtbGFiZWxcXFwiIGZvcj1cXFwiZW1haWxcXFwiPlN0YXR1czwvbGFiZWw+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtNlxcXCI+XFxuICAgICAgICAgIDxkaXYgY2xhc3M9XFxcIm9ub2Zmc3dpdGNoXFxcIj5cXG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwiY2hlY2tib3hcXFwiIGlkPVxcXCJydFxcXCIgY2xhc3M9XFxcIm9ub2Zmc3dpdGNoLWNoZWNrYm94XFxcIj5cXG4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9XFxcIm9ub2Zmc3dpdGNoLWxhYmVsXFxcIiBmb3I9XFxcInJ0XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwib25vZmZzd2l0Y2gtaW5uZXJcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcIm9ub2Zmc3dpdGNoLWFjdGl2ZSBuZy1iaW5kaW5nXFxcIj5PTjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJvbm9mZnN3aXRjaC1pbmFjdGl2ZSBuZy1iaW5kaW5nXFxcIj5PRkY8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcIm9ub2Zmc3dpdGNoLXN3aXRjaFxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgIDwvbGFiZWw+XFxuICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgPC9kaXY+XFxuICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuICAgICAgICA8bGFiZWwgY2xhc3M9XFxcImNvbC1tZC0yIGNvbnRyb2wtbGFiZWxcXFwiIGZvcj1cXFwiZW1haWxcXFwiPlRocmVzaG9sZCBhbmQgZHVyYXRpb248L2xhYmVsPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTYgaW5saW5lLXJvd1xcXCI+XFxuICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImlucHV0LWdyb3VwIHRpbWVcXFwiPlxcbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJ0ZXh0XFxcIiBjbGFzcz1cXFwiZm9ybS1jb250cm9sXFxcIiBwbGFjZWhvbGRlcj1cXFwiVGhyZXNob2xkXFxcIj5cXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiaW5wdXQtZ3JvdXAtYWRkb25cXFwiPm1zPC9zcGFuPlxcbiAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImJldHdlZW4taW5wdXRzXFxcIj5mb3I8L3NwYW4+XFxuICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImlucHV0LWdyb3VwIGR1cmF0aW9uXFxcIj5cXG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwidGV4dFxcXCIgY2xhc3M9XFxcImZvcm0tY29udHJvbFxcXCIgcGxhY2Vob2xkZXI9XFxcIkR1cmF0aW9uXFxcIj5cXG4gICAgICAgICAgICA8c2VsZWN0IGNsYXNzPVxcXCJzZWxlY3RwaWNrZXJcXFwiIHN0eWxlPVxcXCJkaXNwbGF5OiBub25lO1xcXCI+XFxuICAgICAgICAgICAgICA8b3B0aW9uPm1pbGlzZWNvbmRzPC9vcHRpb24+XFxuICAgICAgICAgICAgICA8b3B0aW9uPnNlY29uZHM8L29wdGlvbj5cXG4gICAgICAgICAgICAgIDxvcHRpb24+bWludXRlczwvb3B0aW9uPlxcbiAgICAgICAgICAgICAgPG9wdGlvbj5ob3Vyczwvb3B0aW9uPlxcbiAgICAgICAgICAgIDwvc2VsZWN0PjxkaXYgY2xhc3M9XFxcImJ0bi1ncm91cCBib290c3RyYXAtc2VsZWN0IGlucHV0LWdyb3VwLWJ0blxcXCI+PGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gZHJvcGRvd24tdG9nZ2xlIHNlbGVjdHBpY2tlciBidG4tZGVmYXVsdFxcXCIgZGF0YS10b2dnbGU9XFxcImRyb3Bkb3duXFxcIiB0aXRsZT1cXFwibWlsaXNlY29uZHNcXFwiPjxzcGFuIGNsYXNzPVxcXCJmaWx0ZXItb3B0aW9uIHB1bGwtbGVmdFxcXCI+bWlsaXNlY29uZHM8L3NwYW4+Jm5ic3A7PHNwYW4gY2xhc3M9XFxcImNhcmV0XFxcIj48L3NwYW4+PC9idXR0b24+PGRpdiBjbGFzcz1cXFwiZHJvcGRvd24tbWVudSBvcGVuXFxcIj48dWwgY2xhc3M9XFxcImRyb3Bkb3duLW1lbnUgaW5uZXIgc2VsZWN0cGlja2VyXFxcIiByb2xlPVxcXCJtZW51XFxcIj48bGkgcmVsPVxcXCIwXFxcIiBjbGFzcz1cXFwic2VsZWN0ZWRcXFwiPjxhIHRhYmluZGV4PVxcXCIwXFxcIiBjbGFzcz1cXFwiXFxcIiBzdHlsZT1cXFwiXFxcIj48c3BhbiBjbGFzcz1cXFwidGV4dFxcXCI+bWlsaXNlY29uZHM8L3NwYW4+PGkgY2xhc3M9XFxcImdseXBoaWNvbiBnbHlwaGljb24tb2sgaWNvbi1vayBjaGVjay1tYXJrXFxcIj48L2k+PC9hPjwvbGk+PGxpIHJlbD1cXFwiMVxcXCI+PGEgdGFiaW5kZXg9XFxcIjBcXFwiIGNsYXNzPVxcXCJcXFwiIHN0eWxlPVxcXCJcXFwiPjxzcGFuIGNsYXNzPVxcXCJ0ZXh0XFxcIj5zZWNvbmRzPC9zcGFuPjxpIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLW9rIGljb24tb2sgY2hlY2stbWFya1xcXCI+PC9pPjwvYT48L2xpPjxsaSByZWw9XFxcIjJcXFwiPjxhIHRhYmluZGV4PVxcXCIwXFxcIiBjbGFzcz1cXFwiXFxcIiBzdHlsZT1cXFwiXFxcIj48c3BhbiBjbGFzcz1cXFwidGV4dFxcXCI+bWludXRlczwvc3Bhbj48aSBjbGFzcz1cXFwiZ2x5cGhpY29uIGdseXBoaWNvbi1vayBpY29uLW9rIGNoZWNrLW1hcmtcXFwiPjwvaT48L2E+PC9saT48bGkgcmVsPVxcXCIzXFxcIj48YSB0YWJpbmRleD1cXFwiMFxcXCIgY2xhc3M9XFxcIlxcXCIgc3R5bGU9XFxcIlxcXCI+PHNwYW4gY2xhc3M9XFxcInRleHRcXFwiPmhvdXJzPC9zcGFuPjxpIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLW9rIGljb24tb2sgY2hlY2stbWFya1xcXCI+PC9pPjwvYT48L2xpPjwvdWw+PC9kaXY+PC9kaXY+XFxuICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiaGVscC1ibG9ja1xcXCI+U2VuZCBhbGVydHMgd2hlbiB0aGUgcmVzcG9uc2UgdGltZSBpcyBvdmVyIDIwMDAgbXMgZm9yIG1vcmUgdGhhbiAzIG1pbnV0ZXMuPC9zcGFuPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgPC9kaXY+XFxuICAgIDwvZmllbGRzZXQ+XFxuICAgIDxmaWVsZHNldD5cXG4gICAgICA8bGVnZW5kPkRvd250aW1lPC9sZWdlbmQ+XFxuICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuICAgICAgICA8bGFiZWwgY2xhc3M9XFxcImNvbC1tZC0yIGNvbnRyb2wtbGFiZWxcXFwiIGZvcj1cXFwiZW1haWxcXFwiPlN0YXR1czwvbGFiZWw+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtNlxcXCI+XFxuICAgICAgICAgIDxkaXYgY2xhc3M9XFxcIm9ub2Zmc3dpdGNoXFxcIj5cXG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwiY2hlY2tib3hcXFwiIGlkPVxcXCJydFxcXCIgbmFtZT1cXFwiYWNjZXNzXFxcIiBjbGFzcz1cXFwib25vZmZzd2l0Y2gtY2hlY2tib3hcXFwiPlxcbiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cXFwib25vZmZzd2l0Y2gtbGFiZWxcXFwiIGZvcj1cXFwicnRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJvbm9mZnN3aXRjaC1pbm5lclxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwib25vZmZzd2l0Y2gtYWN0aXZlIG5nLWJpbmRpbmdcXFwiPk9OPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcIm9ub2Zmc3dpdGNoLWluYWN0aXZlIG5nLWJpbmRpbmdcXFwiPk9GRjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwib25vZmZzd2l0Y2gtc3dpdGNoXFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgPC9sYWJlbD5cXG4gICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICA8L2Rpdj5cXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG4gICAgICAgIDxsYWJlbCBjbGFzcz1cXFwiY29sLW1kLTIgY29udHJvbC1sYWJlbFxcXCIgZm9yPVxcXCJlbWFpbFxcXCI+RHVyYXRpb248L2xhYmVsPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTYgaW5saW5lLXJvd1xcXCI+XFxuICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImlucHV0LWdyb3VwIGR1cmF0aW9uXFxcIj5cXG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwidGV4dFxcXCIgY2xhc3M9XFxcImZvcm0tY29udHJvbFxcXCIgcGxhY2Vob2xkZXI9XFxcIkR1cmF0aW9uXFxcIj5cXG4gICAgICAgICAgICA8c2VsZWN0IGNsYXNzPVxcXCJzZWxlY3RwaWNrZXJcXFwiIHN0eWxlPVxcXCJkaXNwbGF5OiBub25lO1xcXCI+XFxuICAgICAgICAgICAgICA8b3B0aW9uPm1pbGlzZWNvbmRzPC9vcHRpb24+XFxuICAgICAgICAgICAgICA8b3B0aW9uPnNlY29uZHM8L29wdGlvbj5cXG4gICAgICAgICAgICAgIDxvcHRpb24+bWludXRlczwvb3B0aW9uPlxcbiAgICAgICAgICAgICAgPG9wdGlvbj5ob3Vyczwvb3B0aW9uPlxcbiAgICAgICAgICAgIDwvc2VsZWN0PjxkaXYgY2xhc3M9XFxcImJ0bi1ncm91cCBib290c3RyYXAtc2VsZWN0IGlucHV0LWdyb3VwLWJ0blxcXCI+PGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gZHJvcGRvd24tdG9nZ2xlIHNlbGVjdHBpY2tlciBidG4tZGVmYXVsdFxcXCIgZGF0YS10b2dnbGU9XFxcImRyb3Bkb3duXFxcIiB0aXRsZT1cXFwibWlsaXNlY29uZHNcXFwiPjxzcGFuIGNsYXNzPVxcXCJmaWx0ZXItb3B0aW9uIHB1bGwtbGVmdFxcXCI+bWlsaXNlY29uZHM8L3NwYW4+Jm5ic3A7PHNwYW4gY2xhc3M9XFxcImNhcmV0XFxcIj48L3NwYW4+PC9idXR0b24+PGRpdiBjbGFzcz1cXFwiZHJvcGRvd24tbWVudSBvcGVuXFxcIj48dWwgY2xhc3M9XFxcImRyb3Bkb3duLW1lbnUgaW5uZXIgc2VsZWN0cGlja2VyXFxcIiByb2xlPVxcXCJtZW51XFxcIj48bGkgcmVsPVxcXCIwXFxcIiBjbGFzcz1cXFwic2VsZWN0ZWRcXFwiPjxhIHRhYmluZGV4PVxcXCIwXFxcIiBjbGFzcz1cXFwiXFxcIiBzdHlsZT1cXFwiXFxcIj48c3BhbiBjbGFzcz1cXFwidGV4dFxcXCI+bWlsaXNlY29uZHM8L3NwYW4+PGkgY2xhc3M9XFxcImdseXBoaWNvbiBnbHlwaGljb24tb2sgaWNvbi1vayBjaGVjay1tYXJrXFxcIj48L2k+PC9hPjwvbGk+PGxpIHJlbD1cXFwiMVxcXCI+PGEgdGFiaW5kZXg9XFxcIjBcXFwiIGNsYXNzPVxcXCJcXFwiIHN0eWxlPVxcXCJcXFwiPjxzcGFuIGNsYXNzPVxcXCJ0ZXh0XFxcIj5zZWNvbmRzPC9zcGFuPjxpIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLW9rIGljb24tb2sgY2hlY2stbWFya1xcXCI+PC9pPjwvYT48L2xpPjxsaSByZWw9XFxcIjJcXFwiPjxhIHRhYmluZGV4PVxcXCIwXFxcIiBjbGFzcz1cXFwiXFxcIiBzdHlsZT1cXFwiXFxcIj48c3BhbiBjbGFzcz1cXFwidGV4dFxcXCI+bWludXRlczwvc3Bhbj48aSBjbGFzcz1cXFwiZ2x5cGhpY29uIGdseXBoaWNvbi1vayBpY29uLW9rIGNoZWNrLW1hcmtcXFwiPjwvaT48L2E+PC9saT48bGkgcmVsPVxcXCIzXFxcIj48YSB0YWJpbmRleD1cXFwiMFxcXCIgY2xhc3M9XFxcIlxcXCIgc3R5bGU9XFxcIlxcXCI+PHNwYW4gY2xhc3M9XFxcInRleHRcXFwiPmhvdXJzPC9zcGFuPjxpIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLW9rIGljb24tb2sgY2hlY2stbWFya1xcXCI+PC9pPjwvYT48L2xpPjwvdWw+PC9kaXY+PC9kaXY+XFxuICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiaGVscC1ibG9ja1xcXCI+U2VuZCBhbGVydHMgd2hlbiB0aGUgZG93bnRpbWUgbGFzdHMgbW9yZSB0aGFuIDIgbWludXRlcy48L3NwYW4+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICA8L2Rpdj5cXG4gICAgPC9maWVsZHNldD5cXG4gICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuICAgICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTEwIGNvbC1tZC1vZmZzZXQtMlxcXCI+XFxuICAgICAgICA8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBidG4tcHJpbWFyeVxcXCI+U2F2ZTwvYnV0dG9uPlxcbiAgICAgICAgPGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHRcXFwiPkNhbmNlbDwvYnV0dG9uPlxcbiAgICAgIDwvZGl2PlxcbiAgICA8L2Rpdj5cXG4gIDwvZm9ybT5cXG5cXG48L2Rpdj5cXG5cIik7XG4kdGVtcGxhdGVDYWNoZS5wdXQoXCJwbHVnaW5zL21ldHJpY3MvaHRtbC9hbGVydHMtdmlldy5odG1sXCIsXCI8cCBjbGFzcz1cXFwiaW5mby10b3BcXFwiPjxzdHJvbmc+e3ttYWMuYWxlcnRMaXN0Lmxlbmd0aH19IGFsZXJ0czwvc3Ryb25nPiBsYXN0IHdlZWsuPC9wPlxcblxcbjxkaXYgY2xhc3M9XFxcImFsZXJ0cy1hY3Rpdml0eVxcXCI+XFxuICA8ZGl2IG5nLXJlcGVhdD1cXFwiYWxlcnQgaW4gbWFjLmFsZXJ0TGlzdFxcXCI+XFxuICAgIDxkaXYgY2xhc3M9XFxcInBhbmVsIHBhbmVsLWRlZmF1bHQgYWxlcnQgYWxlcnQtZGFuZ2VyXFxcIj5cXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJhbGVydC1pY29uXFxcIj5cXG4gICAgICAgIDxpIGNsYXNzPVxcXCJmYSBmYS1saW5lLWNoYXJ0XFxcIj48L2k+XFxuICAgICAgPC9kaXY+XFxuICAgICAgPGRpdiBjbGFzcz1cXFwiZGF0ZVxcXCI+XFxuICAgICAgICB7e2FsZXJ0LmN0aW1lIHwgZGF0ZTpcXCdtZWRpdW1cXCcgfX1cXG4gICAgICA8L2Rpdj5cXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJldmVudFxcXCI+XFxuICAgICAgICA8c3Ryb25nPk1ldHJpY3M8L3N0cm9uZz4gbWV0IHRoZSBjb25kaXRpb24uXFxuICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcbiAgPC9kaXY+XFxuPC9kaXY+XFxuXCIpO1xuJHRlbXBsYXRlQ2FjaGUucHV0KFwicGx1Z2lucy9tZXRyaWNzL2h0bWwvYWxlcnRzLmh0bWxcIixcIjxkaXYgY2xhc3M9XFxcInJvd1xcXCIgPlxcbiAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTEyXFxcIj5cXG4gICAgPGgxPkFsZXJ0czwvaDE+XFxuICAgIDx0YWJzZXQ+XFxuICAgICAgPHRhYiBoZWFkaW5nPVxcXCJBbGVydHNcXFwiPlxcbiAgICAgICAgPGRpdiBuZy1pbmNsdWRlPVxcXCJcXCdwbHVnaW5zL21ldHJpY3MvaHRtbC9hbGVydHMtdmlldy5odG1sXFwnXFxcIiBuZy1jb250cm9sbGVyPVxcXCJNZXRyaWNzQWxlcnRDb250cm9sbGVyIGFzIG1hY1xcXCI+PC9kaXY+XFxuICAgICAgPC90YWI+XFxuICAgICAgPHRhYiBoZWFkaW5nPVxcXCJBbGVydHMgU2V0dXBcXFwiPlxcbiAgICAgICAgPGRpdiBuZy1pbmNsdWRlPVxcXCJcXCdwbHVnaW5zL21ldHJpY3MvaHRtbC9hbGVydHMtc2V0dXAuaHRtbFxcJ1xcXCI+PC9kaXY+XFxuICAgICAgPC90YWI+XFxuICAgIDwvdGFic2V0PlxcbiAgPC9kaXY+XFxuPC9kaXY+XFxuXCIpO1xuJHRlbXBsYXRlQ2FjaGUucHV0KFwicGx1Z2lucy9tZXRyaWNzL2h0bWwvY3JlYXRlLWFsZXJ0LWZvcm0uaHRtbFwiLFwiPGRpdiBuZy1jb250cm9sbGVyPVxcXCJRdWlja0FsZXJ0Q29udHJvbGxlciBhcyBxYWNcXFwiIG5nLXNob3c9XFxcInZtLmNoYXJ0RGF0YS5kYXRhUG9pbnRzLmxlbmd0aCA+IDFcXFwiPlxcbiAgPGRpdiBuZy1zaG93PVxcXCIhc2hvd1F1aWNrQWxlcnRcXFwiIGNsYXNzPVxcXCJjb2wtc20tOSBjb2wtbWQtMTAgY29udGVudFxcXCI+XFxuICAgIDxidXR0b24gY2xhc3M9XFxcImJ0biBidG4tcHJpbWFyeSBwdWxsLWxlZnRcXFwiIG5nLWNsaWNrPVxcXCJxYWMudG9nZ2xlUXVpY2tBbGVydCgpXFxcIj5BZGQgYW4gQWxlcnQ8L2J1dHRvbj5cXG4gIDwvZGl2PlxcbiAgPGRpdiBuZy1zaG93PVxcXCJzaG93UXVpY2tBbGVydFxcXCIgY2xhc3M9XFxcImNvbC1zbS05IGNvbC1tZC0xMCBjb250ZW50XFxcIj5cXG4gICAgPGgxPkFkZCBhbiBBbGVydDwvaDE+XFxuXFxuICAgIDxmb3JtIGNsYXNzPVxcXCJmb3JtLWhvcml6b250YWxcXFwiIG5hbWU9XFxcImFkZFF1aWNrQWxlcnRGb3JtXFxcIiByb2xlPVxcXCJmb3JtXFxcIj5cXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG4gICAgICAgIDxsYWJlbCBjbGFzcz1cXFwiY29sLW1kLTQgY29udHJvbC1sYWJlbFxcXCI+XFxuICAgICAgICAgIEZpcmUgd2hlbiBtZXRyaWMgaXNcXG4gICAgICAgIDwvbGFiZWw+XFxuXFxuICAgICAgICA8ZGl2IGlkPVxcXCJhbGVydC1yYWRpby1jb250YWluZXJcXFwiIGNsYXNzPVxcXCJjb2wtbWQtNFxcXCI+XFxuICAgICAgICAgIDxsYWJlbCBjbGFzcz1cXFwicmFkaW8taW5saW5lXFxcIj5cXG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwicmFkaW9cXFwiIG5nLW1vZGVsPVxcXCJxdWlja1RyaWdnZXIub3BlcmF0b3JcXFwiIGNsYXNzPVxcXCJyYWRpb1xcXCIgdmFsdWU9XFxcIkxUXFxcIj4gPFxcbiAgICAgICAgICA8L2xhYmVsPlxcbiAgICAgICAgICA8bGFiZWwgY2xhc3M9XFxcInJhZGlvLWlubGluZVxcXCI+XFxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcInJhZGlvXFxcIiBuZy1tb2RlbD1cXFwicXVpY2tUcmlnZ2VyLm9wZXJhdG9yXFxcIiBjbGFzcz1cXFwicmFkaW9cXFwiIHZhbHVlPVxcXCJHVFxcXCI+ID5cXG4gICAgICAgICAgPC9sYWJlbD5cXG4gICAgICAgICAgPGxhYmVsIGNsYXNzPVxcXCJyYWRpby1pbmxpbmVcXFwiPlxcbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJyYWRpb1xcXCIgbmctbW9kZWw9XFxcInF1aWNrVHJpZ2dlci5vcGVyYXRvclxcXCIgY2xhc3M9XFxcInJhZGlvXFxcIiB2YWx1ZT1cXFwiTFRFXFxcIj4gPD1cXG4gICAgICAgICAgPC9sYWJlbD5cXG4gICAgICAgICAgPGxhYmVsIGNsYXNzPVxcXCJyYWRpby1pbmxpbmVcXFwiPlxcbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJyYWRpb1xcXCIgbmctbW9kZWw9XFxcInF1aWNrVHJpZ2dlci5vcGVyYXRvclxcXCIgY2xhc3M9XFxcInJhZGlvXFxcIiB2YWx1ZT1cXFwiR1RFXFxcIj4gPj1cXG4gICAgICAgICAgPC9sYWJlbD5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgIDwvZGl2PlxcbiAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcbiAgICAgICAgPGxhYmVsIGNsYXNzPVxcXCJjb2wtbWQtNCBjb250cm9sLWxhYmVsXFxcIiBmb3I9XFxcInRocmVzaG9sZFxcXCI+XFxuICAgICAgICAgIE9mIHRocmVzaG9sZFxcbiAgICAgICAgPC9sYWJlbD5cXG5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbC1tZC0yXFxcIj5cXG4gICAgICAgICAgPGlucHV0IHR5cGU9XFxcIm51bWJlclxcXCIgaWQ9XFxcInRocmVzaG9sZFxcXCIgbmctbW9kZWw9XFxcInF1aWNrVHJpZ2dlci50aHJlc2hvbGRcXFwiIGNsYXNzPVxcXCJmb3JtLWNvbnRyb2xcXFwiXFxuICAgICAgICAgICAgICAgICBuZy1taW5sZW5ndGg9XFxcIjFcXFwiIHJlcXVpcmVkPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgPC9kaXY+XFxuICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuICAgICAgICA8bGFiZWwgY2xhc3M9XFxcImNvbC1tZC00IGNvbnRyb2wtbGFiZWxcXFwiIGZvcj1cXFwiYWN0aW9uc1xcXCI+XFxuICAgICAgICAgIE5vdGlmeSB0bzpcXG4gICAgICAgIDwvbGFiZWw+XFxuXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtM1xcXCI+XFxuICAgICAgICAgIDx1aS1zZWxlY3QgaWQ9XFxcImFjdGlvbnNcXFwiIG11bHRpcGxlIG5nLW1vZGVsPVxcXCJxdWlja1RyaWdnZXIuYWN0aW9uc1xcXCIgdGhlbWU9XFxcImJvb3RzdHJhcFxcXCJcXG4gICAgICAgICAgICAgICAgICAgICBuZy1kaXNhYmxlZD1cXFwiZGlzYWJsZWRcXFwiIGNsb3NlLW9uLXNlbGVjdD1cXFwiZmFsc2VcXFwiPlxcbiAgICAgICAgICAgIDx1aS1zZWxlY3QtbWF0Y2ggcGxhY2Vob2xkZXI9XFxcIlNlbGVjdCBhY3Rpb24uLi5cXFwiPnt7JGl0ZW19fTwvdWktc2VsZWN0LW1hdGNoPlxcbiAgICAgICAgICAgIDx1aS1zZWxlY3QtY2hvaWNlcyByZXBlYXQ9XFxcImFjdGlvbiBpbiBhY3Rpb25zIHwgZmlsdGVyOiRzZWxlY3Quc2VhcmNoXFxcIj5cXG4gICAgICAgICAgICAgIHt7IGFjdGlvbiB9fVxcbiAgICAgICAgICAgIDwvdWktc2VsZWN0LWNob2ljZXM+XFxuICAgICAgICAgIDwvdWktc2VsZWN0PlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgPC9kaXY+XFxuICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtb2Zmc2V0LTQgY29sLW1kLTZcXFwiPlxcbiAgICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLXByaW1hcnlcXFwiIG5nLWNsaWNrPVxcXCJxYWMuc2F2ZVF1aWNrQWxlcnQoKVxcXCI+Q3JlYXRlIEFsZXJ0PC9idXR0b24+XFxuICAgICAgICAgIDxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0XFxcIiBuZy1jbGljaz1cXFwicWFjLnRvZ2dsZVF1aWNrQWxlcnQoKVxcXCI+Q2FuY2VsPC9idXR0b24+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICA8L2Rpdj5cXG4gICAgPC9mb3JtPlxcbiAgPC9kaXY+XFxuPC9kaXY+XFxuXCIpO1xuJHRlbXBsYXRlQ2FjaGUucHV0KFwicGx1Z2lucy9tZXRyaWNzL2h0bWwvaG9tZS5odG1sXCIsXCI8ZGl2IGNsYXNzPVxcXCJyb3dcXFwiIG5nLWNvbnRyb2xsZXI9XFxcIkhhd2t1bGFyTWV0cmljcy5PdmVydmlld0NvbnRyb2xsZXIgYXMgdm1cXFwiPlxcbiAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTEyXFxcIj5cXG4gICAgPGgxPkhvbWUgUGFnZSAod2hlbiB1cmwgZXhpc3RzKTwvaDE+XFxuICA8L2Rpdj5cXG48L2Rpdj5cXG5cIik7XG4kdGVtcGxhdGVDYWNoZS5wdXQoXCJwbHVnaW5zL21ldHJpY3MvaHRtbC9yZXNwb25zZS10aW1lLmh0bWxcIixcIjxkaXYgbmctY29udHJvbGxlcj1cXFwiTWV0cmljc1ZpZXdDb250cm9sbGVyIGFzIHZtXFxcIj5cXG5cXG4gIDxkaXYgY2xhc3M9XFxcImNvbC1zbS05IGNvbC1tZC0xMCBjb250ZW50XFxcIj5cXG5cXG4gICAgPCEtLTxkaXYgY2xhc3M9XFxcIndlbGxcXFwiIGlkPVxcXCJjb250cm9sLWJhclxcXCI+LS0+XFxuICAgICAgICAgICAgPCEtLTxzcGFuIGNsYXNzPVxcXCJjb2wtbWQtMyBjb2wtc20tNCBzZWxlY3QtdXJsLWNvbnRhaW5lclxcXCI+LS0+XFxuICAgICAgICAgICAgICAgIDwhLS08c2VsZWN0IGNsYXNzPVxcXCJmb3JtLWNvbnRyb2wgaW5wdXQtc20gc2VsZWN0LXVybFxcXCIgbmctbW9kZWw9XFxcInZtLnNlbGVjdGVkUmVzb3VyY2VcXFwiLS0+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPCEtLW5nLW9wdGlvbnM9XFxcInJzLnBhcmFtZXRlcnMudXJsIGZvciBycyBpbiB2bS5yZXNvdXJjZUxpc3RcXFwiPjwvc2VsZWN0Pi0tPlxcbiAgICAgICAgICAgIDwhLS08L3NwYW4+LS0+XFxuICAgICAgICAgICAgPCEtLTxzcGFuIGlkPVxcXCJkYXRlLXJhbmdlLWNvbnRhaW5lclxcXCIgY2xhc3M9XFxcImNvbC1tZC0zIGNvbC1zbS0yIHB1bGwtcmlnaHRcXFwiPi0tPlxcbiAgICAgICAgICAgICAgICA8IS0tPHNwYW4gaWQ9XFxcImRhdGUtcmFuZ2VcXFwiIGNsYXNzPVxcXCJpbnB1dC1ncm91cCBpbnB1dC1ncm91cC1zbVxcXCI+LS0+XFxuICAgICAgICAgICAgICAgICAgICA8IS0tPGlucHV0IHR5cGU9XFxcInRleHRcXFwiIGNsYXNzPVxcXCJmb3JtLWNvbnRyb2wgaW5wdXQtc21cXFwiIHZhbHVlPVxcXCJ7e3ZtLmRhdGVSYW5nZX19XFxcIiByZWFkb25seT4tLT5cXG4gICAgICAgICAgICAgICAgPCEtLTwvc3Bhbj4tLT5cXG4gICAgICAgICAgICA8IS0tPC9zcGFuPi0tPlxcbiAgICA8IS0tPC9kaXY+LS0+XFxuXFxuICAgIDxkaXYgY2xhc3M9XFxcImNvbC1zbS05IGNvbC1tZC0xMCBjb250ZW50IHJlc3BvbnNlLXRpbWVcXFwiPlxcbiAgICAgIDxoMT5SZXNwb25zZSBUaW1lPC9oMT5cXG5cXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJwYW5lbCBwYW5lbC1kZWZhdWx0IGdyYXBoLXN1bW1hcnlcXFwiPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwicm93XFxcIj5cXG4gICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTQgc3VtbWFyeS1pdGVtXFxcIj5cXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiZGF0YVxcXCI+e3t2bS5hdmVyYWdlfX0gPHNwYW4+bXM8L3NwYW4+PC9zcGFuPlxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJpdGVtXFxcIj5BdmVyYWdlPC9zcGFuPlxcbiAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTQgc3VtbWFyeS1pdGVtXFxcIj5cXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiZGF0YVxcXCI+e3t2bS5tZWRpYW59fSA8c3Bhbj5tczwvc3Bhbj48L3NwYW4+XFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcIml0ZW1cXFwiPk1lZGlhbjwvc3Bhbj5cXG4gICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbC1tZC00IHN1bW1hcnktaXRlbVxcXCI+XFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImRhdGFcXFwiPnt7dm0ucGVyY2VudGlsZTk1dGh9fSA8c3Bhbj5tczwvc3Bhbj48L3NwYW4+XFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcIml0ZW1cXFwiPjk1dGggcGVyY2VudGlsZTwvc3Bhbj5cXG4gICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICA8L2Rpdj5cXG5cXG5cXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJwYW5lbCBwYW5lbC1kZWZhdWx0IGdyYXBoXFxcIj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImxlZ2VuZCBwdWxsLWxlZnRcXFwiIG5nLXNob3c9XFxcInZtLmNoYXJ0RGF0YS5kYXRhUG9pbnRzLmxlbmd0aCA+IDBcXFwiPlxcbiAgICAgICAgICA8c3Bhbj48aSBjbGFzcz1cXFwiZmEgZmEtY2lyY2xlIHByaW1hcnlcXFwiPjwvaT5SZXNwb25zZSBUaW1lPC9zcGFuPlxcbiAgICAgICAgICA8c3Bhbj48aSBjbGFzcz1cXFwiZmEgZmEtY2lyY2xlIGRhbmdlclxcXCI+PC9pPlJlc3BvbnNlIFRpbWUgKGFib3ZlIHRoZSB0aHJlc2hvbGQpPC9zcGFuPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ1cGRhdGUgcHVsbC1yaWdodFxcXCIgbmctc2hvdz1cXFwidm0uY2hhcnREYXRhLmRhdGFQb2ludHMubGVuZ3RoID4gMFxcXCIgPlxcbiAgICAgICAgICA8aSBjbGFzcz1cXFwiZmEgZmEtY2xvY2stb1xcXCI+PC9pPjxhIG5nLWNsaWNrPVxcXCJ2bS5yZWZyZXNoQ2hhcnREYXRhTm93KHZtLmdldE1ldHJpY0lkKCkpXFxcIj48c3Ryb25nPkxhc3RcXG4gICAgICAgICAgdXBkYXRlPC9zdHJvbmc+IDEgbWludXRlcyBhZ288L2E+XFxuICAgICAgICA8L2Rpdj5cXG5cXG4gICAgICAgIDxwIGNsYXNzPVxcXCJsYWJlbCBsYWJlbC1pbmZvIHdhaXRpbmctbGFiZWxcXFwiIG5nLWhpZGU9XFxcInZtLmNoYXJ0RGF0YS5kYXRhUG9pbnRzLmxlbmd0aCA+IDBcXFwiID5XZSBhcmVcXG4gICAgICAgICAgY29sbGVjdGluZyB5b3VyIGluaXRpYWwgZGF0YS4gUGxlYXNlIGJlIHBhdGllbnQoY291bGQgYmUgdXAgdG8gYSBtaW51dGUpLi4uPC9wPlxcblxcblxcbiAgICAgICAgPGRpdiBpZD1cXFwibWV0cmljcy1jaGFydFxcXCI+XFxuICAgICAgICAgIDwhLS0gSElOVDogY29sb3JzIGZvciB0aGUgY2hhcnQgY2FuIGJlIGNoYW5nZWQgaW4gdGhlIGhhd2t1bGFyLWNoYXJ0cy5jc3MgLS0+XFxuICAgICAgICAgIDxoYXdrdWxhci1jaGFydFxcbiAgICAgICAgICAgIGRhdGE9XFxcInt7dm0uY2hhcnREYXRhLmRhdGFQb2ludHN9fVxcXCJcXG4gICAgICAgICAgICBjaGFydC10eXBlPVxcXCJoYXdrdWxhcm1ldHJpY1xcXCJcXG4gICAgICAgICAgICBhbGVydC12YWx1ZT1cXFwiNTAwXFxcIlxcbiAgICAgICAgICAgIGhpZGUtaGlnaC1sb3ctdmFsdWVzPVxcXCJ0cnVlXFxcIlxcbiAgICAgICAgICAgIHktYXhpcy11bml0cz1cXFwiUmVzcG9uc2UgVGltZSAobXMpXFxcIlxcbiAgICAgICAgICAgIGNoYXJ0LWhlaWdodD1cXFwiMjUwXFxcIj5cXG4gICAgICAgICAgPC9oYXdrdWxhci1jaGFydD5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgIDwvZGl2PlxcblxcblxcbiAgICA8L2Rpdj5cXG5cXG5cXG4gIDwvZGl2PlxcblxcbjwvZGl2PlxcblxcblxcblwiKTtcbiR0ZW1wbGF0ZUNhY2hlLnB1dChcInBsdWdpbnMvbWV0cmljcy9odG1sL3VwLWRvd250aW1lLmh0bWxcIixcIjxkaXYgY2xhc3M9XFxcInJvd1xcXCIgbmctY29udHJvbGxlcj1cXFwiSGF3a3VsYXJNZXRyaWNzLk92ZXJ2aWV3Q29udHJvbGxlciBhcyB2bVxcXCI+XFxuICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtMTJcXFwiPlxcbiAgICA8aDE+QXZhaWxhYmlsaXR5PC9oMT5cXG4gIDwvZGl2PlxcbjwvZGl2PlxcblwiKTt9XSk7IGhhd3Rpb1BsdWdpbkxvYWRlci5hZGRNb2R1bGUoXCJoYXdrdWxhci11aS1jb21wb25lbnRzLW1ldHJpY3MtdGVtcGxhdGVzXCIpOyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==