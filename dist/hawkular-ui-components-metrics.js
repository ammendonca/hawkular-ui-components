/// Copyright 2014-2015 Red Hat, Inc. and/or its affiliates
/// and other contributors as indicated by the @author tags.
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///   http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
if (typeof HawkularComponentsVersions !== 'undefined') { HawkularComponentsVersions.push({name:'metrics', version:'07cf20b Merge pull request #106 from Jiri-Kremser/HAWKULAR-185'})} else {HawkularComponentsVersions = [{name:'metrics', version:'07cf20b Merge pull request #106 from Jiri-Kremser/HAWKULAR-185'}]};


var HawkularMetrics;
(function (HawkularMetrics) {
    HawkularMetrics.pluginName = "hawkular-metrics";
    HawkularMetrics.log = Logger.get(HawkularMetrics.pluginName);
    HawkularMetrics.templatePath = "plugins/metrics/html";
    HawkularMetrics.globalTenantId = "test";
    HawkularMetrics.globalEnvironmentId = "test";
})(HawkularMetrics || (HawkularMetrics = {}));

var HawkularMetrics;
(function (HawkularMetrics) {
    HawkularMetrics._module = angular.module(HawkularMetrics.pluginName, ['ngResource', 'ui.select', 'hawkularCharts', 'hawkular.services', 'ui.bootstrap', 'topbar', 'patternfly.select', 'angular-momentjs', 'angular-md5']);
    var metricsTab;
    HawkularMetrics._module.config(['$httpProvider', '$locationProvider', '$routeProvider', 'HawtioNavBuilderProvider', function ($httpProvider, $locationProvider, $routeProvider, navBuilder) {
        metricsTab = navBuilder.create().id(HawkularMetrics.pluginName).title(function () { return 'Metrics'; }).href(function () { return '/metrics'; }).subPath('Add Url', 'add-url', navBuilder.join(HawkularMetrics.templatePath, 'add-url.html')).subPath('Response Time', 'response-time', navBuilder.join(HawkularMetrics.templatePath, 'response-time.html')).subPath('Availability', 'availability', navBuilder.join(HawkularMetrics.templatePath, 'availability.html')).subPath('Alerts', 'alerts', navBuilder.join(HawkularMetrics.templatePath, 'alerts.html')).build();
        navBuilder.configureRouting($routeProvider, metricsTab);
        $locationProvider.html5Mode(true);
    }]);
    HawkularMetrics._module.run(['HawtioNav', function (HawtioNav) {
        HawtioNav.add(metricsTab);
        HawkularMetrics.log.debug('loaded Metrics Plugin');
    }]);
    HawkularMetrics._module.directive('hkEnter', function () {
        return function (scope, element, attrs) {
            element.bind('keydown keypress', function (event) {
                if (event.which === 13) {
                    scope.$apply(function () {
                        scope.$eval(attrs.hkEnter);
                    });
                    event.preventDefault();
                }
            });
        };
    });
    HawkularMetrics._module.config(["$routeProvider", function ($routeProvider) {
        $routeProvider.when('/hawkular/:resourceId/:timeOffset?/:endTime?', { templateUrl: 'plugins/metrics/html/single-page.html' }).when('/metrics/response-time', { templateUrl: 'plugins/metrics/html/response-time.html', resolve: {
            hkResourceList: function ($filter, $location, $q, HawkularInventory) {
                var resPromise = HawkularInventory.Resource.query({ tenantId: HawkularMetrics.globalTenantId, environmentId: HawkularMetrics.globalEnvironmentId }).$promise;
                resPromise.then(function (hkResourceList) {
                    $location.path('/metrics/response-time/' + hkResourceList[0].id);
                }, function () {
                    $location.url('/error');
                });
                return $q.defer().promise;
            }
        } }).when('/hawkular-ui/url/url-list', { templateUrl: 'plugins/metrics/html/add-url.html' }).when('/hawkular-ui/url/response-time/:resourceId/:timeOffset?/:endTime?', { templateUrl: 'plugins/metrics/html/response-time.html' }).when('/hawkular-ui/url/availability/:resourceId/:timeOffset?/:endTime?', { templateUrl: 'plugins/metrics/html/availability.html' }).when('/hawkular-ui/url/alerts/:resourceId/:timeOffset?/:endTime?', { templateUrl: 'plugins/metrics/html/alerts.html' }).when('/hawkular-ui/app/app-list', { templateUrl: 'plugins/metrics/html/app-server-list.html' }).when('/hawkular-ui/app/app-details/:resourceId/:timeOffset?/:endTime?', { templateUrl: 'plugins/metrics/html/app-server-details.html', resolve: { hideSubNav: function () {
            return true;
        } } }).otherwise({ redirectTo: '/hawkular-ui/url/url-list' });
    }]);
    hawtioPluginLoader.addModule(HawkularMetrics.pluginName);
})(HawkularMetrics || (HawkularMetrics = {}));

var HawkularMetrics;
(function (HawkularMetrics) {
    var HawkularAlertsManager = (function () {
        function HawkularAlertsManager(HawkularAlert, $q, $log, $moment) {
            this.HawkularAlert = HawkularAlert;
            this.$q = $q;
            this.$log = $log;
            this.$moment = $moment;
        }
        HawkularAlertsManager.prototype.createTrigger = function (triggerName, enabled, conditionType, email) {
            var _this = this;
            var triggerId;
            return this.HawkularAlert.Trigger.save({
                name: triggerName,
                id: triggerName,
                description: 'Created on ' + Date(),
                firingMatch: 'ALL',
                safetyMatch: 'ALL',
                enabled: enabled,
                safetyEnabled: false,
                actions: [email]
            }).$promise.then(function (trigger) {
                triggerId = trigger.id;
                var dataId = trigger.name.slice(0, -14) + '.status.duration';
                if (conditionType === 'THRESHOLD') {
                    return _this.createCondition(triggerId, {
                        type: conditionType,
                        triggerId: triggerId,
                        threshold: 1000,
                        dataId: dataId,
                        operator: 'GT'
                    });
                }
                else if (conditionType === 'AVAILABILITY') {
                    return _this.createCondition(triggerId, {
                        type: conditionType,
                        triggerId: triggerId,
                        dataId: trigger.name.slice(0, -14),
                        operator: 'DOWN'
                    });
                }
            }).then(function () {
                return _this.createDampening(triggerId, 7 * 60000);
            });
        };
        HawkularAlertsManager.prototype.updateTrigger = function (triggerId, data) {
            data.id = triggerId;
            return this.HawkularAlert.Trigger.put({ triggerId: triggerId }, data).$promise;
        };
        HawkularAlertsManager.prototype.getAction = function (email) {
            return this.HawkularAlert.Action.get({
                actionId: email
            }).$promise;
        };
        HawkularAlertsManager.prototype.createAction = function (email) {
            return this.HawkularAlert.Action.save({
                actionPlugin: 'email',
                actionId: email,
                description: 'Created on ' + Date(),
                to: email
            }).$promise;
        };
        HawkularAlertsManager.prototype.addEmailAction = function (email) {
            var _this = this;
            return this.getAction(email).then(function (data) {
                _this.$log.debug('Action', data, ' for email ', email);
                if (!data.actionId) {
                    _this.$log.debug('Action does not exist, creating one');
                    return _this.createAction(email);
                }
                _this.$log.debug('Action does already exist');
            });
        };
        HawkularAlertsManager.prototype.updateAction = function (email) {
            return this.HawkularAlert.Action.put({
                actionPlugin: 'email',
                actionId: email,
                description: 'Created on ' + Date(),
                to: email
            }).$promise;
        };
        HawkularAlertsManager.prototype.createCondition = function (triggerId, condition) {
            return this.HawkularAlert.Condition.save({ triggerId: triggerId }, condition).$promise;
        };
        HawkularAlertsManager.prototype.updateCondition = function (triggerId, conditionId, condition) {
            return this.HawkularAlert.Condition.put({ triggerId: triggerId, conditionId: conditionId }, condition).$promise;
        };
        HawkularAlertsManager.prototype.createDampening = function (triggerId, duration) {
            return this.HawkularAlert.Dampening.save({ triggerId: triggerId }, {
                triggerId: triggerId,
                evalTimeSetting: duration,
                type: 'STRICT_TIME'
            }).$promise;
        };
        HawkularAlertsManager.prototype.updateDampening = function (triggerId, dampeningId, dampening) {
            dampening.dampeningId = dampeningId;
            return this.HawkularAlert.Dampening.put({ triggerId: triggerId, dampeningId: dampeningId }, dampening).$promise;
        };
        HawkularAlertsManager.prototype.getActions = function (triggerId) {
            return undefined;
        };
        HawkularAlertsManager.prototype.getTrigger = function (triggerId) {
            return this.HawkularAlert.Trigger.get({ triggerId: triggerId }).$promise;
        };
        HawkularAlertsManager.prototype.setEmail = function (triggerId, email) {
            var _this = this;
            var actions = this.getActions(triggerId);
            return actions.then(function (actions) {
                if (!actions) {
                    return _this.HawkularAlert.Action.save({}).$promise;
                }
                else {
                    return _this.HawkularAlert.Action.put({
                        actionId: ''
                    }, {}).$promise;
                }
            });
        };
        HawkularAlertsManager.prototype.setResponseTime = function (triggerId, treshold, duration, enabled) {
            return undefined;
        };
        HawkularAlertsManager.prototype.setDowntime = function (triggerId, duration, enabled) {
            return undefined;
        };
        HawkularAlertsManager.prototype.queryConsoleAlerts = function (metricId) {
            var _this = this;
            var alertList = [];
            return this.HawkularAlert.Alert.query({ triggerIds: metricId + '_trigger_avail,' + metricId + '_trigger_thres' }).$promise.then(function (serverAlerts) {
                var momentNow = _this.$moment();
                _this.$log.debug('querying data finished', serverAlerts);
                for (var i = 0; i < serverAlerts.length; i++) {
                    var consoleAlert = {};
                    var serverAlert = serverAlerts[i];
                    _this.$log.debug('server Alert to inspect: ', serverAlert);
                    consoleAlert.end = serverAlert.ctime;
                    var sum = 0.0;
                    var count = 0.0;
                    for (var j = 0; j < serverAlert.evalSets.length; j++) {
                        var eval = serverAlert.evalSets[j][0];
                        if (!consoleAlert.start && eval.dataTimestamp) {
                            consoleAlert.start = eval.dataTimestamp;
                        }
                        if (!consoleAlert.threshold && eval.condition.threshold) {
                            consoleAlert.threshold = eval.condition.threshold;
                        }
                        if (!consoleAlert.type && eval.condition.type) {
                            consoleAlert.type = eval.condition.type;
                        }
                        var momentAlert = _this.$moment(consoleAlert.end);
                        if (momentAlert.year() === momentNow.year()) {
                            consoleAlert.isThisYear = true;
                            if (momentAlert.dayOfYear() === momentNow.dayOfYear()) {
                                consoleAlert.isToday = true;
                            }
                        }
                        sum += eval.value;
                        count++;
                    }
                    consoleAlert.avg = sum / count;
                    alertList.push(consoleAlert);
                }
            }, function (error) {
                _this.$log.debug('querying data error', error);
            }).then(function () {
                return alertList;
            });
        };
        HawkularAlertsManager.$inject = ['HawkularAlert', '$q', '$log', '$moment'];
        return HawkularAlertsManager;
    })();
    HawkularMetrics.HawkularAlertsManager = HawkularAlertsManager;
    HawkularMetrics._module.service('HawkularAlertsManager', HawkularAlertsManager);
})(HawkularMetrics || (HawkularMetrics = {}));

var HawkularMetrics;
(function (HawkularMetrics) {
    var HawkularErrorManager = (function () {
        function HawkularErrorManager($q, $log) {
            this.$q = $q;
            this.$log = $log;
        }
        HawkularErrorManager.prototype.errorToastr = function (error, errorMsg) {
            var errorMsgComplete;
            if (error.data && error.data.errorMsg) {
                errorMsgComplete = error.data.errorMsg;
            }
            else {
                errorMsgComplete = errorMsg + ' ' + error;
            }
            this.$log.error(errorMsgComplete);
            toastr.error(errorMsgComplete);
        };
        HawkularErrorManager.prototype.errorHandler = function (error, msg, cb) {
            if (error) {
                this.errorToastr(error, msg);
                if (cb) {
                    cb(error, msg);
                }
            }
            return this.$q.reject(null);
        };
        HawkularErrorManager.$inject = ['$q', '$log'];
        return HawkularErrorManager;
    })();
    HawkularMetrics.HawkularErrorManager = HawkularErrorManager;
    HawkularMetrics._module.service('HawkularErrorManager', HawkularErrorManager);
})(HawkularMetrics || (HawkularMetrics = {}));

var HawkularMetrics;
(function (HawkularMetrics) {
    var AddUrlController = (function () {
        function AddUrlController($location, $scope, $rootScope, $interval, $log, $filter, $modal, HawkularInventory, HawkularMetric, HawkularAlert, HawkularAlertsManager, HawkularErrorManager, HawkularAccounts, $q, md5, resourceUrl) {
            this.$location = $location;
            this.$scope = $scope;
            this.$rootScope = $rootScope;
            this.$interval = $interval;
            this.$log = $log;
            this.$filter = $filter;
            this.$modal = $modal;
            this.HawkularInventory = HawkularInventory;
            this.HawkularMetric = HawkularMetric;
            this.HawkularAlert = HawkularAlert;
            this.HawkularAlertsManager = HawkularAlertsManager;
            this.HawkularErrorManager = HawkularErrorManager;
            this.HawkularAccounts = HawkularAccounts;
            this.$q = $q;
            this.md5 = md5;
            this.resourceUrl = resourceUrl;
            this.httpUriPart = 'http://';
            this.addProgress = false;
            this.resPerPage = 5;
            this.resCurPage = 0;
            this.currentTenantId = this.HawkularAccounts.currentPersona.id;
            $scope.vm = this;
            this.resourceUrl = this.httpUriPart;
            this.getResourceList();
            this.autoRefresh(20);
        }
        AddUrlController.prototype.cancelAutoRefresh = function () {
            this.$interval.cancel(this.autoRefreshPromise);
            toastr.info('Canceling Auto Refresh');
        };
        AddUrlController.prototype.autoRefresh = function (intervalInSeconds) {
            var _this = this;
            this.autoRefreshPromise = this.$interval(function () {
                _this.getResourceList();
            }, intervalInSeconds * 1000);
            this.$scope.$on('$destroy', function () {
                _this.$interval.cancel(_this.autoRefreshPromise);
            });
        };
        AddUrlController.prototype.addUrl = function (url) {
            var _this = this;
            this.addProgress = true;
            var resourceId = this.md5.createHash(url || '');
            var resource = {
                resourceTypeId: 'URL',
                id: resourceId,
                properties: {
                    url: url
                }
            };
            this.$log.info('Adding new Resource Url to Hawkular-inventory: ' + url);
            var metricId;
            var defaultEmail = this.HawkularAccounts.userDetails.email || 'myemail@company.com';
            var err = function (error, msg) { return _this.HawkularErrorManager.errorHandler(error, msg); };
            this.HawkularInventory.Resource.save({ tenantId: this.currentTenantId, environmentId: HawkularMetrics.globalEnvironmentId }, resource).$promise.then(function (newResource) {
                _this.getResourceList();
                metricId = resourceId;
                console.dir(newResource);
                _this.$log.info('New Resource ID: ' + metricId + ' created.');
                var metricsIds = [metricId + '.status.duration', metricId + '.status.code'];
                var metrics = [{
                    id: metricsIds[0],
                    metricTypeId: 'status.duration.type',
                    properties: {
                        description: 'Response Time in ms.'
                    }
                }, {
                    id: metricsIds[1],
                    metricTypeId: 'status.code.type',
                    properties: {
                        description: 'Status Code'
                    }
                }];
                var errMetric = function (error) { return err(error, 'Error saving metric.'); };
                var createMetric = function (metric) { return _this.HawkularInventory.Metric.save({
                    tenantId: _this.currentTenantId,
                    environmentId: HawkularMetrics.globalEnvironmentId
                }, metric).$promise; };
                var associateResourceWithMetrics = function () { return _this.HawkularInventory.ResourceMetric.save({
                    tenantId: _this.currentTenantId,
                    environmentId: HawkularMetrics.globalEnvironmentId,
                    resourceId: resourceId
                }, metricsIds).$promise; };
                return createMetric(metrics[0]).then(createMetric(metrics[1]), errMetric).then(associateResourceWithMetrics, errMetric).catch('Error associating metrics with resource.');
            }).then(function () { return _this.HawkularAlertsManager.addEmailAction(defaultEmail); }, function (e) { return err(e, 'Error during saving metrics.'); }).then(function () { return _this.HawkularAlertsManager.createTrigger(metricId + '_trigger_thres', true, 'THRESHOLD', defaultEmail); }, function (e) { return err(e, 'Error saving email action.'); }).then(function (alert) { return _this.HawkularAlertsManager.createTrigger(metricId + '_trigger_avail', false, 'AVAILABILITY', defaultEmail); }, function (e) { return err(e, 'Error saving threshold trigger.'); }).then(function () { return toastr.info('Your data is being collected. Please be patient (should be about another minute).'); }, function (e) { return err(e, 'Error saving availability trigger.'); }).finally(function () {
                _this.resourceUrl = _this.httpUriPart;
                _this.$scope.addUrlForm.$setPristine();
                _this.addProgress = false;
            });
        };
        AddUrlController.prototype.getResourceList = function () {
            var _this = this;
            this.HawkularInventory.Resource.query({ tenantId: this.currentTenantId, environmentId: HawkularMetrics.globalEnvironmentId, per_page: this.resPerPage, page: this.resCurPage }, function (aResourceList, getResponseHeaders) {
                var pages = getResponseHeaders().link ? getResponseHeaders().link.split(', ') : [];
                for (var p = 0; p < pages.length; p++) {
                    if (pages[p].indexOf('')) {
                    }
                }
                var expanded = _this.resourceList ? _this.resourceList.expanded : [];
                aResourceList.expanded = expanded;
                _this.HawkularAlert.Alert.query({}, function (anAlertList) {
                    _this.alertList = anAlertList;
                }, _this);
                var promises = [];
                angular.forEach(aResourceList, function (res, idx) {
                    promises.push(this.HawkularMetric.NumericMetricData.queryMetrics({
                        tenantId: this.currentTenantId,
                        resourceId: res.id,
                        numericId: (res.id + '.status.duration'),
                        start: moment().subtract(24, 'hours').valueOf(),
                        end: moment().valueOf()
                    }, function (resource) {
                        res['responseTime'] = resource;
                    }).$promise);
                    promises.push(this.HawkularMetric.NumericMetricData.queryMetrics({
                        tenantId: this.currentTenantId,
                        resourceId: res.id,
                        numericId: (res.id + '.status.code'),
                        start: moment().subtract(24, 'hours').valueOf(),
                        end: moment().valueOf()
                    }, function (resource) {
                        res['isUp'] = (resource[0] && resource[0].value >= 200 && resource[0].value < 300);
                    }).$promise);
                    promises.push(this.HawkularMetric.AvailabilityMetricData.query({
                        tenantId: this.currentTenantId,
                        availabilityId: res.id,
                        start: moment().subtract(24, 'hours').valueOf(),
                        end: moment().valueOf(),
                        buckets: 1
                    }, function (resource) {
                        res['availability'] = resource[0].uptimeRatio * 100;
                        res['downTime'] = Math.round(resource[0].downtimeDuration / 1000 / 60);
                    }).$promise);
                    res['updateTime'] = new Date();
                }, _this);
                _this.$q.all(promises).then(function (result) {
                    _this.resourceList = aResourceList;
                });
            });
        };
        AddUrlController.prototype.getAverage = function (data, field) {
            if (data) {
                var sum = 0;
                for (var i = 0; i < data.length; i++) {
                    sum += parseInt(data[i][field], 10);
                }
                return Math.round(sum / data.length);
            }
        };
        AddUrlController.prototype.deleteResource = function (resource) {
            var _this = this;
            this.$modal.open({
                templateUrl: 'plugins/metrics/html/modals/delete-resource.html',
                controller: DeleteResourceModalController,
                resolve: {
                    resource: function () { return resource; }
                }
            }).result.then(function (result) { return _this.getResourceList(); });
        };
        AddUrlController.prototype.setPage = function (page) {
            this.resCurPage = page;
            this.getResourceList();
        };
        AddUrlController.$inject = ['$location', '$scope', '$rootScope', '$interval', '$log', '$filter', '$modal', 'HawkularInventory', 'HawkularMetric', 'HawkularAlert', 'HawkularAlertsManager', 'HawkularErrorManager', 'HawkularAccounts', '$q', 'md5'];
        return AddUrlController;
    })();
    HawkularMetrics.AddUrlController = AddUrlController;
    HawkularMetrics._module.controller('HawkularMetrics.AddUrlController', AddUrlController);
    var DeleteResourceModalController = (function () {
        function DeleteResourceModalController($scope, $rootScope, $modalInstance, HawkularInventory, resource) {
            this.$scope = $scope;
            this.$rootScope = $rootScope;
            this.$modalInstance = $modalInstance;
            this.HawkularInventory = HawkularInventory;
            this.resource = resource;
            $scope.vm = this;
        }
        DeleteResourceModalController.prototype.deleteResource = function () {
            var _this = this;
            this.HawkularInventory.Resource.delete({
                tenantId: this.$rootScope.currentPersona.id,
                environmentId: HawkularMetrics.globalEnvironmentId,
                resourceId: this.resource.id
            }).$promise.then(function (res) {
                toastr.info('The site ' + _this.resource.properties.url + ' is no longer being monitored.');
                _this.$modalInstance.close(res);
            });
        };
        DeleteResourceModalController.prototype.cancel = function () {
            this.$modalInstance.dismiss('cancel');
        };
        DeleteResourceModalController.$inject = ['$scope', '$rootScope', '$modalInstance', 'HawkularInventory', 'resource'];
        return DeleteResourceModalController;
    })();
})(HawkularMetrics || (HawkularMetrics = {}));

var HawkularMetrics;
(function (HawkularMetrics) {
    var MetricsAlertController = (function () {
        function MetricsAlertController($scope, HawkularAlert, HawkularAlertsManager, HawkularErrorManager, $log, $q, $rootScope, $routeParams, $modal) {
            var _this = this;
            this.$scope = $scope;
            this.HawkularAlert = HawkularAlert;
            this.HawkularAlertsManager = HawkularAlertsManager;
            this.HawkularErrorManager = HawkularErrorManager;
            this.$log = $log;
            this.$q = $q;
            this.$rootScope = $rootScope;
            this.$routeParams = $routeParams;
            this.$modal = $modal;
            this.alertList = [];
            this.$log.debug('querying data');
            this.$log.debug('$routeParams', $routeParams);
            this.openSetup = function () {
                var modalInstance = $modal.open({
                    templateUrl: 'plugins/metrics/html/alerts-setup.html',
                    controller: 'MetricsAlertSetupController as mas'
                });
                modalInstance.result.then(function (selectedItem) {
                    $scope.selected = selectedItem;
                }, function () {
                    $log.info('Modal dismissed at: ' + new Date());
                });
            };
            this.metricId = $routeParams.resourceId;
            $scope.alertsTimeOffset = $routeParams.timeOffset;
            $scope.alertsTimeEnd = $routeParams.endTime ? $routeParams.endTime : (new Date()).getTime();
            $scope.alertsTimeStart = $scope.alertsTimeEnd - $scope.alertsTimeOffset;
            $scope.timeFilter = function (value) {
                if (!$scope.alertsTimeOffset) {
                    return true;
                }
                return !!((value.start > $scope.alertsTimeStart) && (value.start < $scope.alertsTimeEnd));
            };
            HawkularAlertsManager.queryConsoleAlerts(this.metricId).then(function (data) {
                _this.$log.debug('queryConsoleAlerts', data);
                _this.alertList = data;
            }, function (error) {
                return _this.HawkularErrorManager.errorHandler(error, 'Error fetching alerts.');
            });
        }
        MetricsAlertController.$inject = ['$scope', 'HawkularAlert', 'HawkularAlertsManager', 'HawkularErrorManager', '$log', '$q', '$rootScope', '$routeParams', '$modal'];
        return MetricsAlertController;
    })();
    HawkularMetrics.MetricsAlertController = MetricsAlertController;
    HawkularMetrics._module.controller('MetricsAlertController', MetricsAlertController);
    var MetricsAlertSetupController = (function () {
        function MetricsAlertSetupController($scope, HawkularAlert, HawkularAlertsManager, HawkularErrorManager, $log, $q, $rootScope, $routeParams, $modalInstance) {
            var _this = this;
            this.$scope = $scope;
            this.HawkularAlert = HawkularAlert;
            this.HawkularAlertsManager = HawkularAlertsManager;
            this.HawkularErrorManager = HawkularErrorManager;
            this.$log = $log;
            this.$q = $q;
            this.$rootScope = $rootScope;
            this.$routeParams = $routeParams;
            this.$modalInstance = $modalInstance;
            this.alertSetupBackup = {};
            this.saveProgress = false;
            this.responseUnit = 60000;
            this.downtimeUnit = 1;
            this.thresDampDurationEnabled = false;
            this.isSettingChange = false;
            this.timeUnits = [
                { value: 1, label: 'miliseconds' },
                { value: 1000, label: 'seconds' },
                { value: 60000, label: 'minutes' },
                { value: 360000, label: 'hours' }
            ];
            this.timeUnitsDict = {
                '1': 'miliseconds',
                '1000': 'seconds',
                '60000': 'minutes',
                '360000': 'hours'
            };
            this.$log.debug('querying data');
            this.$log.debug('$routeParams', $routeParams.resourceId);
            this.$rootScope.hkNotifications = { alerts: [] };
            HawkularAlertsManager.getTrigger($routeParams.resourceId + '_trigger_thres').then(function (data) {
                _this.trigger_thres = data;
                _this.alertSetupBackup.trigger_thres = angular.copy(_this.trigger_thres);
                _this.$log.debug('this.trigger_thres', _this.trigger_thres);
                return HawkularAlert.Dampening.query({ triggerId: $routeParams.resourceId + '_trigger_thres' }).$promise;
            }, function (error) {
                return _this.HawkularErrorManager.errorHandler(error, 'Error fetching threshold trigger.');
            }).then(function (data) {
                _this.trigger_thres_damp = data;
                _this.alertSetupBackup.trigger_thres_damp = angular.copy(_this.trigger_thres_damp);
                _this.responseDuration = data[0].evalTimeSetting / _this.responseUnit;
                _this.alertSetupBackup.responseDuration = angular.copy(_this.responseDuration);
                _this.thresDampDurationEnabled = data[0].evalTimeSetting !== 0;
                _this.alertSetupBackup.thresDampDurationEnabled = angular.copy(_this.thresDampDurationEnabled);
                _this.$log.debug('this.trigger_thres_damp', _this.trigger_thres_damp);
                return HawkularAlert.Condition.query({ triggerId: $routeParams.resourceId + '_trigger_thres' }).$promise;
            }, function (error) {
                return _this.HawkularErrorManager.errorHandler(error, 'Error fetching threshold trigger dampening.');
            }).then(function (data) {
                _this.trigger_thres_cond = data;
                _this.alertSetupBackup.trigger_thres_cond = angular.copy(_this.trigger_thres_cond);
                _this.$log.debug('this.trigger_thres_cond', _this.trigger_thres_cond);
            }, function (error) {
                return _this.HawkularErrorManager.errorHandler(error, 'Error fetching threshold trigger condition.');
            });
            HawkularAlertsManager.getTrigger($routeParams.resourceId + '_trigger_avail').then(function (data) {
                _this.trigger_avail = data;
                _this.alertSetupBackup.trigger_avail = angular.copy(_this.trigger_avail);
                _this.$log.debug('this.trigger_avail', _this.trigger_avail);
                return HawkularAlert.Dampening.query({ triggerId: $routeParams.resourceId + '_trigger_avail' }).$promise;
            }, function (error) {
                return _this.HawkularErrorManager.errorHandler(error, 'Error fetching availability trigger.');
            }).then(function (data) {
                _this.trigger_avail_damp = data;
                _this.alertSetupBackup.trigger_avail_damp = angular.copy(_this.trigger_avail_damp);
                _this.downtimeDuration = data[0].evalTimeSetting;
                _this.$log.debug('this.trigger_avail_damp', _this.trigger_avail_damp);
            }, function (error) {
                return _this.HawkularErrorManager.errorHandler(error, 'Error fetching availability trigger dampening.');
            });
            this.metricId = $routeParams.resourceId;
            this.$log.debug('this.metricId', this.metricId);
        }
        MetricsAlertSetupController.prototype.changeResponseTimeUnits = function () {
            this.trigger_thres_damp[0].evalTimeSetting = this.responseDuration * this.responseUnit;
            this.alertSettingTouch();
        };
        MetricsAlertSetupController.prototype.changeDowntimeTimeUnits = function () {
            this.trigger_avail_damp[0].evalTimeSetting = this.downtimeDuration * this.downtimeUnit;
            this.alertSettingTouch();
        };
        MetricsAlertSetupController.prototype.cancel = function () {
            this.$modalInstance.dismiss('cancel');
        };
        MetricsAlertSetupController.prototype.save = function () {
            var _this = this;
            this.$log.debug('Saving Alert Settings');
            this.$rootScope.hkNotifications.alerts = [];
            var errorCallback = function (error, msg) {
                _this.$rootScope.hkNotifications.alerts.push({
                    type: 'error',
                    message: msg
                });
            };
            this.saveProgress = true;
            var isError = false;
            this.HawkularAlertsManager.addEmailAction(this.trigger_thres.actions[0]).then(function () {
                if (!angular.equals(_this.alertSetupBackup.trigger_thres, _this.trigger_thres)) {
                    return _this.HawkularAlertsManager.updateTrigger(_this.trigger_thres.id, _this.trigger_thres);
                }
            }, function (error) {
                return _this.HawkularErrorManager.errorHandler(error, 'Error saving email action.', errorCallback);
            }).then(function () {
                _this.trigger_avail.actions = _this.trigger_thres.actions;
                if (!angular.equals(_this.alertSetupBackup.trigger_avail, _this.trigger_avail)) {
                    return _this.HawkularAlertsManager.updateTrigger(_this.trigger_avail.id, _this.trigger_avail);
                }
            }, function (error) {
                return _this.HawkularErrorManager.errorHandler(error, 'Error updating threshold trigger.', errorCallback);
            }).then(function () {
                _this.changeResponseTimeUnits();
                if (!_this.thresDampDurationEnabled) {
                    _this.trigger_thres_damp[0].evalTimeSetting = 0;
                }
                if (!angular.equals(_this.alertSetupBackup.trigger_thres_damp[0], _this.trigger_thres_damp[0])) {
                    return _this.HawkularAlertsManager.updateDampening(_this.trigger_thres.id, _this.trigger_thres_damp[0].dampeningId, _this.trigger_thres_damp[0]);
                }
            }, function (error) {
                return _this.HawkularErrorManager.errorHandler(error, 'Error updating availability trigger.', errorCallback);
            }).then(function () {
                if (!angular.equals(_this.alertSetupBackup.trigger_avail_damp[0], _this.trigger_avail_damp[0])) {
                    _this.HawkularAlertsManager.updateDampening(_this.trigger_avail.id, _this.trigger_avail_damp[0].dampeningId, _this.trigger_avail_damp[0]);
                }
            }, function (error) {
                return _this.HawkularErrorManager.errorHandler(error, 'Error updating threshold trigger dampening.', errorCallback);
            }).then(function () {
                if (!angular.equals(_this.alertSetupBackup.trigger_thres_cond[0], _this.trigger_thres_cond[0])) {
                    return _this.HawkularAlertsManager.updateCondition(_this.trigger_thres.id, _this.trigger_thres_cond[0].conditionId, _this.trigger_thres_cond[0]);
                }
            }, function (error) {
                return _this.HawkularErrorManager.errorHandler(error, 'Error updating availability dampening.', errorCallback);
            }).then(angular.noop, function (error) {
                isError = true;
                return _this.HawkularErrorManager.errorHandler(error, 'Error updating availability condition.', errorCallback);
            }).finally(function () {
                _this.saveProgress = false;
                if (!isError) {
                    _this.$rootScope.hkNotifications.alerts.push({
                        type: 'success',
                        message: 'Changes saved successfully.'
                    });
                }
                _this.cancel();
            });
        };
        MetricsAlertSetupController.prototype.alertSettingTouch = function () {
            if (!angular.equals(!!this.alertSetupBackup.thresDampDurationEnabled, !!this.thresDampDurationEnabled) || !angular.equals(this.alertSetupBackup.responseDuration, this.responseDuration) || !angular.equals(this.alertSetupBackup.trigger_thres, this.trigger_thres) || !angular.equals(this.alertSetupBackup.trigger_avail, this.trigger_avail) || !angular.equals(this.alertSetupBackup.trigger_thres_damp[0], this.trigger_thres_damp[0]) || !angular.equals(this.alertSetupBackup.trigger_avail_damp[0], this.trigger_avail_damp[0]) || !angular.equals(this.alertSetupBackup.trigger_thres_cond[0], this.trigger_thres_cond[0])) {
                this.isSettingChange = true;
            }
            else {
                this.isSettingChange = false;
            }
        };
        MetricsAlertSetupController.$inject = ['$scope', 'HawkularAlert', 'HawkularAlertsManager', 'HawkularErrorManager', '$log', '$q', '$rootScope', '$routeParams', '$modalInstance'];
        return MetricsAlertSetupController;
    })();
    HawkularMetrics.MetricsAlertSetupController = MetricsAlertSetupController;
    HawkularMetrics._module.controller('MetricsAlertSetupController', MetricsAlertSetupController);
    var HkClearNotifications = (function () {
        function HkClearNotifications() {
            this.scope = {
                hkClearNotifications: '='
            };
            this.link = function (scope, element, attrs) {
                angular.element('html').on('click', function () {
                    if (scope.hkClearNotifications && scope.hkClearNotifications.length && scope.hkClearNotifications.length > 0) {
                        scope.$apply(function () {
                            scope.hkClearNotifications = [];
                        });
                    }
                });
            };
        }
        HkClearNotifications.Factory = function () {
            var directive = function () {
                return new HkClearNotifications();
            };
            directive['$inject'] = [];
            return directive;
        };
        return HkClearNotifications;
    })();
    HawkularMetrics.HkClearNotifications = HkClearNotifications;
    HawkularMetrics._module.directive('hkClearNotifications', HkClearNotifications.Factory());
})(HawkularMetrics || (HawkularMetrics = {}));

var HawkularMetrics;
(function (HawkularMetrics) {
    var AppServerDetailsController = (function () {
        function AppServerDetailsController($location, $scope, $rootScope, $interval, $log, $filter, $modal, HawkularInventory, HawkularMetric, HawkularAlert, HawkularAlertsManager, HawkularErrorManager, $q, md5, startTimeStamp, endTimeStamp, resourceUrl) {
            this.$location = $location;
            this.$scope = $scope;
            this.$rootScope = $rootScope;
            this.$interval = $interval;
            this.$log = $log;
            this.$filter = $filter;
            this.$modal = $modal;
            this.HawkularInventory = HawkularInventory;
            this.HawkularMetric = HawkularMetric;
            this.HawkularAlert = HawkularAlert;
            this.HawkularAlertsManager = HawkularAlertsManager;
            this.HawkularErrorManager = HawkularErrorManager;
            this.$q = $q;
            this.md5 = md5;
            this.startTimeStamp = startTimeStamp;
            this.endTimeStamp = endTimeStamp;
            this.resourceUrl = resourceUrl;
            this.httpUriPart = 'http://';
            this.addProgress = false;
            this.resPerPage = 5;
            this.resCurPage = 0;
            $scope.vm = this;
            this.startTimeStamp = +moment().subtract(1, 'hours');
            this.endTimeStamp = +moment();
            this.resourceUrl = this.httpUriPart;
            this.getResourceList();
            this.autoRefresh(20);
        }
        AppServerDetailsController.prototype.cancelAutoRefresh = function () {
            this.$interval.cancel(this.autoRefreshPromise);
            toastr.info('Canceling Auto Refresh');
        };
        AppServerDetailsController.prototype.autoRefresh = function (intervalInSeconds) {
            var _this = this;
            this.autoRefreshPromise = this.$interval(function () {
                _this.getResourceList();
            }, intervalInSeconds * 1000);
            this.$scope.$on('$destroy', function () {
                _this.$interval.cancel(_this.autoRefreshPromise);
            });
        };
        AppServerDetailsController.prototype.getResourceList = function () {
            this.resourceList = [
                {
                    tenant: 'test',
                    environment: 'test',
                    feed: null,
                    id: 'f5087d5d26aeff90cc92c738a10d8bba',
                    properties: { name: 'Eavy Machine', url: 'eavy.corp.redhat.com' },
                    type: { tenant: 'test', id: 'EAP', version: '1.0', properties: {} },
                    state: 'Running',
                    alerts: ['SLOW'],
                    tags: ['Production']
                },
                {
                    tenant: 'test',
                    environment: 'test',
                    feed: null,
                    id: '5c4785a7a304d32e5f404242666895f5',
                    properties: { name: 'Tori Machine', url: 'tori.corp.redhat.com' },
                    type: { tenant: 'test', id: 'Tomcat', version: '1.0', properties: {} },
                    state: 'Running',
                    alerts: [],
                    tags: ['Development']
                },
                {
                    tenant: 'test',
                    environment: 'test',
                    feed: null,
                    id: '21193e7941642baa1285cd7edd8af62e',
                    properties: { name: 'Wiko Machine', url: 'wiko.corp.redhat.com' },
                    type: { tenant: 'test', id: 'Wildfly', version: '1.0', properties: {} },
                    state: 'Failed',
                    alerts: ['DOWN'],
                    tags: []
                },
                {
                    tenant: 'test',
                    environment: 'test',
                    feed: null,
                    id: '20a0e9f5d777a16ad40928dd3ba1bef9',
                    properties: { name: 'Tomy Machine', url: 'tomy.corp.redhat.com' },
                    type: { tenant: 'test', id: 'Tomcat', version: '1.0', properties: {} },
                    state: 'Stopped',
                    alerts: [],
                    tags: ['QE']
                }
            ];
        };
        AppServerDetailsController.$inject = ['$location', '$scope', '$rootScope', '$interval', '$log', '$filter', '$modal', 'HawkularInventory', 'HawkularMetric', 'HawkularAlert', 'HawkularAlertsManager', 'HawkularErrorManager', '$q', 'md5'];
        return AppServerDetailsController;
    })();
    HawkularMetrics.AppServerDetailsController = AppServerDetailsController;
    HawkularMetrics._module.controller('HawkularMetrics.AppServerDetailsController', AppServerDetailsController);
})(HawkularMetrics || (HawkularMetrics = {}));

var HawkularMetrics;
(function (HawkularMetrics) {
    var AppServerListController = (function () {
        function AppServerListController($location, $scope, $rootScope, $interval, $log, $filter, $modal, HawkularInventory, HawkularMetric, HawkularAlert, HawkularAlertsManager, HawkularErrorManager, $q, md5, startTimeStamp, endTimeStamp, resourceUrl) {
            this.$location = $location;
            this.$scope = $scope;
            this.$rootScope = $rootScope;
            this.$interval = $interval;
            this.$log = $log;
            this.$filter = $filter;
            this.$modal = $modal;
            this.HawkularInventory = HawkularInventory;
            this.HawkularMetric = HawkularMetric;
            this.HawkularAlert = HawkularAlert;
            this.HawkularAlertsManager = HawkularAlertsManager;
            this.HawkularErrorManager = HawkularErrorManager;
            this.$q = $q;
            this.md5 = md5;
            this.startTimeStamp = startTimeStamp;
            this.endTimeStamp = endTimeStamp;
            this.resourceUrl = resourceUrl;
            this.httpUriPart = 'http://';
            this.addProgress = false;
            this.resPerPage = 5;
            this.resCurPage = 0;
            $scope.vm = this;
            this.startTimeStamp = +moment().subtract(1, 'hours');
            this.endTimeStamp = +moment();
            this.resourceUrl = this.httpUriPart;
            this.getResourceList();
            this.autoRefresh(20);
        }
        AppServerListController.prototype.cancelAutoRefresh = function () {
            this.$interval.cancel(this.autoRefreshPromise);
            toastr.info('Canceling Auto Refresh');
        };
        AppServerListController.prototype.autoRefresh = function (intervalInSeconds) {
            var _this = this;
            this.autoRefreshPromise = this.$interval(function () {
                _this.getResourceList();
            }, intervalInSeconds * 1000);
            this.$scope.$on('$destroy', function () {
                _this.$interval.cancel(_this.autoRefreshPromise);
            });
        };
        AppServerListController.prototype.getResourceList = function () {
            this.resourceList = [
                {
                    tenant: 'test',
                    environment: 'test',
                    feed: null,
                    id: 'f5087d5d26aeff90cc92c738a10d8bba',
                    properties: { name: 'Eavy Machine', url: 'eavy.corp.redhat.com' },
                    type: { tenant: 'test', id: 'EAP', version: '1.0', properties: {} },
                    state: 'Running',
                    alerts: ['SLOW'],
                    tags: ['Production']
                },
                {
                    tenant: 'test',
                    environment: 'test',
                    feed: null,
                    id: '5c4785a7a304d32e5f404242666895f5',
                    properties: { name: 'Tori Machine', url: 'tori.corp.redhat.com' },
                    type: { tenant: 'test', id: 'Tomcat', version: '1.0', properties: {} },
                    state: 'Running',
                    alerts: [],
                    tags: ['Development']
                },
                {
                    tenant: 'test',
                    environment: 'test',
                    feed: null,
                    id: '21193e7941642baa1285cd7edd8af62e',
                    properties: { name: 'Wiko Machine', url: 'wiko.corp.redhat.com' },
                    type: { tenant: 'test', id: 'Wildfly', version: '1.0', properties: {} },
                    state: 'Failed',
                    alerts: ['DOWN'],
                    tags: []
                },
                {
                    tenant: 'test',
                    environment: 'test',
                    feed: null,
                    id: '20a0e9f5d777a16ad40928dd3ba1bef9',
                    properties: { name: 'Tomy Machine', url: 'tomy.corp.redhat.com' },
                    type: { tenant: 'test', id: 'Tomcat', version: '1.0', properties: {} },
                    state: 'Stopped',
                    alerts: [],
                    tags: ['QE']
                }
            ];
        };
        AppServerListController.$inject = ['$location', '$scope', '$rootScope', '$interval', '$log', '$filter', '$modal', 'HawkularInventory', 'HawkularMetric', 'HawkularAlert', 'HawkularAlertsManager', 'HawkularErrorManager', '$q', 'md5'];
        return AppServerListController;
    })();
    HawkularMetrics.AppServerListController = AppServerListController;
    HawkularMetrics._module.controller('HawkularMetrics.AppServerListController', AppServerListController);
})(HawkularMetrics || (HawkularMetrics = {}));

var HawkularMetrics;
(function (HawkularMetrics) {
})(HawkularMetrics || (HawkularMetrics = {}));

var HawkularMetrics;
(function (HawkularMetrics) {
    var MetricsAvailabilityController = (function () {
        function MetricsAvailabilityController($scope, $interval, $log, HawkularMetric, HawkularAlert, $routeParams, alertList, startTimeStamp, endTimeStamp) {
            var _this = this;
            this.$scope = $scope;
            this.$interval = $interval;
            this.$log = $log;
            this.HawkularMetric = HawkularMetric;
            this.HawkularAlert = HawkularAlert;
            this.$routeParams = $routeParams;
            this.alertList = alertList;
            this.startTimeStamp = startTimeStamp;
            this.endTimeStamp = endTimeStamp;
            this.availabilityDataPoints = [];
            this.uptimeRatio = 0;
            this.downtimeDuration = 0;
            this.downtimeCount = 0;
            this.empty = true;
            $scope.vm = this;
            this.math = window.Math;
            this.startTimeStamp = +moment().subtract(1, 'hours');
            this.endTimeStamp = +moment();
            this.resourceId = $scope.hkParams.resourceId;
            $scope.$watch('hkParams.resourceId', function (resourceId) {
                if (resourceId) {
                    _this.resourceId = resourceId;
                    _this.refreshAvailPageNow(_this.getResourceId());
                }
            });
            $scope.$on('RefreshAvailabilityChart', function (event) {
                _this.refreshAvailPageNow(_this.getResourceId());
            });
            this.autoRefreshAvailability(20);
        }
        MetricsAvailabilityController.prototype.refreshAvailPageNow = function (resourceId, startTime) {
            this.$scope.hkEndTimestamp = +moment();
            var adjStartTimeStamp = +moment().subtract(this.$scope.hkParams.timeOffset, 'milliseconds');
            this.endTimeStamp = this.$scope.hkEndTimestamp;
            if (resourceId) {
                this.refreshSummaryAvailabilityData(resourceId, startTime ? startTime : adjStartTimeStamp, this.endTimeStamp);
                this.refreshAvailDataForTimestamp(resourceId, startTime ? startTime : adjStartTimeStamp, this.endTimeStamp);
                this.refreshAlerts(resourceId, startTime ? startTime : adjStartTimeStamp, this.endTimeStamp);
            }
        };
        MetricsAvailabilityController.prototype.cancelAutoRefresh = function () {
            this.$interval.cancel(this.autoRefreshPromise);
            toastr.info('Canceling Auto Refresh Availability');
        };
        MetricsAvailabilityController.prototype.autoRefreshAvailability = function (intervalInSeconds) {
            var _this = this;
            this.endTimeStamp = this.$scope.hkEndTimestamp;
            this.startTimeStamp = this.$scope.hkStartTimestamp;
            this.refreshAvailPageNow(this.getResourceId());
            this.autoRefreshPromise = this.$interval(function () {
                console.info('Autorefresh Availabilty for: ' + _this.getResourceId());
                _this.$scope.hkEndTimestamp = +moment();
                _this.endTimeStamp = _this.$scope.hkEndTimestamp;
                _this.$scope.hkStartTimestamp = +moment().subtract(_this.$scope.hkParams.timeOffset, 'milliseconds');
                _this.startTimeStamp = _this.$scope.hkStartTimestamp;
                _this.refreshAvailPageNow(_this.getResourceId());
            }, intervalInSeconds * 1000);
            this.$scope.$on('$destroy', function () {
                _this.$interval.cancel(_this.autoRefreshPromise);
            });
        };
        MetricsAvailabilityController.prototype.noDataFoundForId = function (id) {
            this.$log.warn('No Data found for id: ' + id);
        };
        MetricsAvailabilityController.prototype.refreshSummaryAvailabilityData = function (metricId, startTime, endTime) {
            var _this = this;
            if (metricId) {
                this.HawkularMetric.AvailabilityMetricData.query({
                    tenantId: HawkularMetrics.globalTenantId,
                    availabilityId: metricId,
                    start: startTime,
                    end: endTime,
                    buckets: 1
                }).$promise.then(function (availResponse) {
                    console.info("Avail Summary:");
                    console.dir(availResponse);
                    if (availResponse && !_.last(availResponse).empty) {
                        _this.uptimeRatio = _.last(availResponse).uptimeRatio;
                        _this.downtimeDuration = Math.round(_.last(availResponse).downtimeDuration);
                        _this.lastDowntime = new Date(_.last(availResponse).lastDowntime);
                        _this.downtimeCount = _.last(availResponse).downtimeCount;
                        _this.empty = _.last(availResponse).empty;
                    }
                }, function (error) {
                    _this.$log.error('Error Loading Avail Summary data');
                    toastr.error('Error Loading Avail Summary Data: ' + error);
                });
            }
        };
        MetricsAvailabilityController.prototype.getResourceId = function () {
            return this.resourceId;
        };
        MetricsAvailabilityController.prototype.refreshAvailDataForTimestamp = function (metricId, startTime, endTime) {
            var _this = this;
            if (metricId) {
                this.HawkularMetric.AvailabilityMetricData.query({
                    tenantId: HawkularMetrics.globalTenantId,
                    availabilityId: metricId,
                    start: startTime,
                    end: endTime,
                    distinct: true
                }).$promise.then(function (response) {
                    console.log("Availability Data: ");
                    console.dir(response);
                    _this.availabilityDataPoints = response;
                }, function (error) {
                    _this.$log.error('Error Loading Avail data');
                    toastr.error('Error Loading Avail Data: ' + error);
                });
            }
        };
        MetricsAvailabilityController.prototype.refreshAlerts = function (metricId, startTime, endTime) {
            var _this = this;
            var alertType = this.$routeParams.resourceId + '_trigger_thres';
            this.HawkularAlert.Alert.query({}, function (anAlertList) {
                var filteredAlerts = [];
                for (var i = 0; i < anAlertList.length; i++) {
                    if ((anAlertList[i].triggerId === alertType) && (anAlertList[i].ctime >= (+moment() - _this.$scope.hkParams.timeOffset))) {
                        anAlertList[i].evalSets.splice(1);
                        filteredAlerts.push(anAlertList[i]);
                    }
                }
                _this.alertList = filteredAlerts.reverse();
            }, this);
        };
        MetricsAvailabilityController.$inject = ['$scope', '$interval', '$log', 'HawkularMetric', 'HawkularAlert', '$routeParams'];
        return MetricsAvailabilityController;
    })();
    HawkularMetrics.MetricsAvailabilityController = MetricsAvailabilityController;
    HawkularMetrics._module.controller('MetricsAvailabilityController', MetricsAvailabilityController);
})(HawkularMetrics || (HawkularMetrics = {}));

var HawkularMetrics;
(function (HawkularMetrics) {
    var QuickAlertController = (function () {
        function QuickAlertController($scope, HawkularAlert, $log, $q) {
            var _this = this;
            this.$scope = $scope;
            this.HawkularAlert = HawkularAlert;
            this.$log = $log;
            this.$q = $q;
            this.PROMISE_BREAK = 'magicValue1234';
            this.$scope.showQuickAlert = false;
            this.$scope.quickTrigger = {
                operator: 'LT',
                threshold: 0
            };
            this.$scope.$watch('hkParams.resourceId', function (resourceId) {
                if (resourceId) {
                    _this.metricId = resourceId;
                }
            });
            this.allActions();
        }
        QuickAlertController.prototype.toggleQuickAlert = function () {
            this.$scope.showQuickAlert = !this.$scope.showQuickAlert;
        };
        QuickAlertController.prototype.allActions = function () {
            var _this = this;
            this.$scope.actions = [];
            this.HawkularAlert.Action.query(function (result) {
                _this.$scope.actions = result;
            }, function (error) {
                _this.errorToastr(error, 'Error loading Alerts Notifiers:');
            });
        };
        QuickAlertController.prototype.errorToastr = function (error, errorMsg) {
            var errorMsgComplete;
            if (error.data && error.data.errorMsg) {
                errorMsgComplete = error.data.errorMsg;
            }
            else {
                errorMsgComplete = errorMsg + ' ' + error;
            }
            this.$log.error(errorMsgComplete);
            toastr.error(errorMsgComplete);
        };
        QuickAlertController.prototype.errorHandler = function (error, msg) {
            if (error !== this.PROMISE_BREAK) {
                this.errorToastr(error, msg);
            }
            return this.$q.reject(this.PROMISE_BREAK);
        };
        QuickAlertController.prototype.saveQuickAlert = function () {
            var _this = this;
            if (this.metricId !== '.status.duration' && this.metricId !== '.status.code') {
                var newTrigger = {};
                newTrigger.name = this.metricId + 'ResponseTime' + '-' + this.$scope.quickTrigger.operator + '-' + this.$scope.quickTrigger.threshold;
                newTrigger.description = 'Created on ' + new Date();
                newTrigger.firingMatch = 'ALL';
                newTrigger.safetyMatch = 'ALL';
                newTrigger.enabled = true;
                newTrigger.safetyEnabled = false;
                newTrigger.actions = this.$scope.quickTrigger.actions;
                var newDampening = {
                    triggerId: '',
                    type: 'RELAXED_COUNT',
                    evalTrueSetting: 1,
                    evalTotalSetting: 1,
                    evalTimeSetting: 0
                };
                this.HawkularAlert.Trigger.save(newTrigger).$promise.then(function (trigger) {
                    _this.$log.debug('Success Trigger save');
                    newDampening.triggerId = trigger.id;
                    return _this.HawkularAlert.Dampening.save({ triggerId: newDampening.triggerId }, newDampening).$promise;
                }, function (error) {
                    return _this.errorHandler(error, 'Error saving Trigger');
                }).then(function (dampening) {
                    _this.$log.debug('Success Dampening save', dampening);
                    var newThresholdCondition = {
                        triggerId: dampening.triggerId,
                        type: 'THRESHOLD',
                        dataId: _this.metricId,
                        operator: _this.$scope.quickTrigger.operator,
                        threshold: _this.$scope.quickTrigger.threshold
                    };
                    return _this.HawkularAlert.Condition.save({ triggerId: newThresholdCondition.triggerId }, newThresholdCondition).$promise;
                }, function (errorDampening) {
                    return _this.errorHandler(errorDampening, 'Error saving Trigger');
                }).then(function () {
                    _this.$log.debug('Success ThresholdCondition save');
                    _this.$log.debug('Alert Created!');
                    toastr.success('Alert Created!');
                    _this.toggleQuickAlert();
                    return _this.HawkularAlert.Alert.reload().$promise;
                }, function (errorCondition) {
                    return _this.errorHandler(errorCondition, 'Error saving Trigger Condition');
                }).then(angular.noop, function (errorReload) {
                    return _this.errorHandler(errorReload, 'Error reloading Alerts');
                }).catch(function (error) {
                    _this.errorHandler(error, 'Error:');
                });
            }
            else {
                this.$log.debug('No metric selected');
                toastr.warning('No metric selected');
            }
        };
        QuickAlertController.$inject = ['$scope', 'HawkularAlert', '$log', '$q'];
        return QuickAlertController;
    })();
    HawkularMetrics.QuickAlertController = QuickAlertController;
    HawkularMetrics._module.controller('QuickAlertController', QuickAlertController);
})(HawkularMetrics || (HawkularMetrics = {}));

var HawkularMetrics;
(function (HawkularMetrics) {
    var MetricsViewController = (function () {
        function MetricsViewController($scope, $rootScope, $interval, $log, HawkularMetric, HawkularAlert, $routeParams, alertList, startTimeStamp, endTimeStamp) {
            var _this = this;
            this.$scope = $scope;
            this.$rootScope = $rootScope;
            this.$interval = $interval;
            this.$log = $log;
            this.HawkularMetric = HawkularMetric;
            this.HawkularAlert = HawkularAlert;
            this.$routeParams = $routeParams;
            this.alertList = alertList;
            this.startTimeStamp = startTimeStamp;
            this.endTimeStamp = endTimeStamp;
            this.bucketedDataPoints = [];
            this.contextDataPoints = [];
            this.threshold = 5000;
            this.median = 0;
            this.percentile95th = 0;
            this.average = 0;
            $scope.vm = this;
            this.math = window.Math;
            this.startTimeStamp = moment().subtract(1, 'hours').valueOf();
            this.endTimeStamp = +moment();
            this.resourceId = $scope.hkParams.resourceId;
            $scope.$on('RefreshChart', function (event) {
                _this.refreshChartDataNow(_this.getMetricId());
            });
            $scope.$watch('hkParams.resourceId', function (resourceId) {
                if (resourceId) {
                    _this.resourceId = resourceId;
                    _this.refreshChartDataNow(_this.getMetricId());
                }
            });
            this.autoRefresh(20);
        }
        MetricsViewController.prototype.cancelAutoRefresh = function () {
            this.$interval.cancel(this.autoRefreshPromise);
            toastr.info('Canceling Auto Refresh');
        };
        MetricsViewController.prototype.autoRefresh = function (intervalInSeconds) {
            var _this = this;
            this.autoRefreshPromise = this.$interval(function () {
                _this.$scope.hkEndTimestamp = +moment();
                _this.endTimeStamp = _this.$scope.hkEndTimestamp;
                _this.$scope.hkStartTimestamp = moment().subtract(_this.$scope.hkParams.timeOffset, 'milliseconds').valueOf();
                _this.startTimeStamp = _this.$scope.hkStartTimestamp;
                _this.refreshSummaryData(_this.getMetricId());
                _this.refreshHistoricalChartDataForTimestamp(_this.getMetricId());
                _this.retrieveThreshold();
            }, intervalInSeconds * 1000);
            this.$scope.$on('$destroy', function () {
                _this.$interval.cancel(_this.autoRefreshPromise);
            });
        };
        MetricsViewController.prototype.noDataFoundForId = function (resourceId) {
            this.$log.warn('No Data found for id: ' + resourceId);
        };
        MetricsViewController.prototype.refreshChartDataNow = function (metricId, startTime) {
            this.$scope.hkEndTimestamp = +moment();
            var adjStartTimeStamp = moment().subtract(this.$scope.hkParams.timeOffset, 'milliseconds').valueOf();
            this.endTimeStamp = this.$scope.hkEndTimestamp;
            this.refreshSummaryData(metricId, startTime ? startTime : adjStartTimeStamp, this.endTimeStamp);
            this.refreshHistoricalChartDataForTimestamp(metricId, !startTime ? adjStartTimeStamp : startTime, this.endTimeStamp);
            this.refreshAlerts(metricId, startTime ? startTime : adjStartTimeStamp, this.endTimeStamp);
            this.retrieveThreshold();
        };
        MetricsViewController.prototype.getMetricId = function () {
            return this.resourceId + '.status.duration';
        };
        MetricsViewController.prototype.retrieveThreshold = function () {
            var _this = this;
            this.HawkularAlert.Condition.query({ triggerId: this.$routeParams.resourceId + '_trigger_thres' }).$promise.then(function (response) {
                if (response[0]) {
                    _this.threshold = response[0].threshold;
                }
            }, function (error) {
                _this.$log.error('Error Loading Threshold data');
                toastr.error('Error Loading Threshold Data: ' + error);
            });
        };
        MetricsViewController.prototype.refreshAlerts = function (metricId, startTime, endTime) {
            var _this = this;
            var alertType = this.$routeParams.resourceId + '_trigger_thres';
            this.HawkularAlert.Alert.query({}, function (anAlertList) {
                var filteredAlerts = [];
                for (var i = 0; i < anAlertList.length; i++) {
                    if ((anAlertList[i].triggerId === alertType) && (anAlertList[i].ctime >= (+moment() - _this.$scope.hkParams.timeOffset))) {
                        anAlertList[i].evalSets.splice(1);
                        filteredAlerts.push(anAlertList[i]);
                    }
                }
                _this.alertList = filteredAlerts.reverse();
            }, this);
        };
        MetricsViewController.prototype.refreshSummaryData = function (metricId, startTime, endTime) {
            var _this = this;
            var dataPoints;
            if (!endTime) {
                endTime = this.endTimeStamp;
            }
            if (!startTime) {
                startTime = this.startTimeStamp;
            }
            if (metricId) {
                this.HawkularMetric.NumericMetricData.queryMetrics({
                    tenantId: HawkularMetrics.globalTenantId,
                    numericId: metricId,
                    start: startTime,
                    end: endTime,
                    buckets: 1
                }).$promise.then(function (response) {
                    dataPoints = _this.formatBucketedChartOutput(response);
                    console.dir(dataPoints);
                    _this.median = Math.round(_.last(dataPoints).median);
                    _this.percentile95th = Math.round(_.last(dataPoints).percentile95th);
                    _this.average = Math.round(_.last(dataPoints).avg);
                }, function (error) {
                    _this.$log.error('Error Loading Chart data');
                    toastr.error('Error Loading Chart Data: ' + error);
                });
            }
        };
        MetricsViewController.prototype.refreshHistoricalChartDataForTimestamp = function (metricId, startTime, endTime) {
            var _this = this;
            if (!endTime) {
                endTime = this.endTimeStamp;
            }
            if (!startTime) {
                startTime = this.startTimeStamp;
            }
            if (metricId) {
                this.HawkularMetric.NumericMetricData.queryMetrics({
                    tenantId: HawkularMetrics.globalTenantId,
                    numericId: metricId,
                    start: startTime,
                    end: endTime,
                    buckets: 120
                }).$promise.then(function (response) {
                    _this.bucketedDataPoints = _this.formatBucketedChartOutput(response);
                    console.dir(_this.bucketedDataPoints);
                    if (_this.bucketedDataPoints.length) {
                        _this.chartData = {
                            id: metricId,
                            startTimeStamp: startTime,
                            endTimeStamp: endTime,
                            dataPoints: _this.bucketedDataPoints,
                            contextDataPoints: _this.contextDataPoints,
                            annotationDataPoints: []
                        };
                    }
                    else {
                        _this.noDataFoundForId(metricId);
                    }
                }, function (error) {
                    _this.$log.error('Error Loading Chart data');
                    toastr.error('Error Loading Chart Data: ' + error);
                });
            }
        };
        MetricsViewController.prototype.formatBucketedChartOutput = function (response) {
            return _.map(response, function (point) {
                return {
                    timestamp: point.start,
                    date: new Date(point.start),
                    value: !angular.isNumber(point.value) ? 0 : point.value,
                    avg: (point.empty) ? 0 : point.avg,
                    min: !angular.isNumber(point.min) ? 0 : point.min,
                    max: !angular.isNumber(point.max) ? 0 : point.max,
                    percentile95th: !angular.isNumber(point.percentile95th) ? 0 : point.percentile95th,
                    median: !angular.isNumber(point.median) ? 0 : point.median,
                    empty: point.empty
                };
            });
        };
        MetricsViewController.$inject = ['$scope', '$rootScope', '$interval', '$log', 'HawkularMetric', 'HawkularAlert', '$routeParams'];
        return MetricsViewController;
    })();
    HawkularMetrics.MetricsViewController = MetricsViewController;
    HawkularMetrics._module.controller('MetricsViewController', MetricsViewController);
})(HawkularMetrics || (HawkularMetrics = {}));

angular.module("hawkular-ui-components-metrics-templates", []).run(["$templateCache", function($templateCache) {$templateCache.put("plugins/metrics/html/add-url.html","<div ng-controller=\"HawkularMetrics.AddUrlController as vm\">\n  <div ng-class=\"{\'fade-in\': vm.resourceList.length === 0}\">\n    <h1 class=\"text-center\">Hello {{userDetails.firstName}}!</h1>\n    <i class=\"fa fa-line-chart\" ng-show=\"vm.resourceList.length === 0\"></i>\n    <h2 ng-show=\"vm.resourceList.length === 0\">Collect metrics from a website that you want to monitor.</h2>\n    <form class=\"form-horizontal add-url\" name=\"addUrlForm\" role=\"form\" novalidate ng-submit=\"vm.addUrl(vm.resourceUrl)\">\n      <div class=\"form-group input\">\n        <div class=\"col-lg-6 col-sm-8 col-xs-12 align-center\">\n          <div class=\"input-group input-group-lg\">\n            <input type=\"url\" class=\"form-control\" name=\"resourceUrl\" ng-model=\"vm.resourceUrl\"\n                   ng-model-options=\"{ updateOn: \'default blur\'}\"\n                   placeholder=\"Enter a website URL (e.g.: http://www.website.com)\" required>\n            <span class=\"input-group-btn\">\n              <button class=\"btn btn-primary\" class=\"btn-lg\" type=\"submit\" ng-disabled=\"addUrlForm.$invalid || vm.addProgress\">\n               <div ng-show=\"vm.addProgress\" class=\"spinner spinner-sm\"></div>\n              Add URL\n              </button>\n            </span>\n          </div>\n          <span class=\"help-block\"\n                  ng-show=\"addUrlForm.resourceUrl.$dirty && addUrlForm.resourceUrl.$invalid\">The URL you entered is not valid. Please enter a valid URL.</span>\n\n        </div>\n      </div>\n    </form>\n  </div>\n\n  <div class=\"row urls-list-labels\" ng-show=\"vm.resourceList.length > 0\">\n    <div class=\"col-md-4 text-left\">\n      <button class=\"btn btn-link\" tooltip=\"Sort\" tooltip-trigger tooltip-placement=\"top\" ng-click=\"vm.reverse = !vm.reverse\">\n        URL <i class=\"fa\" ng-class=\"vm.reverse ? \'fa-angle-up\' : \'fa-angle-down\'\"></i>\n      </button>\n    </div>\n    <div class=\"col-md-4\">\n      Current Response Time\n    </div>\n    <div class=\"col-md-4\">\n      Current Availability\n    </div>\n  </div>\n\n  <div class=\"panel panel-default summary url-info\" ng-repeat=\"res in vm.resourceList | orderBy:\'properties.url\':vm.reverse\">\n    <div class=\"row row-table\">\n      <div class=\"col-md-4 summary-item\">\n        <span class=\"url-link\"><a href=\"/hawkular-ui/url/availability/{{res.id}}\">{{res.properties.url}}</a><i class=\"fa fa-flag\" tooltip=\"Some alert happened\" tooltip-trigger tooltip-placement=\"top\" ng-show=\"(vm.alertList|filter:{triggerId: (res.id + \'_trigger\')}).length > 0\"></i></span>\n        <button class=\"btn btn-link delete\" tooltip=\"Remove\" tooltip-trigger tooltip-placement=\"top\" ng-click=\"vm.deleteResource(res)\"><i class=\"fa fa-trash-o\"></i></button>\n        <button class=\"btn btn-link trigger\" ng-show=\"res.responseTime.length > 0\" tooltip=\"Expand/collapse\" tooltip-trigger tooltip-placement=\"top\" ng-click=\"vm.resourceList.expanded[res.id] = !vm.resourceList.expanded[res.id]\"><i class=\"fa\" ng-class=\"vm.resourceList.expanded[res.id] ? \'fa-minus-square-o\' : \'fa-plus-square-o\'\"></i>Last 24 hours</button>\n      </div>\n      <div class=\"col-md-4 summary-item\">\n        <span class=\"data\" ng-show=\"res.responseTime.length > 0\">{{res.responseTime[0].value}} <span>ms</span></span>\n        <span class=\"data spinner\" ng-hide=\"res.responseTime.length > 0\" popover=\"Your data is being collected. You should see something in a few seconds.\" popover-trigger=\"mouseenter\" popover-placement=\"bottom\"></span>\n      </div>\n      <div class=\"col-md-4 summary-item\">\n        <span class=\"data\" ng-show=\"res.responseTime.length > 0\"><i class=\"fa \" ng-class=\"res.isUp ? \'fa-arrow-up\' : \'fa-arrow-down\'\"></i>{{res.isUp ? \'Up\' : \'Down\'}}</span>\n        <span class=\"data spinner\" ng-hide=\"res.responseTime.length > 0\" popover=\"Your data is being collected. You should see something in a few seconds.\" popover-trigger=\"mouseenter\" popover-placement=\"bottom\"></span>\n        <span class=\"time\" tooltip=\"Last update\" tooltip-trigger tooltip-placement=\"top\"><i class=\"fa fa-clock-o\"></i>{{res.updateTime| date:\"HH:mm\" }}</span>\n      </div>\n    </div>\n    <hr>\n    <div class=\"row row-table panel-expanded-content\" ng-show=\"vm.resourceList.expanded[res.id]\">\n      <div class=\"col-md-4 summary-item text-left\">\n        <ul class=\"list-unstyled alert-status\" ng-hide=\"(vm.alertList|filter:{triggerId: (res.id + \'_trigger\')}).length === 0\">\n          <li ng-repeat=\"alert in (vm.alertList|filter:{triggerId: (res.id + \'_trigger\')}).slice().reverse() | limitTo:3 track by $index\">\n            <i class=\"fa fa-flag\"></i>{{alert.evalSets[0][0].dataTimestamp|date:\'hh:mm a\'}}: <span ng-if=\"alert.evalSets[0][0].condition.type==\'AVAILABILITY\'\"><strong>server down</strong></span><span ng-if=\"alert.evalSets[0][0].condition.type==\'THRESHOLD\'\"><strong>high response time</strong> ({{alert.evalSets[0][0].value}}ms)</span>\n          </li>\n        </ul>\n        <span class=\"no-alerts\" ng-show=\"(vm.alertList|filter:{triggerId: (res.id + \'_trigger\')}).length === 0\">No alerts.</span>\n        <a href=\"/hawkular-ui/url/alerts/{{res.id}}\" class=\"bottom-area\" ng-show=\"(vm.alertList|filter:{triggerId: (res.id + \'_trigger\')}).length > 0\">View All Alerts ({{(vm.alertList|filter:{triggerId: (res.id + \'_trigger\')}).length}})</a>\n      </div>\n      <div class=\"col-md-4 summary-item\">\n        <!--<div id=\"metrics-chart\" class=\"top-area\" style=\"height: 44px; width: 237px;\">-->\n          <!--<hawkular-chart data=\"{{res.responseTime}}\" chart-type=\"line\" chart-height=\"44\" chart-width=\"237\"></hawkular-chart>-->\n        <!--</div>-->\n        <div class=\"bottom-area\">\n          <span class=\"data\">{{vm.getAverage(res.responseTime, \'value\')}} <span>ms</span></span>\n          <span class=\"item\">Average Response Time</span>\n        </div>\n      </div>\n      <div class=\"col-md-4 summary-item\">\n        <span class=\"time\"><i class=\"fa fa-clock-o\"></i>Last 24 hours</span>\n        <div class=\"top-area\">\n          <span class=\"data\" ng-show=\"res.availability === 100\"><i class=\"fa fa-arrow-up\"></i>Always Up</span>\n          <span class=\"data\" ng-hide=\"res.availability === 100\"><i class=\"fa fa-arrow-down\"></i>Down {{res.downTime / 3 | number:0}} min</span>\n        </div>\n        <div class=\"bottom-area\">\n          <span class=\"data\" ng-hide=\"res.availability === 100\">{{res.availability | number:3}} <span>%</span></span>\n          <span class=\"data\" ng-show=\"res.availability === 100\">{{res.availability}} <span>%</span></span>\n          <span class=\"item\">Availability</span>\n        </div>\n      </div>\n    </div>\n  </div>\n  <ul class=\"pagination pull-right\" ng-show=\"vm.resourceList.length > 0\">\n    <li>\n      <a href=\"#\" ng-click=\"vm.setPage(vm.resCurPage-1)\">\n        <span class=\"i fa fa-angle-left\"></span>\n      </a>\n    </li>\n    <li ng-class=\"{\'active\' : vm.resCurPage === 0}\"><a href=\"#\" ng-click=\"vm.setPage(0)\">1</a></li>\n    <li ng-class=\"{\'active\' : vm.resCurPage === 1}\"><a href=\"#\" ng-click=\"vm.setPage(1)\">2</a></li>\n    <li ng-class=\"{\'active\' : vm.resCurPage === 2}\"><a href=\"#\" ng-click=\"vm.setPage(2)\">3</a></li>\n    <li ng-class=\"{\'active\' : vm.resCurPage === 3}\"><a href=\"#\" ng-click=\"vm.setPage(3)\">4</a></li>\n    <li ng-class=\"{\'active\' : vm.resCurPage === 4}\"><a href=\"#\" ng-click=\"vm.setPage(4)\">5</a></li>\n    <li>\n      <a href=\"#\" ng-click=\"vm.setPage(vm.resCurPage+1)\">\n        <span class=\"i fa fa-angle-right\"></span>\n      </a>\n    </li>\n  </ul>\n</div>\n");
$templateCache.put("plugins/metrics/html/alerts-setup.html","<div class=\"modal-header\">\n  <button type=\"button\" class=\"close\" ng-click=\"mas.cancel()\">\n    <span class=\"pficon pficon-close\"></span>\n  </button>\n  <h4 class=\"modal-title\">Alert Settings</h4>\n</div>\n<div class=\"modal-body alert-settings\">\n  <form class=\"form-horizontal\" name=\"mas.alertsSetup\">\n    <fieldset>\n      <legend>Contact</legend>\n      <p>Receive email notifications in the following address when the alert conditions are met.</p>\n      <div class=\"form-group\">\n        <label class=\"col-md-3 control-label\" for=\"email\">Email</label>\n        <div class=\"col-md-6\">\n          <input type=\"text\" id=\"email\" class=\"form-control\"  ng-model=\"mas.trigger_thres.actions[0]\"\n                 ng-change=\"mas.alertSettingTouch()\">\n          <span class=\"help-block\">Send alerts to this email address.</span>\n        </div>\n      </div>\n    </fieldset>\n    <fieldset>\n      <legend>Response Time</legend>\n      <div class=\"form-group onffswitch-form-group\">\n        <label class=\"col-md-3 control-label\" for=\"trigger_thres.enabled\">Status</label>\n        <div class=\"onoffswitch-container\">\n          <div class=\"onoffswitch\">\n            <input type=\"checkbox\" id=\"trigger_thres.enabled\" class=\"onoffswitch-checkbox\"\n                   ng-model=\"mas.trigger_thres.enabled\" ng-change=\"mas.alertSettingTouch()\">\n            <label class=\"onoffswitch-label\" for=\"trigger_thres.enabled\">\n              <span class=\"onoffswitch-inner\">\n                <span class=\"onoffswitch-active ng-binding\">ON</span>\n                <span class=\"onoffswitch-inactive ng-binding\">OFF</span>\n              </span>\n              <span class=\"onoffswitch-switch\"></span>\n            </label>\n          </div>\n        </div>\n      </div>\n      <div ng-show=\"mas.trigger_thres.enabled\">\n        <div class=\"form-group\">\n          <label class=\"col-md-3 control-label\" for=\"time\">Time (maximum)</label>\n          <div class=\"col-md-9 inline-row\">\n            <div class=\"input-group input-addon\">\n              <input type=\"number\" class=\"form-control\" placeholder=\"Time\" id=\"time\"\n                     ng-model=\"mas.trigger_thres_cond[0].threshold\" ng-change=\"mas.alertSettingTouch()\">\n              <span class=\"input-group-addon\">miliseconds</span>\n            </div>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-md-3 control-label\">Notification Rate</label>\n          <div class=\"col-md-9\">\n            <div class=\"radio\">\n              <label>\n                <input type=\"radio\" name=\"notification\" id=\"every-time\" ng-value=\"false\"\n                       ng-change=\"mas.alertSettingTouch()\"\n                       ng-model=\"mas.thresDampDurationEnabled\" ng-click=\"mas.disableDuration()\" checked=\"\">\n                Every time the maximum time is exceeded.\n              </label>\n            </div>\n            <div class=\"radio\">\n              <label>\n                <input type=\"radio\" name=\"notification\" id=\"greater-time\" ng-value=\"true\"\n                       ng-change=\"mas.alertSettingTouch()\"\n                       ng-model=\"mas.thresDampDurationEnabled\" ng-click=\"mas.enableDuration()\" >\n                Only when exceeded for greater than\n              </label>\n            </div>\n            <div class=\"input-group input-select indented\">\n              <input type=\"number\" class=\"form-control\" placeholder=\"Duration\" ng-model=\"mas.responseDuration\"\n                     ng-disabled=\"!mas.thresDampDurationEnabled\" ng-change=\"mas.alertSettingTouch()\">\n              <select pf-select ng-model=\"mas.responseUnit\" id=\"responseUnit\"\n                      ng-disabled=\"!mas.thresDampDurationEnabled\"\n                      ng-options=\"item.value as item.label for item in mas.timeUnits\"\n                      ng-change=\"mas.changeResponseTimeUnits()\"></select>\n            </div>\n          </div>\n        </div>\n      </div>\n    </fieldset>\n    <fieldset>\n      <legend>Downtime</legend>\n      <div class=\"form-group onffswitch-form-group\">\n        <label class=\"col-md-3 control-label\" for=\"trigger_avail.enabled\">Status</label>\n        <div class=\"onoffswitch-container\">\n          <div class=\"onoffswitch\">\n            <input type=\"checkbox\" id=\"trigger_avail.enabled\" name=\"trigger_avail.enabled\" class=\"onoffswitch-checkbox\"\n                   ng-model=\"mas.trigger_avail.enabled\" ng-change=\"mas.alertSettingTouch()\">\n            <label class=\"onoffswitch-label\" for=\"trigger_avail.enabled\">\n              <span class=\"onoffswitch-inner\">\n                <span class=\"onoffswitch-active ng-binding\">ON</span>\n                <span class=\"onoffswitch-inactive ng-binding\">OFF</span>\n              </span>\n              <span class=\"onoffswitch-switch\"></span>\n            </label>\n          </div>\n        </div>\n      </div>\n      <div ng-show=\"mas.trigger_avail.enabled\">\n        <div class=\"form-group\">\n          <label class=\"col-md-3 control-label\" for=\"downtimeDuration\">Duration (maximum)</label>\n          <div class=\"col-md-6 inline-row\">\n            <div class=\"input-group duration\">\n              <input type=\"number\" class=\"form-control\" placeholder=\"Duration\" ng-model=\"mas.downtimeDuration\"\n                     ng-change=\"mas.changeDowntimeTimeUnits()\" id=\"downtimeDuration\"\n                     ng-change=\"mas.alertSettingTouch()\">\n              <select pf-select ng-model=\"mas.downtimeUnit\" id=\"downtimeUnit\"\n                      ng-options=\"item.value as item.label for item in mas.timeUnits\"\n                      ng-change=\"mas.changeDowntimeTimeUnits()\"></select>\n            </div>\n          <span class=\"help-block\">Send alerts when the downtime lasts\n            more than {{mas.downtimeDuration}} {{mas.timeUnitsDict[mas.downtimeUnit]}}.</span>\n          </div>\n        </div>\n      </div>\n    </fieldset>\n  </form>\n</div>\n<div class=\"modal-footer\">\n  <button type=\"button\" class=\"btn btn-primary\" ng-click=\"mas.save()\"\n          ng-disabled=\"!mas.alertsSetup.$valid || !mas.isSettingChange || mas.saveProgress\">\n    <div ng-show=\"mas.saveProgress\" class=\"spinner spinner-xs hk-modal-spinner\"></div>Save</button>\n  <button type=\"button\" class=\"btn btn-default\" ng-click=\"mas.cancel()\">Cancel</button>\n</div>\n");
$templateCache.put("plugins/metrics/html/alerts-view.html","<div class=\"hk-alerts-feedback\" hk-clear-notifications=\"hkNotifications.alerts\">\n  <div ng-repeat=\"notification in hkNotifications.alerts\">\n    <div ng-switch=\"notification.type\">\n      <div class=\"alert alert-success\" ng-switch-when=\"success\">\n        <span class=\"pficon pficon-ok\"></span>\n        <strong>{{notification.message}}</strong>\n      </div>\n\n      <div class=\"alert alert-danger\" ng-switch-when=\"error\">\n        <span class=\"pficon-layered\">\n          <span class=\"pficon pficon-error-octagon\"></span>\n          <span class=\"pficon pficon-error-exclamation\"></span>\n        </span>\n        <strong>Error:</strong> {{notification.message}}</a>\n      </div>\n    </div>\n  </div>\n</div>\n\n<!--\n<div class=\"info-top clearfix\">\n  <p class=\"settings pull-left\"><a href=\"#\" ng-click=\"mac.openSetup()\"><i class=\"fa fa-cog\"></i>Alert Settings</a></p>\n  <p class=\"pull-right\"><strong>{{(mac.alertList | filter:timeFilter).length}} alerts</strong> last week.</p>\n</div>\n-->\n\n<div class=\"alerts-activity\">\n  <div ng-repeat=\"alert in mac.alertList | filter:timeFilter | orderBy: \'-start\'\">\n\n    <div class=\"panel panel-default alert alert-danger\" ng-if=\"alert.type==\'AVAILABILITY\'\">\n      <div class=\"alert-icon\">\n        <i class=\"fa fa-arrow-down\"></i>\n      </div>\n      <div class=\"date\">\n        {{alert.start | date:\'medium\' }}\n      </div>\n      <div class=\"event\">\n        Server <strong>down</strong> for {{(alert.end - alert.start)/1000 | number: 0}} seconds (until\n        <span ng-if=\"alert.isThisYear && alert.isToday\">{{alert.end | date:\'shortTime\' }}).</span>\n        <span ng-if=\"alert.isThisYear && !alert.isToday\">{{alert.end | date:\'MMM d, h:mm:ss a\' }}).</span>\n        <span ng-if=\"!alert.isThisYear\">{{alert.end | date:\'medium\' }}).</span>\n      </div>\n    </div>\n\n    <div class=\"panel panel-default alert alert-danger\" ng-if=\"alert.type==\'THRESHOLD\'\">\n      <div class=\"alert-icon\">\n        <i class=\"fa fa-line-chart\"></i>\n      </div>\n      <div class=\"date\">\n        {{alert.start | date:\'medium\' }}\n      </div>\n      <div class=\"event\">\n        <strong>Response time</strong> was above the threshold ({{alert.threshold | number: 0}} ms) for {{(alert.end - alert.start) / 1000.0 | number: 0}} seconds (until\n        <span ng-if=\"alert.isThisYear && alert.isToday\">{{alert.end | date:\'shortTime\' }}).</span>\n        <span ng-if=\"alert.isThisYear && !alert.isToday\">{{alert.end | date:\'MMM d, h:mm:ss a\' }}).</span>\n        <span ng-if=\"!alert.isThisYear\">{{alert.end | date:\'medium\' }}).</span>\n        The average response time was {{alert.avg  | number: 0}} ms.\n      </div>\n    </div>\n\n  </div>\n\n\n</div>\n");
$templateCache.put("plugins/metrics/html/alerts.html","<div ng-controller=\"MetricsAlertController as mac\">\n  <hawkular-sidebar ng-controller=\"Sidebar.SidebarController\">\n    <div class=\"nav-tabs-container\">\n      <ul class=\"nav nav-tabs nav-tabs-pf\">\n        <li><a href=\"/hawkular-ui/url/availability/{{mac.$routeParams.resourceId}}/{{mac.$routeParams.timeOffset}}\" class=\"availability\">Availability</a></li>\n        <li><a href=\"/hawkular-ui/url/response-time/{{mac.$routeParams.resourceId}}/{{mac.$routeParams.timeOffset}}\" class=\"response-time\">Response Time</a></li>\n        <li class=\"active\"><a href=\"/hawkular-ui/url/alerts/{{mac.$routeParams.resourceId}}/{{mac.$routeParams.timeOffset}}\" class=\"alerts\">Alerts</a></li>\n      </ul>\n    </div>\n  </hawkular-sidebar>\n\n  <section id=\"alerts\" class=\"tab-content\">\n    <div class=\"info-top clearfix\">\n      <h3 class=\"pull-left\">Alerts <span>({{(mac.alertList | filter:timeFilter).length}})</span></h3>\n      <span class=\"settings pull-right\"><a href=\"#\" ng-click=\"mac.openSetup()\"><i class=\"fa fa-cog\"></i>Alert Settings</a></span>\n    </div>\n    <div ng-include=\"\'plugins/metrics/html/alerts-view.html\'\"></div>\n  </section>\n</div>\n");
$templateCache.put("plugins/metrics/html/app-server-details.html","<div ng-controller=\"HawkularMetrics.AppServerDetailsController as vm\">\n\n  <hawkular-sidebar ng-controller=\"Sidebar.SidebarController\">\n    <div class=\"nav-tabs-container\">\n      <ul class=\"nav nav-tabs nav-tabs-pf\" ng-init=\"vm.activeTab = vm.activeTab || \'jvm-metrics\'\">\n        <li ng-class=\"vm.activeTab === \'jvm-metrics\' ? \'active\' : \'\'\"><a href=\"#\" ng-click=\"vm.activeTab = \'jvm-metrics\'\" class=\"jvm-metrics\">JVM Metrics</a></li>\n        <li ng-class=\"vm.activeTab === \'deployments\' ? \'active\' : \'\'\"><a href=\"#\" ng-click=\"vm.activeTab = \'deployments\'\" class=\"deployments\">Deployments</a></li>\n        <li ng-class=\"vm.activeTab === \'datasources\' ? \'active\' : \'\'\"><a href=\"#\" ng-click=\"vm.activeTab = \'datasources\'\" class=\"datasources\">Datasources</a></li>\n        <li ng-class=\"vm.activeTab === \'alerts\' ? \'active\' : \'\'\"><a href=\"#\" ng-click=\"vm.activeTab = \'alerts\'\" class=\"alerts\">Alerts</a></li>\n      </ul>\n    </div>\n  </hawkular-sidebar>\n\n  <section id=\"jvm-metrics\" class=\"tab-content\" ng-if=\"vm.activeTab === \'jvm-metrics\'\">\n\n    <h3 class=\"pull-left\">JVM Status (Last hour)</h3>\n    <span class=\"update pull-right\" tooltip-trigger tooltip-placement=\"bottom\" tooltip=\"Last update\"><i class=\"fa fa-clock-o\"></i>{{vm.endTimeStamp | date:\'mediumTime\'}}</span>\n    <div class=\"panel panel-default summary\">\n      <div class=\"row\">\n        <div class=\"col-sm-3 summary-item\">\n          <span class=\"data\">-Xmx</span>\n          <span class=\"item\">Max. Heap</span>\n        </div>\n        <div class=\"col-sm-3 summary-item\">\n          <span class=\"data\">20 GB</span>\n          <span class=\"item\">Avg. Heap Usage</span>\n        </div>\n        <div class=\"col-sm-3 summary-item\">\n          <span class=\"data\">22:00</span>\n          <span class=\"item\">Last Garbage Collection</span>\n        </div>\n        <div class=\"col-sm-3 summary-item\">\n          <span class=\"data\">3</span>\n          <span class=\"item\">Alerts</span>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"info-top clearfix\">\n      <h3 class=\"pull-left\" tooltip-trigger tooltip-placement=\"top\" tooltip=\"Expand/collapse\"><button class=\"btn btn-link trigger\"><i class=\"fa fa-plus-square-o\"></i> Alerts <span>(2 of 10)</span></button></h3>\n      <span class=\"settings pull-right\"><a href=\"#\" ng-controller=\"MetricsAlertController as mac\" ng-click=\"mac.openSetup()\"><i class=\"fa fa-cog\"></i>Alert Settings</a></span>\n    </div>\n    <div class=\"alerts-activity clearfix\">\n      <div class=\"panel panel-default alert alert-danger\">\n        <div class=\"alert-icon\"><i class=\"fa fa-flag\"></i></div>\n        <div class=\"date\">12 Feb, 5:35 PM</div>\n        <div class=\"event\">Server <strong>down</strong> for 4 minutes (until 5:39 PM).</div>\n      </div>\n      <div class=\"panel panel-default alert alert-danger\">\n        <div class=\"alert-icon\"><i class=\"fa fa-flag\"></i></div>\n        <div class=\"date\">11 Feb, 3:53 PM</div>\n        <div class=\"event\"><strong>Response time</strong> was above the threshold for 7 minutes (until 4:00 PM).</div>\n      </div>\n    </div>\n\n    <h3>JVM Heap</h3>\n    <div class=\"panel panel-default graph\">\n      <img src=\"img/ph-jvm.png\" alt=\"ph-jvm\" width=\"876\" height=\"253\">\n    </div>\n\n  </section>\n\n  <section id=\"deployments\" class=\"tab-content\" ng-if=\"vm.activeTab === \'deployments\'\">\n\n    <h3 class=\"pull-left\">Deployments (Last hour)</h3>\n    <span class=\"update pull-right\" tooltip-trigger tooltip-placement=\"bottom\" tooltip=\"Last update\"><i class=\"fa fa-clock-o\"></i>{{vm.endTimeStamp | date:\'mediumTime\'}}</span>\n    <div class=\"panel panel-default summary\">\n      <div class=\"row\">\n        <div class=\"col-sm-3 summary-item\">\n          <span class=\"data\">-Xmx</span>\n          <span class=\"item\">Max. Heap</span>\n        </div>\n        <div class=\"col-sm-3 summary-item\">\n          <span class=\"data\">20 GB</span>\n          <span class=\"item\">Avg. Heap Usage</span>\n        </div>\n        <div class=\"col-sm-3 summary-item\">\n          <span class=\"data\">22:00</span>\n          <span class=\"item\">Last Garbage Collection</span>\n        </div>\n        <div class=\"col-sm-3 summary-item\">\n          <span class=\"data\">3</span>\n          <span class=\"item\">Alerts</span>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"info-top clearfix\">\n      <h3 class=\"pull-left\" tooltip-trigger tooltip-placement=\"top\" tooltip=\"Expand/collapse\"><button class=\"btn btn-link trigger\"><i class=\"fa fa-plus-square-o\"></i> Alerts <span>(1)</span></button></h3>\n      <span class=\"settings pull-right\"><a href=\"#\" ng-controller=\"MetricsAlertController as mac\" ng-click=\"mac.openSetup()\"><i class=\"fa fa-cog\"></i>Alert Settings</a></span>\n    </div>\n    <div class=\"alerts-activity clearfix\">\n      <div class=\"panel panel-default alert alert-danger\">\n        <div class=\"alert-icon\">\n          <i class=\"fa fa-flag\"></i>\n        </div>\n        <div class=\"date\">\n          12 Feb, 5:35 PM\n        </div>\n        <div class=\"event\">\n          Server <strong>down</strong> for 4 minutes (until 5:39 PM).\n        </div>\n      </div>\n    </div>\n\n  </section>\n\n  <section id=\"datasources\" class=\"tab-content\"  ng-if=\"vm.activeTab === \'datasources\'\">\n\n    <h3 class=\"pull-left\">Datasources (Last hour)</h3>\n    <span class=\"update pull-right\" tooltip-trigger tooltip-placement=\"bottom\" tooltip=\"Last update\"><i class=\"fa fa-clock-o\"></i>{{vm.endTimeStamp | date:\'mediumTime\'}}</span>\n    <div class=\"panel panel-default summary\">\n      <div class=\"row\">\n        <div class=\"col-sm-3 summary-item\">\n          <span class=\"data\">-Xmx</span>\n          <span class=\"item\">Max. Heap</span>\n        </div>\n        <div class=\"col-sm-3 summary-item\">\n          <span class=\"data\">20 GB</span>\n          <span class=\"item\">Avg. Heap Usage</span>\n        </div>\n        <div class=\"col-sm-3 summary-item\">\n          <span class=\"data\">22:00</span>\n          <span class=\"item\">Last Garbage Collection</span>\n        </div>\n        <div class=\"col-sm-3 summary-item\">\n          <span class=\"data\">3</span>\n          <span class=\"item\">Alerts</span>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"info-top clearfix\">\n      <h3 class=\"pull-left\" tooltip-trigger tooltip-placement=\"top\" tooltip=\"Expand/collapse\"><button class=\"btn btn-link trigger\"><i class=\"fa fa-plus-square-o\"></i> Alerts <span>(0)</span></button></h3>\n      <span class=\"settings pull-right\"><a href=\"#\" ng-controller=\"MetricsAlertController as mac\" ng-click=\"mac.openSetup()\"><i class=\"fa fa-cog\"></i>Alert Settings</a></span>\n    </div>\n    <div class=\"alerts-activity clearfix\">\n      <p>No alerts.</p>\n    </div>\n\n  </section>\n\n  <section id=\"alerts\" class=\"tab-content\" ng-if=\"vm.activeTab === \'alerts\'\">\n\n    <div class=\"info-top clearfix\">\n      <h3 class=\"pull-left\" tooltip-trigger tooltip-placement=\"top\" tooltip=\"Expand/collapse\">Alerts <span>(29)</span></h3>\n      <span class=\"settings pull-right\"><a href=\"#\" ng-controller=\"MetricsAlertController as mac\" ng-click=\"mac.openSetup()\"><i class=\"fa fa-cog\"></i>Alert Settings</a></span>\n    </div>\n    <div class=\"alerts-activity clearfix\">\n      <div class=\"panel panel-default alert alert-danger\">\n        <div class=\"alert-icon\">\n          <i class=\"fa fa-flag\"></i>\n        </div>\n        <div class=\"date\">\n          12 Feb, 5:35 PM\n        </div>\n        <div class=\"event\">\n          Server <strong>down</strong> for 4 minutes (until 5:39 PM).\n        </div>\n      </div>\n      <div class=\"panel panel-default alert alert-danger\">\n        <div class=\"alert-icon\">\n          <i class=\"fa fa-flag\"></i>\n        </div>\n        <div class=\"date\">\n          11 Feb, 3:53 PM\n        </div>\n        <div class=\"event\">\n          <strong>Response time</strong> was above the threshold for 7 minutes (until 4:00 PM).\n        </div>\n      </div>\n      <div class=\"panel panel-default alert alert-danger\">\n        <div class=\"alert-icon\">\n          <i class=\"fa fa-flag\"></i>\n        </div>\n        <div class=\"date\">\n          11 Feb, 3:53 PM\n        </div>\n        <div class=\"event\">\n          <strong>Response time</strong> was above the threshold for 7 minutes (until 4:00 PM).\n        </div>\n      </div>\n      <div class=\"panel panel-default alert alert-danger\">\n        <div class=\"alert-icon\">\n          <i class=\"fa fa-flag\"></i>\n        </div>\n        <div class=\"date\">\n          11 Feb, 3:53 PM\n        </div>\n        <div class=\"event\">\n          <strong>Response time</strong> was above the threshold for 7 minutes (until 4:00 PM).\n        </div>\n      </div>\n      <div class=\"panel panel-default alert alert-danger\">\n        <div class=\"alert-icon\">\n          <i class=\"fa fa-flag\"></i>\n        </div>\n        <div class=\"date\">\n          11 Feb, 3:53 PM\n        </div>\n        <div class=\"event\">\n          <strong>Response time</strong> was above the threshold for 7 minutes (until 4:00 PM).\n        </div>\n      </div>\n    </div>\n\n  </section>\n\n</div>");
$templateCache.put("plugins/metrics/html/app-server-list.html","<div ng-controller=\"HawkularMetrics.AppServerListController as vm\">\n\n      <h1 class=\"text-center\">{{userDetails.firstName}}\'s application servers</h1>\n      <h3 class=\"pull-left\">Aggregate Status (Last 24 hrs)</h3>\n      <span class=\"update pull-right\" tooltip-trigger tooltip-placement=\"bottom\" tooltip=\"Last update\"><i class=\"fa fa-clock-o\"></i>{{vm.endTimeStamp | date:\'mediumTime\'}}</span>\n      <div class=\"panel panel-default summary\">\n        <div class=\"row\">\n          <div class=\"col-md-3 summary-item\">\n            <a href=\"#\">\n              <span class=\"data\">4</span>\n              <span class=\"item\">Alerts</span>\n            </a>\n          </div>\n          <div class=\"col-md-3 summary-item\">\n            <span class=\"data\">43 running</span>\n            <span class=\"item\">Up</span>\n          </div>\n          <div class=\"col-md-3 summary-item\">\n            <span class=\"data\">1 Failed</span>\n            <span class=\"item\">Down</span>\n          </div>\n          <div class=\"col-md-3 summary-item\">\n            <span class=\"data\">1 Stopped</span>\n            <span class=\"item\">Down</span>\n          </div>\n        </div>\n      </div>\n\n      <h3>Application Servers (45)</h3>\n      <div class=\"dataTables_header\"><div id=\"DataTables_Table_0_filter\" class=\"dataTables_filter\"><label><input type=\"search\" ng-model=\"vm.search\" aria-controls=\"DataTables_Table_0\"></label></div>\n\n      <div class=\"dataTables_info\" id=\"DataTables_Table_0_info\" role=\"status\" aria-live=\"polite\">Showing <b>1</b> to <b>{{(vm.resourceList | filter:vm.search).length}}</b> of <b>{{vm.resourceList.length}}</b> Items</div></div>\n      <table class=\"datatable table table-striped table-bordered table-checkbox\" ng-show=\"vm.resourceList.length > 0\">\n        <thead>\n          <tr>\n            <th>Application Server Name <span class=\"label label-default label-alert pull-right\">2</span></th>\n            <th>Type</th>\n            <th>Host</th>\n            <th>State</th>\n            <th>Custom Tags</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr class=\"odd\"><td valign=\"top\" colspan=\"5\" class=\"dataTables_empty\" ng-show=\"vm.search && (vm.resourceList | filter:vm.search).length === 0\"><p>Suggestions</p><ul><li>Check the syntax of the search term.</li><li>Check that the correct menu option is chosen (token ID vs. user ID).</li><li>Use wildcards (* to match zero or more characters or ? to match a single character).</li><li>Clear the search field, then click Search to return to the 20 most recent records.</li></ul></td></tr>\n          <tr ng-repeat=\"res in vm.resourceList | filter:vm.search | orderBy:\'properties.url\':vm.reverse\">\n            <td><a href=\"/hawkular-ui/app/app-details/{{res.id}}\">{{res.properties.name}}</a> <span class=\"label label-danger label-alert pull-right\" ng-show=\"res.alerts.length > 0\">{{res.alerts.length}}</span></td>\n            <td>{{res.type.id}}</td>\n            <td>{{res.properties.url}}</td>\n            <td class=\"center\">{{res.state}}</td>\n            <td class=\"center\"><span class=\"label label-primary\" ng-repeat=\"tag in res.tags\">{{tag}}</span><span ng-hide=\"res.tags.length > 0\">--</span></td>\n          </tr>\n        </tbody>\n      </table>\n      <div class=\"dataTables_footer\"><div class=\"dataTables_paginate paging_bootstrap_input\" id=\"DataTables_Table_0_paginate\"><ul class=\"pagination\"><li class=\"first disabled\"><span class=\"i fa fa-angle-double-left\"></span></li><li class=\"prev disabled\"><span class=\"i fa fa-angle-left\"></span></li></ul><div class=\"pagination-input\"><input type=\"text\" class=\"paginate_input\"><span class=\"paginate_of\">of <b>1</b></span></div><ul class=\"pagination\"><li class=\"next disabled\"><span class=\"i fa fa-angle-right\"></span></li><li class=\"last disabled\"><span class=\"i fa fa-angle-double-right\"></span></li></ul></div></div>\n\n</div>\n");
$templateCache.put("plugins/metrics/html/availability.html","<div ng-controller=\"MetricsAvailabilityController as vm\">\n  <hawkular-sidebar ng-controller=\"Sidebar.SidebarController\">\n    <div class=\"nav-tabs-container\">\n      <ul class=\"nav nav-tabs nav-tabs-pf\">\n        <li class=\"active\"><a href=\"/hawkular-ui/url/availability/{{vm.$routeParams.resourceId}}/{{vm.$routeParams.timeOffset}}\" class=\"availability\">Availability</a></li>\n        <li><a href=\"/hawkular-ui/url/response-time/{{vm.$routeParams.resourceId}}/{{vm.$routeParams.timeOffset}}\" class=\"response-time\">Response Time</a></li>\n        <li><a href=\"/hawkular-ui/url/alerts/{{vm.$routeParams.resourceId}}/{{vm.$routeParams.timeOffset}}\" class=\"alerts\">Alerts</a></li>\n      </ul>\n    </div>\n  </hawkular-sidebar>\n\n  <section id=\"availability\" class=\"tab-content\">\n\n    <!-- Summary -->\n    <h3 class=\"pull-left\">Availability Status</h3>\n    <span class=\"update pull-right\" tooltip-trigger tooltip-placement=\"bottom\" tooltip=\"Last update\"><i class=\"fa fa-clock-o\"></i>{{vm.endTimeStamp | date:\'mediumTime\'}}</span>\n    <div class=\"panel panel-default summary\">\n      <div class=\"row\">\n        <div class=\"col-md-3 summary-item\">\n          <span class=\"data\" ng-show=\"vm.uptimeRatio < 1\">{{vm.uptimeRatio * 100 | number:3}} %</span>\n          <span class=\"data\" ng-show=\"vm.uptimeRatio === 1\">{{vm.uptimeRatio * 100}} %</span>\n          <span class=\"item\">Availability</span>\n        </div>\n        <div class=\"col-md-3 summary-item\">\n          <span class=\"data\">{{vm.downtimeDuration / 1000 | number:0}} s</span>\n          <span class=\"item\">Total Downtime Duration</span>\n        </div>\n        <div class=\"col-md-3 summary-item\">\n          <span class=\"data\" ng-show=\"vm.lastDowntime.valueOf() !== 0\">{{vm.lastDowntime | date:\'mediumDate\'}}</span>\n          <span class=\"data\" ng-show=\"!vm.lastDowntime || vm.lastDowntime.valueOf() === 0\">Always Up</span>\n          <span class=\"item\">Last Downtime</span>\n        </div>\n        <div class=\"col-md-3 summary-item\">\n          <span class=\"data\">{{vm.downtimeCount}}</span>\n          <span class=\"item\">Downtime Events</span>\n        </div>\n      </div>\n    </div>\n\n    <!-- Alerts -->\n    <div class=\"info-top clearfix\">\n      <h3 class=\"pull-left\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"Expand/collapse\">\n        <button class=\"btn btn-link trigger\" ng-click=\"showAllAlerts = !showAllAlerts\"><i class=\"fa\" ng-show=\"vm.alertList.length > 0\" ng-class=\"showAllAlerts ? \'fa-minus-square-o\' : \'fa-plus-square-o\'\"></i> Alerts <span ng-show=\"vm.alertList.length > 0\">({{showAllAlerts ? vm.alertList.length : vm.math.min(vm.alertList.length, 3)}} of {{vm.alertList.length}})</span></button>\n      </h3>\n      <span class=\"settings pull-right\"><a href=\"#\" ng-controller=\"MetricsAlertController as mac\" ng-click=\"mac.openSetup()\"><i class=\"fa fa-cog\"></i>Alert Settings</a></span>\n    </div>\n\n    <div class=\"alerts-activity clearfix\">\n      <!-- No Alerts -->\n      <div class=\"panel panel-default alert alert-info\" ng-show=\"vm.alertList.length === 0\">\n        <div class=\"alert-icon\"><i class=\"fa fa-flag-o\"></i></div>\n        <div class=\"event\">No Alerts have been fired in this category and time range.</div>\n      </div>\n      <!-- Alerts exist -->\n      <div class=\"panel panel-default alert alert-danger\" ng-repeat=\"alert in vm.alertList | limitTo: (showAllAlerts ? 100000 : 3) track by $index\">\n        <div class=\"alert-icon\"><i class=\"fa fa-flag\"></i></div>\n        <div class=\"date\">{{alert.evalSets[0][0].evalTimestamp | date:\'medium\' }}</div>\n        <div class=\"event\">Server <strong>down</strong> for {{(alert.ctime - alert.evalSets[0][0].evalTimestamp) / 1000 | number:0}} seconds (until {{alert.ctime | date:\'mediumTime\'}}).</div>\n      </div>\n    </div>\n\n    <!-- Availability Chart -->\n    <h3>Availability</h3>\n    <div class=\"panel panel-default graph\">\n      <img src=\"img/graph-availability.png\" alt=\"graph\" width=\"944\" height=\"197\">\n    </div>\n    <!--<div class=\"panel panel-default graph\">-->\n      <!--<div class=\"update pull-right\" ng-show=\"vm.availabilityDataPoints.length > 0\" >-->\n        <!--<i class=\"fa fa-clock-o\"></i><a ng-click=\"vm.refreshAvailPageNow(vm.getRawMetricId())\"><strong>Last update</strong> 20 seconds ago</a>-->\n      <!--</div>-->\n\n      <!--<h2>Avail points: {{vm.availabilityDataPoints.length}}</h2>-->\n      <!--<availability-chart-->\n        <!--data=\"{{vm.availabilityDataPoints}}\"-->\n        <!--chart-type=\"availability\"-->\n        <!--chart-height=\"250\">-->\n      <!--</availability-chart>-->\n    <!--</div>-->\n\n  </section>\n</div>");
$templateCache.put("plugins/metrics/html/create-alert-form.html","<div ng-controller=\"QuickAlertController as qac\" ng-show=\"vm.chartData.dataPoints.length > 1\">\n  <div ng-show=\"!showQuickAlert\" class=\"col-sm-9 col-md-10 content\">\n    <button class=\"btn btn-primary pull-left\" ng-click=\"qac.toggleQuickAlert()\">Add an Alert</button>\n  </div>\n  <div ng-show=\"showQuickAlert\" class=\"col-sm-9 col-md-10 content\">\n    <h1>Add an Alert</h1>\n\n    <form class=\"form-horizontal\" name=\"addQuickAlertForm\" role=\"form\">\n      <div class=\"form-group\">\n        <label class=\"col-md-4 control-label\">\n          Fire when metric is\n        </label>\n\n        <div id=\"alert-radio-container\" class=\"col-md-4\">\n          <label class=\"radio-inline\">\n            <input type=\"radio\" ng-model=\"quickTrigger.operator\" class=\"radio\" value=\"LT\"> <\n          </label>\n          <label class=\"radio-inline\">\n            <input type=\"radio\" ng-model=\"quickTrigger.operator\" class=\"radio\" value=\"GT\"> >\n          </label>\n          <label class=\"radio-inline\">\n            <input type=\"radio\" ng-model=\"quickTrigger.operator\" class=\"radio\" value=\"LTE\"> <=\n          </label>\n          <label class=\"radio-inline\">\n            <input type=\"radio\" ng-model=\"quickTrigger.operator\" class=\"radio\" value=\"GTE\"> >=\n          </label>\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <label class=\"col-md-4 control-label\" for=\"threshold\">\n          Of threshold\n        </label>\n\n        <div class=\"col-md-2\">\n          <input type=\"number\" id=\"threshold\" ng-model=\"quickTrigger.threshold\" class=\"form-control\"\n                 ng-minlength=\"1\" required>\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <label class=\"col-md-4 control-label\" for=\"actions\">\n          Notify to:\n        </label>\n\n        <div class=\"col-md-3\">\n          <ui-select id=\"actions\" multiple ng-model=\"quickTrigger.actions\" theme=\"bootstrap\"\n                     ng-disabled=\"disabled\" close-on-select=\"false\">\n            <ui-select-match placeholder=\"Select action...\">{{$item}}</ui-select-match>\n            <ui-select-choices repeat=\"action in actions | filter:$select.search\">\n              {{ action }}\n            </ui-select-choices>\n          </ui-select>\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <div class=\"col-md-offset-4 col-md-6\">\n          <button class=\"btn btn-primary\" ng-click=\"qac.saveQuickAlert()\">Create Alert</button>\n          <button type=\"button\" class=\"btn btn-default\" ng-click=\"qac.toggleQuickAlert()\">Cancel</button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>\n");
$templateCache.put("plugins/metrics/html/response-time.html","<div ng-controller=\"MetricsViewController as vm\">\n\n  <hawkular-sidebar ng-controller=\"Sidebar.SidebarController\">\n    <div class=\"nav-tabs-container\">\n      <ul class=\"nav nav-tabs nav-tabs-pf\">\n        <li><a href=\"/hawkular-ui/url/availability/{{vm.$routeParams.resourceId}}/{{vm.$routeParams.timeOffset}}\" class=\"availability\">Availability</a></li>\n        <li class=\"active\"><a href=\"/hawkular-ui/url/response-time/{{vm.$routeParams.resourceId}}/{{vm.$routeParams.timeOffset}}\" class=\"response-time\">Response Time</a></li>\n        <li><a href=\"/hawkular-ui/url/alerts/{{vm.$routeParams.resourceId}}/{{vm.$routeParams.timeOffset}}\" class=\"alerts\">Alerts</a></li>\n      </ul>\n    </div>\n  </hawkular-sidebar>\n\n  <section class=\"response-time\" id=\"response-time\">\n\n    <!-- Summary -->\n    <h3 class=\"pull-left\">Response Time Status</h3>\n    <span class=\"update pull-right\" tooltip-trigger tooltip-placement=\"bottom\" tooltip=\"Last update\"><i class=\"fa fa-clock-o\"></i>{{vm.endTimeStamp | date:\'mediumTime\'}}</span>\n    <div class=\"panel panel-default summary\">\n      <div class=\"row\">\n        <div class=\"col-md-4 summary-item\">\n          <span class=\"data\">{{vm.average}} <span>ms</span></span>\n          <span class=\"item\">Average</span>\n        </div>\n        <div class=\"col-md-4 summary-item\">\n          <span class=\"data\">{{vm.median}} <span>ms</span></span>\n          <span class=\"item\">Median</span>\n        </div>\n        <div class=\"col-md-4 summary-item\">\n          <span class=\"data\">{{vm.percentile95th}} <span>ms</span></span>\n          <span class=\"item\">95th percentile</span>\n        </div>\n      </div>\n    </div>\n\n    <!-- Alerts -->\n    <div class=\"info-top clearfix\">\n      <h3 class=\"pull-left\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"Expand/collapse\">\n        <button class=\"btn btn-link trigger\" ng-click=\"showAllAlerts = !showAllAlerts\"><i class=\"fa\" ng-show=\"vm.alertList.length > 0\" ng-class=\"showAllAlerts ? \'fa-minus-square-o\' : \'fa-plus-square-o\'\"></i> Alerts <span ng-show=\"vm.alertList.length > 0\">({{showAllAlerts ? vm.alertList.length : vm.math.min(vm.alertList.length, 3)}} of {{vm.alertList.length}})</span></button>\n      </h3>\n      <span class=\"settings pull-right\"><a href=\"#\" ng-controller=\"MetricsAlertController as mac\" ng-click=\"mac.openSetup()\"><i class=\"fa fa-cog\"></i>Alert Settings</a></span>\n    </div>\n    <div class=\"alerts-activity clearfix\">\n      <!-- No Alerts -->\n      <div class=\"panel panel-default alert alert-info\" ng-show=\"vm.alertList.length === 0\">\n        <div class=\"alert-icon\"><i class=\"fa fa-flag-o\"></i></div>\n        <div class=\"event\">No Alerts have been fired in this category and time range.</div>\n      </div>\n      <!-- Alerts exist -->\n      <div class=\"panel panel-default alert alert-danger\" ng-repeat=\"alert in vm.alertList | limitTo: (showAllAlerts ? 100000 : 3) track by $index\">\n        <div class=\"alert-icon\"><i class=\"fa fa-flag\"></i></div>\n        <div class=\"date\">{{alert.evalSets[0][0].evalTimestamp | date:\'medium\' }}</div>\n        <div class=\"event\"><strong>Response time</strong> was above the threshold ({{alert.evalSets[0][0].condition.threshold}}ms) for {{(alert.ctime - alert.evalSets[0][0].evalTimestamp) / 1000 | number:0}} seconds (until {{alert.ctime | date:\'mediumTime\'}}).</div>\n      </div>\n    </div>\n\n    <!-- Response Time Graph -->\n    <h3>Response Time</h3>\n    <div class=\"panel panel-default graph\">\n      <div class=\"legend pull-left\" ng-show=\"vm.chartData.dataPoints.length > 0\">\n        <span><i class=\"fa fa-circle primary\"></i>Response Time</span>\n        <span><i class=\"fa fa-circle danger\"></i>Response Time (above the threshold)</span>\n      </div>\n      <div class=\"update pull-right\" ng-show=\"vm.chartData.dataPoints.length > 0\" >\n        <i class=\"fa fa-clock-o\"></i><a ng-click=\"vm.refreshChartDataNow(vm.getMetricId())\"><strong>Last\n        update</strong> 20 seconds ago</a>\n      </div>\n\n      <p class=\"label label-info waiting-label\" ng-hide=\"vm.chartData.dataPoints.length > 0\" >We are\n        collecting your initial data. Please be patient(could be up to a minute)...</p>\n\n      <div id=\"metrics-chart\">\n        <!-- HINT: colors for the chart can be changed in the hawkular-charts.css -->\n        <hawkular-chart\n          data=\"{{vm.chartData.dataPoints}}\"\n          chart-type=\"hawkularmetric\"\n          alert-value=\"{{vm.threshold}}\"\n          y-axis-units=\"Response Time (ms)\"\n          chart-height=\"250\">\n        </hawkular-chart>\n      </div>\n    </div>\n\n  </section>\n</div>");
$templateCache.put("plugins/metrics/html/single-page.html","<div id=\"spcontainer\" du-scroll-container>\n  <section id=\"secav\">\n    <div ng-include=\"\'plugins/metrics/html/availability.html\'\"></div>\n    <p><h1>&nbsp;</h1></p>\n  </section>\n  <section id=\"secrt\">\n    <div ng-include=\"\'plugins/metrics/html/response-time.html\'\"></div>\n    <p><h1>&nbsp;</h1></p>\n  </section>\n  <section id=\"secal\">\n    <div ng-include=\"\'plugins/metrics/html/alerts.html\'\"></div>\n  </section>\n</div>\n");
$templateCache.put("plugins/metrics/html/modals/delete-resource.html","<div class=\"modal-header\">\n  <button type=\"button\" class=\"close\" ng-click=\"cancel()\">\n    <span class=\"pficon pficon-close\"></span>\n  </button>\n  <h4 class=\"modal-title\">Delete Resource</h4>\n</div>\n<div class=\"modal-body\">\n  <div class=\"form-group\">\n    <p class=\"primary-message\">Are you sure you want to stop monitoring and delete the data for the site <strong>{{ vm.resource.properties.url }}</strong> (Resource ID: {{ vm.resource.id }}) ?</p>\n    <p>This action can\'t be undone.</p>\n  </div>\n</div>\n<div class=\"modal-footer\">\n  <button type=\"button\" class=\"btn btn-default\" ng-click=\"vm.cancel()\">Cancel</button>\n  <button type=\"button\" class=\"btn btn-danger\" ng-click=\"vm.deleteResource()\">Delete</button>\n</div>\n");}]); hawtioPluginLoader.addModule("hawkular-ui-components-metrics-templates");
//# sourceMappingURL=data:application/json;base64,