/// Copyright 2014-2015 Red Hat, Inc. and/or its affiliates
/// and other contributors as indicated by the @author tags.
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///   http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.


var HawkularMetrics;
(function (HawkularMetrics) {
    HawkularMetrics.pluginName = "hawkular-metrics";
    HawkularMetrics.log = Logger.get(HawkularMetrics.pluginName);
    HawkularMetrics.templatePath = "plugins/metrics/html";
    HawkularMetrics.globalTenantId = "test";
    HawkularMetrics.globalMetricId = "";
    HawkularMetrics.globalResourceUrl = "";
    HawkularMetrics.globalResourceList = [];
    HawkularMetrics.globalChartTimeRange;
    var ChartTimeRange = (function () {
        function ChartTimeRange(initialHoursDifference) {
            this.initialHoursDifference = initialHoursDifference;
            this.init();
        }
        ChartTimeRange.prototype.init = function () {
            this.endTimestamp = moment().valueOf();
            this.startTimestamp = moment().subtract('hour', this.initialHoursDifference).valueOf();
        };
        ChartTimeRange.prototype.getStartDate = function () {
            return new Date(this.startTimestamp);
        };
        ChartTimeRange.prototype.getEndDate = function () {
            return new Date(this.endTimestamp);
        };
        ChartTimeRange.prototype.getFormattedTimeRange = function () {
            return moment(this.startTimestamp).format('H:mm') + ' - ' + moment(this.endTimestamp).format('H:mm') + ' (' + moment(this.endTimestamp).from(moment(this.startTimestamp), true) + ')';
        };
        return ChartTimeRange;
    })();
    HawkularMetrics.ChartTimeRange = ChartTimeRange;
})(HawkularMetrics || (HawkularMetrics = {}));

var HawkularMetrics;
(function (HawkularMetrics) {
    HawkularMetrics._module = angular.module(HawkularMetrics.pluginName, ['ngResource', 'ui.select', 'hawkularCharts', 'hawkular.services', 'ui.bootstrap', 'topbar']);
    var metricsTab;
    HawkularMetrics._module.config(['$httpProvider', '$locationProvider', '$routeProvider', 'HawtioNavBuilderProvider', function ($httpProvider, $locationProvider, $routeProvider, navBuilder) {
        metricsTab = navBuilder.create().id(HawkularMetrics.pluginName).title(function () { return 'Metrics'; }).href(function () { return '/metrics'; }).subPath('Add Url', 'addUrl', navBuilder.join(HawkularMetrics.templatePath, 'add-url.html')).subPath('Home', 'home', navBuilder.join(HawkularMetrics.templatePath, 'home.html')).subPath('Response Time', 'responseTime', navBuilder.join(HawkularMetrics.templatePath, 'response-time.html')).subPath('Up/Downtime', 'upDowntime', navBuilder.join(HawkularMetrics.templatePath, 'up-downtime.html')).subPath('Alerts', 'alerts', navBuilder.join(HawkularMetrics.templatePath, 'alerts.html')).build();
        navBuilder.configureRouting($routeProvider, metricsTab);
        $locationProvider.html5Mode(true);
    }]);
    HawkularMetrics._module.run(['HawtioNav', function (HawtioNav) {
        HawtioNav.add(metricsTab);
        HawkularMetrics.log.debug('loaded Metrics Plugin');
    }]);
    HawkularMetrics._module.directive('hkEnter', function () {
        return function (scope, element, attrs) {
            element.bind('keydown keypress', function (event) {
                if (event.which === 13) {
                    scope.$apply(function () {
                        scope.$eval(attrs.hkEnter);
                    });
                    event.preventDefault();
                }
            });
        };
    });
    HawkularMetrics._module.config(["$routeProvider", function ($routeProvider) {
        $routeProvider.when('/metrics/responseTime', { templateUrl: 'plugins/metrics/html/response-time.html', resolve: {
            hkResourceList: function ($filter, $location, $q, HawkularInventory) {
                var resPromise = HawkularInventory.Resource.query({ tenantId: HawkularMetrics.globalTenantId }).$promise;
                resPromise.then(function (hkResourceList) {
                    $location.path('/metrics/responseTime/' + hkResourceList[0].id);
                }, function () {
                    $location.url('/error');
                });
                return $q.defer().promise;
            }
        } }).when('/metrics/responseTime/:resourceId/', { templateUrl: 'plugins/metrics/html/response-time.html' }).when('/metrics/responseTime/:resourceId/:rangeStart', { templateUrl: 'plugins/metrics/html/response-time.html' }).when('/metrics/responseTime/:resourceId/:rangeStart/:rangeEnd', { templateUrl: 'plugins/metrics/html/response-time.html' }).when('/metrics/availability/:resourceId', { templateUrl: 'plugins/metrics/html/response-time.html' });
    }]);
    hawtioPluginLoader.addModule(HawkularMetrics.pluginName);
})(HawkularMetrics || (HawkularMetrics = {}));

var HawkularMetrics;
(function (HawkularMetrics) {
    var AddUrlController = (function () {
        function AddUrlController($location, $scope, $rootScope, $log, $filter, HawkularInventory, HawkularMetric, HawkularAlert, DataResource, resourceUrl) {
            this.$location = $location;
            this.$scope = $scope;
            this.$rootScope = $rootScope;
            this.$log = $log;
            this.$filter = $filter;
            this.HawkularInventory = HawkularInventory;
            this.HawkularMetric = HawkularMetric;
            this.HawkularAlert = HawkularAlert;
            this.DataResource = DataResource;
            this.resourceUrl = resourceUrl;
            this.httpUriPart = 'http://';
            $scope.vm = this;
            this.resourceUrl = this.httpUriPart;
            this.resourceList = this.getResourceList();
        }
        AddUrlController.prototype.addUrl = function (url) {
            var _this = this;
            var resource = {
                type: 'URL',
                id: '',
                parameters: {
                    url: url
                }
            };
            this.$log.info('Adding new Resource Url to Hawkular-inventory: ' + url);
            HawkularMetrics.globalChartTimeRange = new HawkularMetrics.ChartTimeRange(1);
            this.HawkularInventory.Resource.save({ tenantId: HawkularMetrics.globalTenantId }, resource).$promise.then(function (newResource) {
                _this.DataResource.updateResources();
                HawkularMetrics.globalMetricId = newResource.id;
                HawkularMetrics.globalResourceUrl = resource.parameters.url;
                console.dir(newResource);
                _this.$log.info('New Resource ID: ' + HawkularMetrics.globalMetricId + ' created for url: ' + HawkularMetrics.globalResourceUrl);
                var metrics = [{
                    name: HawkularMetrics.globalMetricId + '.status.duration',
                    unit: 'MILLI_SECOND',
                    description: 'Response Time in ms.'
                }, {
                    name: HawkularMetrics.globalMetricId + '.status.code',
                    unit: 'NONE',
                    description: 'Status Code'
                }];
                _this.HawkularInventory.Metric.save({
                    tenantId: HawkularMetrics.globalTenantId,
                    resourceId: newResource.id
                }, metrics).$promise.then(function (newMetrics) {
                    toastr.info('Your data is being collected. Please be patient (should be about another minute).');
                    _this.$location.url('/metrics/responseTime/' + newResource.id);
                });
            });
        };
        AddUrlController.prototype.getResourceList = function () {
            var _this = this;
            return this.HawkularInventory.Resource.query({ tenantId: HawkularMetrics.globalTenantId }, function (aResourceList) {
                _this.resourceList = aResourceList;
                angular.forEach(_this.resourceList, function (res, idx) {
                    this.HawkularMetric.NumericMetricData.queryMetrics({
                        tenantId: HawkularMetrics.globalTenantId,
                        resourceId: res.id,
                        numericId: (res.id + '.status.duration'),
                        start: moment().subtract(1, 'hour').valueOf(),
                        end: moment().valueOf()
                    }, function (resource) {
                        res['responseTime'] = resource;
                    });
                    this.HawkularMetric.NumericMetricData.queryMetrics({
                        tenantId: HawkularMetrics.globalTenantId,
                        resourceId: res.id,
                        numericId: (res.id + '.status.code'),
                        start: moment().subtract(1, 'hour').valueOf(),
                        end: moment().valueOf()
                    }, function (resource) {
                        res['isUp'] = (resource[0].value >= 200 && resource[0].value < 300);
                        var upTime = 0;
                        for (var i = 0; i < resource.length; i++) {
                            if (resource[i].value >= 200 && resource[i].value < 300) {
                                upTime++;
                            }
                        }
                        res['availability'] = upTime / resource.length * 100;
                        res['downTime'] = resource.length - upTime;
                    });
                    this.HawkularAlert.Alert.query({ query: res.id, start: moment().subtract(1, 'hour').valueOf(), end: moment().valueOf() }, function (alertsList) {
                        res['alerts'] = [];
                        for (var i = 0; i < alertsList.length; i++) {
                            if (alertsList[i].evalSets[0][0].condition.dataId.indexOf(res.id) === 0) {
                                res['alerts'].push(alertsList[i].evalSets[0][0]);
                            }
                        }
                    });
                    res['updateTime'] = new Date();
                }, _this);
            });
        };
        AddUrlController.prototype.getAverage = function (data, field) {
            if (data) {
                var sum = 0;
                for (var i = 0; i < data.length; i++) {
                    sum += parseInt(data[i][field], 10);
                }
                return Math.round(sum / data.length);
            }
        };
        AddUrlController.prototype.deleteResource = function (resource) {
            var _this = this;
            this.HawkularInventory.Resource.delete({
                tenantId: HawkularMetrics.globalTenantId,
                resourceId: resource.id
            }).$promise.then(function (res) {
                toastr.info('The site ' + resource.parameters.url + ' is no longer being monitored.');
                _this.resourceList = _this.getResourceList();
            });
        };
        AddUrlController.$inject = ['$location', '$scope', '$rootScope', '$log', '$filter', 'HawkularInventory', 'HawkularMetric', 'HawkularAlert', 'DataResource'];
        return AddUrlController;
    })();
    HawkularMetrics.AddUrlController = AddUrlController;
    HawkularMetrics._module.controller('HawkularMetrics.AddUrlController', AddUrlController);
})(HawkularMetrics || (HawkularMetrics = {}));

var HawkularMetrics;
(function (HawkularMetrics) {
    var MetricsAlertController = (function () {
        function MetricsAlertController($scope, HawkularAlert, $log, $q, alertList) {
            var _this = this;
            this.$scope = $scope;
            this.HawkularAlert = HawkularAlert;
            this.$log = $log;
            this.$q = $q;
            this.alertList = alertList;
            this.$log.debug('querying data');
            this.alertList = [];
            this.HawkularAlert.Alert.query().$promise.then(function (data) {
                _this.$log.debug('querying data finished');
                _this.alertList = data;
            }, function (error) {
                _this.$log.debug('querying data error', error);
            });
        }
        MetricsAlertController.$inject = ['$scope', 'HawkularAlert', '$log', '$q'];
        return MetricsAlertController;
    })();
    HawkularMetrics.MetricsAlertController = MetricsAlertController;
    HawkularMetrics._module.controller('MetricsAlertController', MetricsAlertController);
})(HawkularMetrics || (HawkularMetrics = {}));

var HawkularMetrics;
(function (HawkularMetrics) {
    var MetricsAvailabilityController = (function () {
        function MetricsAvailabilityController($scope, $interval, $log, HawkularMetric, $routeParams, startTimeStamp, endTimeStamp) {
            var _this = this;
            this.$scope = $scope;
            this.$interval = $interval;
            this.$log = $log;
            this.HawkularMetric = HawkularMetric;
            this.$routeParams = $routeParams;
            this.startTimeStamp = startTimeStamp;
            this.endTimeStamp = endTimeStamp;
            this.availabilityDataPoints = [];
            this.availabilityPercent = 0;
            this.downTimeDuration = 0;
            this.downTimeEvents = 0;
            $scope.vm = this;
            this.startTimeStamp = moment().subtract(1, 'hours').toDate();
            this.endTimeStamp = new Date();
            $scope.$on('RefreshAvailabilityChart', function (event) {
                _this.refreshAvailChartDataNow(_this.getMetricId());
            });
            this.onCreate($routeParams.resourceId);
        }
        MetricsAvailabilityController.prototype.onCreate = function (curResourceId) {
            this.autoRefreshAvailability(60);
        };
        MetricsAvailabilityController.prototype.cancelAutoRefresh = function () {
            this.$interval.cancel(this.autoRefreshPromise);
            toastr.info('Canceling Auto Refresh Availability');
        };
        MetricsAvailabilityController.prototype.autoRefreshAvailability = function (intervalInSeconds) {
            var _this = this;
            this.refreshHistoricalAvailDataForTimestamp(this.getMetricId());
            this.autoRefreshPromise = this.$interval(function () {
                _this.endTimeStamp = new Date();
                _this.refreshHistoricalAvailDataForTimestamp(_this.getMetricId());
            }, intervalInSeconds * 1000);
            this.$scope.$on('$destroy', function () {
                _this.$interval.cancel(_this.autoRefreshPromise);
            });
        };
        MetricsAvailabilityController.prototype.noDataFoundForId = function (id) {
            this.$log.warn('No Data found for id: ' + id);
        };
        MetricsAvailabilityController.prototype.refreshAvailChartDataNow = function (metricId, startTime) {
            var adjStartTimeStamp = moment().subtract('hours', 1).toDate();
            this.endTimeStamp = new Date();
            this.refreshHistoricalChartData(metricId, angular.isUndefined(startTime) ? adjStartTimeStamp : startTime, this.endTimeStamp);
        };
        MetricsAvailabilityController.prototype.refreshHistoricalChartData = function (metricId, startDate, endDate) {
            this.refreshHistoricalAvailDataForTimestamp(metricId, startDate.getTime(), endDate.getTime());
        };
        MetricsAvailabilityController.prototype.getMetricId = function () {
            return MetricsAvailabilityController.getResourceCodeMetricId();
        };
        MetricsAvailabilityController.getResourceCodeMetricId = function () {
            return HawkularMetrics.globalMetricId + '.status.code';
        };
        MetricsAvailabilityController.prototype.refreshHistoricalAvailDataForTimestamp = function (metricId, startTime, endTime) {
            var _this = this;
            if (!endTime) {
                endTime = this.endTimeStamp.getTime();
            }
            if (!startTime) {
                startTime = this.startTimeStamp.getTime();
            }
            if (metricId) {
                this.HawkularMetric.AvailabilityMetricData.query({
                    tenantId: HawkularMetrics.globalTenantId,
                    availabilityId: metricId
                }).$promise.then(function (response) {
                    _this.availabilityDataPoints = _this.formatAvailability(response);
                    console.info("Availability: ");
                    console.dir(_this.availabilityDataPoints);
                    _this.availabilityPercent = .95;
                    _this.downTimeDuration = 44;
                    _this.lastDownTime = moment().subtract('hours', 2).toDate();
                    _this.downTimeEvents = 2;
                    if (_this.availabilityDataPoints.length) {
                        _this.chartData = {
                            id: metricId,
                            startTimeStamp: _this.startTimeStamp,
                            endTimeStamp: _this.endTimeStamp,
                            dataPoints: _this.availabilityDataPoints,
                            annotationDataPoints: []
                        };
                    }
                    else {
                        _this.noDataFoundForId(_this.getMetricId());
                    }
                }, function (error) {
                    _this.$log.error('Error Loading Avail data');
                    toastr.error('Error Loading Avail Data: ' + error);
                });
            }
        };
        MetricsAvailabilityController.prototype.formatAvailability = function (response) {
            return _.map(response, function (point) {
                return {
                    timestamp: point.start,
                    date: new Date(point.start),
                    value: !angular.isNumber(point.value) ? 0 : point.value,
                    avg: (point.empty) ? 0 : point.avg,
                    min: !angular.isNumber(point.min) ? 0 : point.min,
                    max: !angular.isNumber(point.max) ? 0 : point.max,
                    percentile95th: !angular.isNumber(point.percentile95th) ? 0 : point.percentile95th,
                    median: !angular.isNumber(point.median) ? 0 : point.median,
                    empty: point.empty
                };
            });
        };
        MetricsAvailabilityController.$inject = ['$scope', '$interval', '$log', 'HawkularMetric', '$routeParams'];
        return MetricsAvailabilityController;
    })();
    HawkularMetrics.MetricsAvailabilityController = MetricsAvailabilityController;
    HawkularMetrics._module.controller('MetricsAvailabilityController', MetricsAvailabilityController);
})(HawkularMetrics || (HawkularMetrics = {}));

var HawkularMetrics;
(function (HawkularMetrics) {
    var QuickAlertController = (function () {
        function QuickAlertController($scope, HawkularAlert, $log, $q) {
            this.$scope = $scope;
            this.HawkularAlert = HawkularAlert;
            this.$log = $log;
            this.$q = $q;
            this.PROMISE_BREAK = 'magicValue1234';
            this.$scope.showQuickAlert = false;
            this.$scope.quickTrigger = {
                operator: 'LT',
                threshold: 0
            };
            this.allActions();
        }
        QuickAlertController.prototype.toggleQuickAlert = function () {
            this.$scope.showQuickAlert = !this.$scope.showQuickAlert;
        };
        QuickAlertController.prototype.allActions = function () {
            var _this = this;
            this.$scope.actions = [];
            this.HawkularAlert.Action.query(function (result) {
                _this.$scope.actions = result;
            }, function (error) {
                _this.errorToastr(error, 'Error loading Alerts Notifiers:');
            });
        };
        QuickAlertController.prototype.errorToastr = function (error, errorMsg) {
            var errorMsgComplete;
            if (error.data && error.data.errorMsg) {
                errorMsgComplete = error.data.errorMsg;
            }
            else {
                errorMsgComplete = errorMsg + ' ' + error;
            }
            this.$log.error(errorMsgComplete);
            toastr.error(errorMsgComplete);
        };
        QuickAlertController.prototype.errorHandler = function (error, msg) {
            if (error !== this.PROMISE_BREAK) {
                this.errorToastr(error, msg);
            }
            return this.$q.reject(this.PROMISE_BREAK);
        };
        QuickAlertController.prototype.saveQuickAlert = function () {
            var _this = this;
            if (HawkularMetrics.globalMetricId !== '.status.duration' && HawkularMetrics.globalMetricId !== '.status.code') {
                var newTrigger = {};
                newTrigger.name = HawkularMetrics.globalMetricId + 'ResponseTime' + '-' + this.$scope.quickTrigger.operator + '-' + this.$scope.quickTrigger.threshold;
                newTrigger.description = 'Created on ' + new Date();
                newTrigger.firingMatch = 'ALL';
                newTrigger.safetyMatch = 'ALL';
                newTrigger.enabled = true;
                newTrigger.safetyEnabled = false;
                newTrigger.actions = this.$scope.quickTrigger.actions;
                var newDampening = {
                    triggerId: '',
                    type: 'RELAXED_COUNT',
                    evalTrueSetting: 1,
                    evalTotalSetting: 1,
                    evalTimeSetting: 0
                };
                this.HawkularAlert.Trigger.save(newTrigger).$promise.then(function (trigger) {
                    _this.$log.debug('Success Trigger save');
                    newDampening.triggerId = trigger.id;
                    return _this.HawkularAlert.Dampening.save({ triggerId: newDampening.triggerId }, newDampening).$promise;
                }, function (error) {
                    return _this.errorHandler(error, 'Error saving Trigger');
                }).then(function (dampening) {
                    _this.$log.debug('Success Dampening save', dampening);
                    var newThresholdCondition = {
                        triggerId: dampening.triggerId,
                        type: 'THRESHOLD',
                        dataId: HawkularMetrics.globalMetricId,
                        operator: _this.$scope.quickTrigger.operator,
                        threshold: _this.$scope.quickTrigger.threshold
                    };
                    return _this.HawkularAlert.Condition.save({ triggerId: newThresholdCondition.triggerId }, newThresholdCondition).$promise;
                }, function (errorDampening) {
                    return _this.errorHandler(errorDampening, 'Error saving Trigger');
                }).then(function () {
                    _this.$log.debug('Success ThresholdCondition save');
                    _this.$log.debug('Alert Created!');
                    toastr.success('Alert Created!');
                    _this.toggleQuickAlert();
                    return _this.HawkularAlert.Alert.reload().$promise;
                }, function (errorCondition) {
                    return _this.errorHandler(errorCondition, 'Error saving Trigger Condition');
                }).then(angular.noop, function (errorReload) {
                    return _this.errorHandler(errorReload, 'Error reloading Alerts');
                }).catch(function (error) {
                    _this.errorHandler(error, 'Error:');
                });
            }
            else {
                this.$log.debug('No metric selected');
                toastr.warning('No metric selected');
            }
        };
        QuickAlertController.$inject = ['$scope', 'HawkularAlert', '$log', '$q'];
        return QuickAlertController;
    })();
    HawkularMetrics.QuickAlertController = QuickAlertController;
    HawkularMetrics._module.controller('QuickAlertController', QuickAlertController);
})(HawkularMetrics || (HawkularMetrics = {}));

var HawkularMetrics;
(function (HawkularMetrics) {
    var MetricsViewController = (function () {
        function MetricsViewController($scope, $rootScope, $interval, $log, HawkularMetric, HawkularInventory, $routeParams, startTimeStamp, endTimeStamp) {
            var _this = this;
            this.$scope = $scope;
            this.$rootScope = $rootScope;
            this.$interval = $interval;
            this.$log = $log;
            this.HawkularMetric = HawkularMetric;
            this.HawkularInventory = HawkularInventory;
            this.$routeParams = $routeParams;
            this.startTimeStamp = startTimeStamp;
            this.endTimeStamp = endTimeStamp;
            this.bucketedDataPoints = [];
            this.contextDataPoints = [];
            this._resourceList = [];
            this.median = 0;
            this.percentile95th = 0;
            this.average = 0;
            $scope.vm = this;
            this.startTimeStamp = moment().subtract(1, 'hours').toDate();
            this.endTimeStamp = new Date();
            $scope.$on('RefreshChart', function (event) {
                _this.refreshChartDataNow(_this.getMetricId());
            });
            $scope.$watch('vm.selectedResource', function (resource) {
                if (resource) {
                    HawkularMetrics.globalMetricId = resource.id;
                    _this.refreshChartDataNow(_this.getMetricId());
                }
                else {
                    HawkularMetrics.globalResourceList = _this.HawkularInventory.Resource.query({ tenantId: HawkularMetrics.globalTenantId }).$promise.then(function (resources) {
                        _this.resourceList = resources;
                        _this.selectedResource = _.last(resources);
                        _this.refreshChartDataNow(_this.getMetricId());
                    });
                }
            });
            this.onCreate($routeParams.resourceId);
        }
        Object.defineProperty(MetricsViewController.prototype, "resourceList", {
            get: function () {
                return this._resourceList;
            },
            set: function (newResourceList) {
                HawkularMetrics.globalResourceList = newResourceList;
                this._resourceList = newResourceList;
            },
            enumerable: true,
            configurable: true
        });
        MetricsViewController.prototype.onCreate = function (curResourceId) {
            var _this = this;
            this.autoRefresh(60);
            this.HawkularInventory.Resource.query({ tenantId: HawkularMetrics.globalTenantId }, function (aResourceList) {
                _this.resourceList = aResourceList;
                _this.selectedResource = _.last(_this._resourceList);
                for (var i = 0; i < _this._resourceList.length; i++) {
                    if (aResourceList[i].id === curResourceId) {
                        _this.selectedResource = _this._resourceList[i];
                    }
                }
                _this.refreshChartDataNow(_this.getMetricId());
            });
        };
        MetricsViewController.prototype.cancelAutoRefresh = function () {
            this.$interval.cancel(this.autoRefreshPromise);
            toastr.info('Canceling Auto Refresh');
        };
        MetricsViewController.prototype.autoRefresh = function (intervalInSeconds) {
            var _this = this;
            this.refreshHistoricalChartDataForTimestamp(this.getMetricId());
            this.autoRefreshPromise = this.$interval(function () {
                _this.endTimeStamp = new Date();
                _this.refreshHistoricalChartDataForTimestamp(_this.getMetricId());
                _this.refreshSummaryData(_this.getMetricId());
            }, intervalInSeconds * 1000);
            this.$scope.$on('$destroy', function () {
                _this.$interval.cancel(_this.autoRefreshPromise);
            });
        };
        MetricsViewController.prototype.noDataFoundForId = function (id) {
            this.$log.warn('No Data found for id: ' + id);
        };
        MetricsViewController.prototype.refreshChartDataNow = function (metricId, startTime) {
            var adjStartTimeStamp = moment().subtract('hours', 1).toDate();
            this.endTimeStamp = new Date();
            this.refreshHistoricalChartData(metricId, angular.isUndefined(startTime) ? adjStartTimeStamp : startTime, this.endTimeStamp);
            this.refreshSummaryData(metricId, startTime ? startTime.getTime() : adjStartTimeStamp.getTime(), this.endTimeStamp.getTime());
        };
        MetricsViewController.prototype.refreshHistoricalChartData = function (metricId, startDate, endDate) {
            this.refreshHistoricalChartDataForTimestamp(metricId, startDate.getTime(), endDate.getTime());
        };
        MetricsViewController.prototype.getMetricId = function () {
            return MetricsViewController.getResourceDurationMetricId();
        };
        MetricsViewController.getResourceDurationMetricId = function () {
            return HawkularMetrics.globalMetricId + '.status.duration';
        };
        MetricsViewController.prototype.refreshSummaryData = function (metricId, startTime, endTime) {
            var _this = this;
            var dataPoints;
            if (!endTime) {
                endTime = this.endTimeStamp.getTime();
            }
            if (!startTime) {
                startTime = this.startTimeStamp.getTime();
            }
            if (metricId) {
                this.HawkularMetric.NumericMetricData.queryMetrics({
                    tenantId: HawkularMetrics.globalTenantId,
                    numericId: metricId,
                    start: startTime,
                    end: endTime,
                    buckets: 1
                }).$promise.then(function (response) {
                    dataPoints = _this.formatBucketedChartOutput(response);
                    console.dir(dataPoints);
                    _this.median = Math.round(_.last(dataPoints).median);
                    _this.percentile95th = Math.round(_.last(dataPoints).percentile95th);
                    _this.average = Math.round(_.last(dataPoints).avg);
                }, function (error) {
                    _this.$log.error('Error Loading Chart data');
                    toastr.error('Error Loading Chart Data: ' + error);
                });
            }
        };
        MetricsViewController.prototype.refreshHistoricalChartDataForTimestamp = function (metricId, startTime, endTime) {
            var _this = this;
            if (!endTime) {
                endTime = this.endTimeStamp.getTime();
            }
            if (!startTime) {
                startTime = this.startTimeStamp.getTime();
            }
            if (metricId) {
                this.HawkularMetric.NumericMetricData.queryMetrics({
                    tenantId: HawkularMetrics.globalTenantId,
                    numericId: metricId,
                    start: startTime,
                    end: endTime,
                    buckets: 60
                }).$promise.then(function (response) {
                    _this.bucketedDataPoints = _this.formatBucketedChartOutput(response);
                    console.dir(_this.bucketedDataPoints);
                    if (_this.bucketedDataPoints.length) {
                        _this.chartData = {
                            id: metricId,
                            startTimeStamp: startTime,
                            endTimeStamp: endTime,
                            dataPoints: _this.bucketedDataPoints,
                            contextDataPoints: _this.contextDataPoints,
                            annotationDataPoints: []
                        };
                    }
                    else {
                        _this.noDataFoundForId(_this.getMetricId());
                    }
                }, function (error) {
                    _this.$log.error('Error Loading Chart data');
                    toastr.error('Error Loading Chart Data: ' + error);
                });
            }
        };
        MetricsViewController.prototype.formatBucketedChartOutput = function (response) {
            return _.map(response, function (point) {
                return {
                    timestamp: point.start,
                    date: new Date(point.start),
                    value: !angular.isNumber(point.value) ? 0 : point.value,
                    avg: (point.empty) ? 0 : point.avg,
                    min: !angular.isNumber(point.min) ? 0 : point.min,
                    max: !angular.isNumber(point.max) ? 0 : point.max,
                    percentile95th: !angular.isNumber(point.percentile95th) ? 0 : point.percentile95th,
                    median: !angular.isNumber(point.median) ? 0 : point.median,
                    empty: point.empty
                };
            });
        };
        MetricsViewController.$inject = ['$scope', '$rootScope', '$interval', '$log', 'HawkularMetric', 'HawkularInventory', '$routeParams'];
        return MetricsViewController;
    })();
    HawkularMetrics.MetricsViewController = MetricsViewController;
    HawkularMetrics._module.controller('MetricsViewController', MetricsViewController);
})(HawkularMetrics || (HawkularMetrics = {}));

angular.module("hawkular-ui-components-metrics-templates", []).run(["$templateCache", function($templateCache) {$templateCache.put("plugins/metrics/html/add-url.html","<div ng-controller=\"HawkularMetrics.AddUrlController as vm\">\n  <div class=\"container text-center\">\n    <h1>Welcome Back {{username}}!</h1>\n    <h2 ng-show=\"resourcesList.length === 0\">Collect metrics from a website that you want to monitor.</h2>\n\n    <form class=\"form-horizontal add-url\" name=\"addUrlForm\" role=\"form\" novalidate ng-submit=\"vm.addUrl(vm.resourceUrl)\">\n      <div class=\"form-group input\">\n        <div class=\"col-lg-5 col-sm-6 align-center\">\n          <div class=\"input-group\" ng-class=\"{\'input-group-lg\': resourcesList.length === 0}\">\n            <input type=\"url\" class=\"form-control\" name=\"resourceUrl\" ng-model=\"vm.resourceUrl\"\n                   ng-model-options=\"{ updateOn: \'default blur\'}\"\n                   placeholder=\"Enter a website URL (e.g., http://mysite.com/home)\" required>\n            <span class=\"help-block\"\n                  ng-show=\"addUrlForm.resourceUrl.$dirty && addUrlForm.resourceUrl.$invalid\">The URL you entered is not valid. Please enter a valid URL.</span>\n              <span class=\"input-group-btn\">\n                   <button class=\"btn btn-primary\" ng-class=\"{\'btn-lg\': resourcesList.length === 0}\" type=\"submit\" ng-disabled=\"addUrlForm.$invalid\">\n                   Add URL\n                   </button>\n              </span>\n          </div>\n        </div>\n      </div>\n      <div class=\"form-group loading hide\">\n        <div class=\"spinner spinner-lg\"></div>\n        <button type=\"button\" class=\"btn btn-link\">Cancel</button>\n      </div>\n    </form>\n\n    <div class=\"row urls-list-labels\">\n      <div class=\"col-md-4 text-left\">\n        <button class=\"btn btn-link\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"Sort\">\n          URL <b class=\"caret\"></b>\n        </button>\n      </div>\n      <div class=\"col-md-4\">\n        Current Response Time\n      </div>\n      <div class=\"col-md-4\">\n        Current Availability\n      </div>\n    </div>\n\n    <div class=\"panel panel-default summary url-info\" ng-repeat=\"res in vm.resourceList\">\n      <div class=\"row row-table\">\n        <div class=\"col-md-4 summary-item\">\n          <span class=\"url-link\"><a href=\"/metrics/responseTime/{{res.id}}\">{{res.parameters.url}}</a></span>\n          <button class=\"btn btn-link trigger\" tooltip=\"Expand/collapse\" ng-click=\"res.expanded = !res.expanded\"><i class=\"fa\" ng-class=\"res.expanded ? \'fa-minus-square-o\' : \'fa-plus-square-o\'\"></i>Last 24 hours</button>\n        </div>\n        <div class=\"col-md-4 summary-item\">\n          <span class=\"data\">{{res.responseTime[0].value}} <span>ms</span></span>\n        </div>\n        <div class=\"col-md-4 summary-item\">\n          <span class=\"data\"><i class=\"fa \" ng-class=\"res.isUp ? \'fa-arrow-up\' : \'fa-arrow-down\'\"></i>{{res.isUp ? \'Up\' : \'Down\'}}</span>\n          <span class=\"update\" tooltip=\"Last update\"><i class=\"fa fa-clock-o\"></i>{{res.updateTime| date:\"HH:mm\" }}</span>\n        </div>\n      </div>\n      <hr ng-show=\"res.expanded\">\n      <div class=\"row row-table panel-expanded-content\" ng-show=\"res.expanded\">\n        <div class=\"col-md-4 summary-item text-left\">\n          <ul class=\"list-unstyled alert-status\" ng-hide=\"res.alerts.length === 0\">\n            <li ng-repeat=\"alert in res.alerts|limitTo:3\">\n              <i class=\"fa fa-flag\"></i>{{alert.dataTimestamp|date:\'yyyy-MM-dd HH:mm\'}}: <strong>{{alert.condition.type}}: {{alert.value}}</strong>\n            </li>\n          </ul>\n          <a href=\"/metrics/alerts/{{res.id}}\">View All Alerts ({{res.alerts.length}})</a>\n          <div class=\"data\" ng-show=\"res.alerts.length === 0\"><i class=\"fa fa-thumbs-o-up\"></i>No Alerts</div>\n        </div>\n        <div class=\"col-md-4 summary-item\">\n          <div id=\"metrics-chart\" class=\"top-area\" style=\"height: 44px; width: 237px;\">\n            <hawkular-chart data=\"{{res.responseTime}}\" chart-type=\"line\" chart-height=\"44\" chart-width=\"237\"></hawkular-chart>\n            <!--<img src=\"img/overview-graph.png\" alt=\"overview-graph\" width=\"237\" height=\"44\">-->\n          </div>\n          <div class=\"bottom-area\">\n            <span class=\"data\">{{vm.getAverage(res.responseTime, \'value\')}} <span>ms</span></span>\n            <span class=\"item\">Average Response Time</span>\n          </div>\n\n        </div>\n        <div class=\"col-md-4 summary-item\">\n          <div class=\"top-area\">\n            <span class=\"data\" ng-show=\"res.availability === 100\"><i class=\"fa fa-check\"></i>No Downtime</span>\n            <span class=\"data\" ng-hide=\"res.availability === 100\"><i class=\"fa fa-arrow-down\"></i>Down {{res.downTime}} min</span>\n          </div>\n          <div class=\"bottom-area\">\n            <span class=\"data\" ng-hide=\"res.availability === 100\">{{res.availability | number:3}} <span>%</span></span>\n            <span class=\"data\" ng-show=\"res.availability === 100\">{{res.availability}} <span>%</span></span>\n            <span class=\"item\">Availability</span>\n          </div>\n          <button class=\"btn btn-link delete\" tooltip=\"Delete\" ng-click=\"vm.deleteResource(res)\"><i class=\"fa fa-trash-o\"></i></button>\n        </div>\n      </div>\n    </div>\n\n  </div>\n</div>\n");
$templateCache.put("plugins/metrics/html/alerts-setup.html","<div class=\"alert-settings\">\n  <form class=\"form-horizontal\">\n    <fieldset>\n      <legend>Preferences</legend>\n      <div class=\"form-group\">\n        <label class=\"col-md-2 control-label\" for=\"email\">Email</label>\n        <div class=\"col-md-6\">\n          <input type=\"text\" id=\"email\" class=\"form-control\">\n          <span class=\"help-block\">Send alerts to this email address.</span>\n        </div>\n      </div>\n    </fieldset>\n    <fieldset>\n      <legend>Response Time</legend>\n      <div class=\"form-group\">\n        <label class=\"col-md-2 control-label\" for=\"email\">Status</label>\n        <div class=\"col-md-6\">\n          <div class=\"onoffswitch\">\n            <input type=\"checkbox\" id=\"rt\" class=\"onoffswitch-checkbox\">\n            <label class=\"onoffswitch-label\" for=\"rt\">\n                        <span class=\"onoffswitch-inner\">\n                          <span class=\"onoffswitch-active ng-binding\">ON</span>\n                          <span class=\"onoffswitch-inactive ng-binding\">OFF</span>\n                        </span>\n              <span class=\"onoffswitch-switch\"></span>\n            </label>\n          </div>\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <label class=\"col-md-2 control-label\" for=\"email\">Threshold and duration</label>\n        <div class=\"col-md-6 inline-row\">\n          <div class=\"input-group time\">\n            <input type=\"text\" class=\"form-control\" placeholder=\"Threshold\">\n            <span class=\"input-group-addon\">ms</span>\n          </div>\n          <span class=\"between-inputs\">for</span>\n          <div class=\"input-group duration\">\n            <input type=\"text\" class=\"form-control\" placeholder=\"Duration\">\n            <select class=\"selectpicker\" style=\"display: none;\">\n              <option>miliseconds</option>\n              <option>seconds</option>\n              <option>minutes</option>\n              <option>hours</option>\n            </select><div class=\"btn-group bootstrap-select input-group-btn\"><button type=\"button\" class=\"btn dropdown-toggle selectpicker btn-default\" data-toggle=\"dropdown\" title=\"miliseconds\"><span class=\"filter-option pull-left\">miliseconds</span>&nbsp;<span class=\"caret\"></span></button><div class=\"dropdown-menu open\"><ul class=\"dropdown-menu inner selectpicker\" role=\"menu\"><li rel=\"0\" class=\"selected\"><a tabindex=\"0\" class=\"\" style=\"\"><span class=\"text\">miliseconds</span><i class=\"glyphicon glyphicon-ok icon-ok check-mark\"></i></a></li><li rel=\"1\"><a tabindex=\"0\" class=\"\" style=\"\"><span class=\"text\">seconds</span><i class=\"glyphicon glyphicon-ok icon-ok check-mark\"></i></a></li><li rel=\"2\"><a tabindex=\"0\" class=\"\" style=\"\"><span class=\"text\">minutes</span><i class=\"glyphicon glyphicon-ok icon-ok check-mark\"></i></a></li><li rel=\"3\"><a tabindex=\"0\" class=\"\" style=\"\"><span class=\"text\">hours</span><i class=\"glyphicon glyphicon-ok icon-ok check-mark\"></i></a></li></ul></div></div>\n          </div>\n          <span class=\"help-block\">Send alerts when the response time is over 2000 ms for more than 3 minutes.</span>\n        </div>\n      </div>\n    </fieldset>\n    <fieldset>\n      <legend>Downtime</legend>\n      <div class=\"form-group\">\n        <label class=\"col-md-2 control-label\" for=\"email\">Status</label>\n        <div class=\"col-md-6\">\n          <div class=\"onoffswitch\">\n            <input type=\"checkbox\" id=\"rt\" name=\"access\" class=\"onoffswitch-checkbox\">\n            <label class=\"onoffswitch-label\" for=\"rt\">\n                        <span class=\"onoffswitch-inner\">\n                          <span class=\"onoffswitch-active ng-binding\">ON</span>\n                          <span class=\"onoffswitch-inactive ng-binding\">OFF</span>\n                        </span>\n              <span class=\"onoffswitch-switch\"></span>\n            </label>\n          </div>\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <label class=\"col-md-2 control-label\" for=\"email\">Duration</label>\n        <div class=\"col-md-6 inline-row\">\n          <div class=\"input-group duration\">\n            <input type=\"text\" class=\"form-control\" placeholder=\"Duration\">\n            <select class=\"selectpicker\" style=\"display: none;\">\n              <option>miliseconds</option>\n              <option>seconds</option>\n              <option>minutes</option>\n              <option>hours</option>\n            </select><div class=\"btn-group bootstrap-select input-group-btn\"><button type=\"button\" class=\"btn dropdown-toggle selectpicker btn-default\" data-toggle=\"dropdown\" title=\"miliseconds\"><span class=\"filter-option pull-left\">miliseconds</span>&nbsp;<span class=\"caret\"></span></button><div class=\"dropdown-menu open\"><ul class=\"dropdown-menu inner selectpicker\" role=\"menu\"><li rel=\"0\" class=\"selected\"><a tabindex=\"0\" class=\"\" style=\"\"><span class=\"text\">miliseconds</span><i class=\"glyphicon glyphicon-ok icon-ok check-mark\"></i></a></li><li rel=\"1\"><a tabindex=\"0\" class=\"\" style=\"\"><span class=\"text\">seconds</span><i class=\"glyphicon glyphicon-ok icon-ok check-mark\"></i></a></li><li rel=\"2\"><a tabindex=\"0\" class=\"\" style=\"\"><span class=\"text\">minutes</span><i class=\"glyphicon glyphicon-ok icon-ok check-mark\"></i></a></li><li rel=\"3\"><a tabindex=\"0\" class=\"\" style=\"\"><span class=\"text\">hours</span><i class=\"glyphicon glyphicon-ok icon-ok check-mark\"></i></a></li></ul></div></div>\n          </div>\n          <span class=\"help-block\">Send alerts when the downtime lasts more than 2 minutes.</span>\n        </div>\n      </div>\n    </fieldset>\n    <div class=\"form-group\">\n      <div class=\"col-md-10 col-md-offset-2\">\n        <button type=\"button\" class=\"btn btn-primary\">Save</button>\n        <button type=\"button\" class=\"btn btn-default\">Cancel</button>\n      </div>\n    </div>\n  </form>\n\n</div>\n");
$templateCache.put("plugins/metrics/html/alerts-view.html","<p class=\"info-top\"><strong>{{mac.alertList.length}} alerts</strong> last week.</p>\n\n<div class=\"alerts-activity\">\n  <div ng-repeat=\"alert in mac.alertList\">\n    <div class=\"panel panel-default alert alert-danger\">\n      <div class=\"alert-icon\">\n        <i class=\"fa fa-line-chart\"></i>\n      </div>\n      <div class=\"date\">\n        {{alert.ctime | date:\'medium\' }}\n      </div>\n      <div class=\"event\">\n        <strong>Metrics</strong> met the condition.\n      </div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/metrics/html/alerts.html","<div class=\"row\" >\n  <div class=\"col-md-12\">\n    <h1>Alerts</h1>\n    <tabset>\n      <tab heading=\"Alerts\">\n        <div ng-include=\"\'plugins/metrics/html/alerts-view.html\'\" ng-controller=\"MetricsAlertController as mac\"></div>\n      </tab>\n      <tab heading=\"Alerts Setup\">\n        <div ng-include=\"\'plugins/metrics/html/alerts-setup.html\'\"></div>\n      </tab>\n    </tabset>\n  </div>\n</div>\n");
$templateCache.put("plugins/metrics/html/create-alert-form.html","<div ng-controller=\"QuickAlertController as qac\" ng-show=\"vm.chartData.dataPoints.length > 1\">\n  <div ng-show=\"!showQuickAlert\" class=\"col-sm-9 col-md-10 content\">\n    <button class=\"btn btn-primary pull-left\" ng-click=\"qac.toggleQuickAlert()\">Add an Alert</button>\n  </div>\n  <div ng-show=\"showQuickAlert\" class=\"col-sm-9 col-md-10 content\">\n    <h1>Add an Alert</h1>\n\n    <form class=\"form-horizontal\" name=\"addQuickAlertForm\" role=\"form\">\n      <div class=\"form-group\">\n        <label class=\"col-md-4 control-label\">\n          Fire when metric is\n        </label>\n\n        <div id=\"alert-radio-container\" class=\"col-md-4\">\n          <label class=\"radio-inline\">\n            <input type=\"radio\" ng-model=\"quickTrigger.operator\" class=\"radio\" value=\"LT\"> <\n          </label>\n          <label class=\"radio-inline\">\n            <input type=\"radio\" ng-model=\"quickTrigger.operator\" class=\"radio\" value=\"GT\"> >\n          </label>\n          <label class=\"radio-inline\">\n            <input type=\"radio\" ng-model=\"quickTrigger.operator\" class=\"radio\" value=\"LTE\"> <=\n          </label>\n          <label class=\"radio-inline\">\n            <input type=\"radio\" ng-model=\"quickTrigger.operator\" class=\"radio\" value=\"GTE\"> >=\n          </label>\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <label class=\"col-md-4 control-label\" for=\"threshold\">\n          Of threshold\n        </label>\n\n        <div class=\"col-md-2\">\n          <input type=\"number\" id=\"threshold\" ng-model=\"quickTrigger.threshold\" class=\"form-control\"\n                 ng-minlength=\"1\" required>\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <label class=\"col-md-4 control-label\" for=\"actions\">\n          Notify to:\n        </label>\n\n        <div class=\"col-md-3\">\n          <ui-select id=\"actions\" multiple ng-model=\"quickTrigger.actions\" theme=\"bootstrap\"\n                     ng-disabled=\"disabled\" close-on-select=\"false\">\n            <ui-select-match placeholder=\"Select action...\">{{$item}}</ui-select-match>\n            <ui-select-choices repeat=\"action in actions | filter:$select.search\">\n              {{ action }}\n            </ui-select-choices>\n          </ui-select>\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <div class=\"col-md-offset-4 col-md-6\">\n          <button class=\"btn btn-primary\" ng-click=\"qac.saveQuickAlert()\">Create Alert</button>\n          <button type=\"button\" class=\"btn btn-default\" ng-click=\"qac.toggleQuickAlert()\">Cancel</button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>\n");
$templateCache.put("plugins/metrics/html/response-time.html","<div ng-controller=\"MetricsViewController as vm\">\n\n  <div class=\"col-sm-9 col-md-10 content\">\n\n    <div class=\"well\" id=\"control-bar\">\n            <span class=\"col-md-3 col-sm-4 select-url-container\">\n                <select class=\"form-control input-sm select-url\" ng-model=\"vm.selectedResource\"\n                        ng-options=\"rs.parameters.url for rs in vm.resourceList\"></select>\n            </span>\n    </div>\n\n    <div class=\"col-sm-9 col-md-10 content response-time\">\n      <h1>Response Time</h1>\n\n      <div class=\"panel panel-default graph-summary\">\n        <div class=\"row\">\n          <div class=\"col-md-4 summary-item\">\n            <span class=\"data\">{{vm.average}} <span>ms</span></span>\n            <span class=\"item\">Average</span>\n          </div>\n          <div class=\"col-md-4 summary-item\">\n            <span class=\"data\">{{vm.median}} <span>ms</span></span>\n            <span class=\"item\">Median</span>\n          </div>\n          <div class=\"col-md-4 summary-item\">\n            <span class=\"data\">{{vm.percentile95th}} <span>ms</span></span>\n            <span class=\"item\">95th percentile</span>\n          </div>\n        </div>\n      </div>\n\n\n      <div class=\"panel panel-default graph\">\n        <div class=\"legend pull-left\" ng-show=\"vm.chartData.dataPoints.length > 0\">\n          <span><i class=\"fa fa-circle primary\"></i>Response Time</span>\n          <span><i class=\"fa fa-circle danger\"></i>Response Time (above the threshold)</span>\n        </div>\n        <div class=\"update pull-right\" ng-show=\"vm.chartData.dataPoints.length > 0\" >\n          <i class=\"fa fa-clock-o\"></i><a ng-click=\"vm.refreshChartDataNow(vm.getMetricId())\"><strong>Last\n          update</strong> 1 minutes ago</a>\n        </div>\n\n        <p class=\"label label-info waiting-label\" ng-hide=\"vm.chartData.dataPoints.length > 0\" >We are\n          collecting your initial data. Please be patient(could be up to a minute)...</p>\n\n\n        <div id=\"metrics-chart\">\n          <!-- HINT: colors for the chart can be changed in the hawkular-charts.css -->\n          <hawkular-chart\n            data=\"{{vm.chartData.dataPoints}}\"\n            chart-type=\"hawkularmetric\"\n            alert-value=\"500\"\n            y-axis-units=\"Response Time (ms)\"\n            chart-height=\"250\">\n          </hawkular-chart>\n        </div>\n      </div>\n\n\n    </div>\n\n\n  </div>\n\n</div>\n\n\n");
$templateCache.put("plugins/metrics/html/up-downtime.html","<section class=\"availability\" ng-controller=\"MetricsAvailabilityController as vm\">\n\n  <h1>Availability</h1>\n\n  <div class=\"panel panel-default summary\">\n    <div class=\"row\">\n      <div class=\"col-md-3 summary-item\">\n        <span class=\"data\">{{vm.availabilityPercent * 100}} %</span>\n        <span class=\"item\">Availability</span>\n      </div>\n      <div class=\"col-md-3 summary-item\">\n        <span class=\"data\">{{vm.downTimeDuration}}</span>\n        <span class=\"item\">Total Downtime Duration</span>\n      </div>\n      <div class=\"col-md-3 summary-item\">\n        <span class=\"data\">{{vm.lastDownTime | date:\'mediumDate\'}}</span>\n        <span class=\"item\">Last Downtime</span>\n      </div>\n      <div class=\"col-md-3 summary-item\">\n        <span class=\"data\">{{vm.downTimeEvents}}</span>\n        <span class=\"item\">Downtime Events</span>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"panel panel-default graph\">\n    <div class=\"update pull-right\">\n      <i class=\"fa fa-clock-o\"></i><strong>Last update</strong> 1 minutes ago\n    </div>\n    <div>TODO: Avail Chart goes here...</div>\n  </div>\n\n</section><!-- .availability -->\n");}]); hawtioPluginLoader.addModule("hawkular-ui-components-metrics-templates");
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpY2VuY2UudHh0IiwiL3NvdXJjZS9pbmNsdWRlcy5qcyIsIi9tZXRyaWNzL3RzL21ldHJpY3NHbG9iYWxzLnRzIiwiL21ldHJpY3MvdHMvbWV0cmljc1BsdWdpbi50cyIsIi9tZXRyaWNzL3RzL2FkZFVybFBhZ2UudHMiLCIvbWV0cmljcy90cy9tZXRyaWNzQWxlcnRzLnRzIiwiL21ldHJpY3MvdHMvbWV0cmljc0F2YWlsYWJpbGl0eVBhZ2UudHMiLCIvbWV0cmljcy90cy9tZXRyaWNzUmVzcG9uc2VBbGVydEZvcm0udHMiLCIvbWV0cmljcy90cy9tZXRyaWNzUmVzcG9uc2VQYWdlLnRzIiwidGVtcGxhdGVzLmpzIl0sIm5hbWVzIjpbIkhhd2t1bGFyTWV0cmljcyIsIkhhd2t1bGFyTWV0cmljcy5DaGFydFRpbWVSYW5nZSIsIkhhd2t1bGFyTWV0cmljcy5DaGFydFRpbWVSYW5nZS5jb25zdHJ1Y3RvciIsIkhhd2t1bGFyTWV0cmljcy5DaGFydFRpbWVSYW5nZS5pbml0IiwiSGF3a3VsYXJNZXRyaWNzLkNoYXJ0VGltZVJhbmdlLmdldFN0YXJ0RGF0ZSIsIkhhd2t1bGFyTWV0cmljcy5DaGFydFRpbWVSYW5nZS5nZXRFbmREYXRlIiwiSGF3a3VsYXJNZXRyaWNzLkNoYXJ0VGltZVJhbmdlLmdldEZvcm1hdHRlZFRpbWVSYW5nZSIsIkhhd2t1bGFyTWV0cmljcy5BZGRVcmxDb250cm9sbGVyIiwiSGF3a3VsYXJNZXRyaWNzLkFkZFVybENvbnRyb2xsZXIuY29uc3RydWN0b3IiLCJIYXdrdWxhck1ldHJpY3MuQWRkVXJsQ29udHJvbGxlci5hZGRVcmwiLCJIYXdrdWxhck1ldHJpY3MuQWRkVXJsQ29udHJvbGxlci5nZXRSZXNvdXJjZUxpc3QiLCJIYXdrdWxhck1ldHJpY3MuQWRkVXJsQ29udHJvbGxlci5nZXRBdmVyYWdlIiwiSGF3a3VsYXJNZXRyaWNzLkFkZFVybENvbnRyb2xsZXIuZGVsZXRlUmVzb3VyY2UiLCJIYXdrdWxhck1ldHJpY3MuTWV0cmljc0FsZXJ0Q29udHJvbGxlciIsIkhhd2t1bGFyTWV0cmljcy5NZXRyaWNzQWxlcnRDb250cm9sbGVyLmNvbnN0cnVjdG9yIiwiSGF3a3VsYXJNZXRyaWNzLk1ldHJpY3NBdmFpbGFiaWxpdHlDb250cm9sbGVyIiwiSGF3a3VsYXJNZXRyaWNzLk1ldHJpY3NBdmFpbGFiaWxpdHlDb250cm9sbGVyLmNvbnN0cnVjdG9yIiwiSGF3a3VsYXJNZXRyaWNzLk1ldHJpY3NBdmFpbGFiaWxpdHlDb250cm9sbGVyLm9uQ3JlYXRlIiwiSGF3a3VsYXJNZXRyaWNzLk1ldHJpY3NBdmFpbGFiaWxpdHlDb250cm9sbGVyLmNhbmNlbEF1dG9SZWZyZXNoIiwiSGF3a3VsYXJNZXRyaWNzLk1ldHJpY3NBdmFpbGFiaWxpdHlDb250cm9sbGVyLmF1dG9SZWZyZXNoQXZhaWxhYmlsaXR5IiwiSGF3a3VsYXJNZXRyaWNzLk1ldHJpY3NBdmFpbGFiaWxpdHlDb250cm9sbGVyLm5vRGF0YUZvdW5kRm9ySWQiLCJIYXdrdWxhck1ldHJpY3MuTWV0cmljc0F2YWlsYWJpbGl0eUNvbnRyb2xsZXIucmVmcmVzaEF2YWlsQ2hhcnREYXRhTm93IiwiSGF3a3VsYXJNZXRyaWNzLk1ldHJpY3NBdmFpbGFiaWxpdHlDb250cm9sbGVyLnJlZnJlc2hIaXN0b3JpY2FsQ2hhcnREYXRhIiwiSGF3a3VsYXJNZXRyaWNzLk1ldHJpY3NBdmFpbGFiaWxpdHlDb250cm9sbGVyLmdldE1ldHJpY0lkIiwiSGF3a3VsYXJNZXRyaWNzLk1ldHJpY3NBdmFpbGFiaWxpdHlDb250cm9sbGVyLmdldFJlc291cmNlQ29kZU1ldHJpY0lkIiwiSGF3a3VsYXJNZXRyaWNzLk1ldHJpY3NBdmFpbGFiaWxpdHlDb250cm9sbGVyLnJlZnJlc2hIaXN0b3JpY2FsQXZhaWxEYXRhRm9yVGltZXN0YW1wIiwiSGF3a3VsYXJNZXRyaWNzLk1ldHJpY3NBdmFpbGFiaWxpdHlDb250cm9sbGVyLmZvcm1hdEF2YWlsYWJpbGl0eSIsIkhhd2t1bGFyTWV0cmljcy5RdWlja0FsZXJ0Q29udHJvbGxlciIsIkhhd2t1bGFyTWV0cmljcy5RdWlja0FsZXJ0Q29udHJvbGxlci5jb25zdHJ1Y3RvciIsIkhhd2t1bGFyTWV0cmljcy5RdWlja0FsZXJ0Q29udHJvbGxlci50b2dnbGVRdWlja0FsZXJ0IiwiSGF3a3VsYXJNZXRyaWNzLlF1aWNrQWxlcnRDb250cm9sbGVyLmFsbEFjdGlvbnMiLCJIYXdrdWxhck1ldHJpY3MuUXVpY2tBbGVydENvbnRyb2xsZXIuZXJyb3JUb2FzdHIiLCJIYXdrdWxhck1ldHJpY3MuUXVpY2tBbGVydENvbnRyb2xsZXIuZXJyb3JIYW5kbGVyIiwiSGF3a3VsYXJNZXRyaWNzLlF1aWNrQWxlcnRDb250cm9sbGVyLnNhdmVRdWlja0FsZXJ0IiwiSGF3a3VsYXJNZXRyaWNzLk1ldHJpY3NWaWV3Q29udHJvbGxlciIsIkhhd2t1bGFyTWV0cmljcy5NZXRyaWNzVmlld0NvbnRyb2xsZXIuY29uc3RydWN0b3IiLCJIYXdrdWxhck1ldHJpY3MuTWV0cmljc1ZpZXdDb250cm9sbGVyLnJlc291cmNlTGlzdCIsIkhhd2t1bGFyTWV0cmljcy5NZXRyaWNzVmlld0NvbnRyb2xsZXIub25DcmVhdGUiLCJIYXdrdWxhck1ldHJpY3MuTWV0cmljc1ZpZXdDb250cm9sbGVyLmNhbmNlbEF1dG9SZWZyZXNoIiwiSGF3a3VsYXJNZXRyaWNzLk1ldHJpY3NWaWV3Q29udHJvbGxlci5hdXRvUmVmcmVzaCIsIkhhd2t1bGFyTWV0cmljcy5NZXRyaWNzVmlld0NvbnRyb2xsZXIubm9EYXRhRm91bmRGb3JJZCIsIkhhd2t1bGFyTWV0cmljcy5NZXRyaWNzVmlld0NvbnRyb2xsZXIucmVmcmVzaENoYXJ0RGF0YU5vdyIsIkhhd2t1bGFyTWV0cmljcy5NZXRyaWNzVmlld0NvbnRyb2xsZXIucmVmcmVzaEhpc3RvcmljYWxDaGFydERhdGEiLCJIYXdrdWxhck1ldHJpY3MuTWV0cmljc1ZpZXdDb250cm9sbGVyLmdldE1ldHJpY0lkIiwiSGF3a3VsYXJNZXRyaWNzLk1ldHJpY3NWaWV3Q29udHJvbGxlci5nZXRSZXNvdXJjZUR1cmF0aW9uTWV0cmljSWQiLCJIYXdrdWxhck1ldHJpY3MuTWV0cmljc1ZpZXdDb250cm9sbGVyLnJlZnJlc2hTdW1tYXJ5RGF0YSIsIkhhd2t1bGFyTWV0cmljcy5NZXRyaWNzVmlld0NvbnRyb2xsZXIucmVmcmVzaEhpc3RvcmljYWxDaGFydERhdGFGb3JUaW1lc3RhbXAiLCJIYXdrdWxhck1ldHJpY3MuTWV0cmljc1ZpZXdDb250cm9sbGVyLmZvcm1hdEJ1Y2tldGVkQ2hhcnRPdXRwdXQiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNiQTtBQUNBO0FDZ0JBLElBQU8sZUFBZSxDQXVEckI7QUF2REQsV0FBTyxlQUFlLEVBQUMsQ0FBQztJQUdYQSwwQkFBVUEsR0FBR0Esa0JBQWtCQSxDQUFDQTtJQUVoQ0EsbUJBQUdBLEdBQWtCQSxNQUFNQSxDQUFDQSxHQUFHQSxDQUFDQSwwQkFBVUEsQ0FBQ0EsQ0FBQ0E7SUFFNUNBLDRCQUFZQSxHQUFHQSxzQkFBc0JBLENBQUNBO0lBTXRDQSw4QkFBY0EsR0FBR0EsTUFBTUEsQ0FBQ0E7SUFFeEJBLDhCQUFjQSxHQUFHQSxFQUFFQSxDQUFDQTtJQUNwQkEsaUNBQWlCQSxHQUFHQSxFQUFFQSxDQUFDQTtJQUV2QkEsa0NBQWtCQSxHQUFHQSxFQUFFQSxDQUFDQTtJQUV4QkEsb0NBQW1DQSxDQUFDQTtJQUUvQ0EsSUFBYUEsY0FBY0E7UUFJekJDLFNBSldBLGNBQWNBLENBSUxBLHNCQUE2QkE7WUFBN0JDLDJCQUFzQkEsR0FBdEJBLHNCQUFzQkEsQ0FBT0E7WUFFL0NBLElBQUlBLENBQUNBLElBQUlBLEVBQUVBLENBQUNBO1FBQ2RBLENBQUNBO1FBRURELDZCQUFJQSxHQUFKQTtZQUNFRSxJQUFJQSxDQUFDQSxZQUFZQSxHQUFHQSxNQUFNQSxFQUFFQSxDQUFDQSxPQUFPQSxFQUFFQSxDQUFDQTtZQUN2Q0EsSUFBSUEsQ0FB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QkFDMURBLEtBQUtBLEVBQUVBLEtBQUtBLENBQUNBLEtBQUtBO2lCQUNuQkEsQ0FBQ0E7WUFDSkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDTEEsQ0FBQ0E7UUEzTmNiLDZCQUFPQSxHQUFHQSxDQUFDQSxRQUFRQSxFQUFFQSxZQUFZQSxFQUFFQSxXQUFXQSxFQUFFQSxNQUFNQSxFQUFFQSxnQkFBZ0JBLEVBQUVBLG1CQUFtQkEsRUFBRUEsY0FBY0EsQ0FBQ0EsQ0FBQ0E7UUE2TmhJQSw0QkFBQ0E7SUFBREEsQ0EvTkFsQyxBQStOQ2tDLElBQUFsQztJQS9OWUEscUNBQXFCQSxHQUFyQkEscUJBK05aQSxDQUFBQTtJQUVEQSx1QkFBT0EsQ0FBQ0EsVUFBVUEsQ0FBQ0EsdUJBQXVCQSxFQUFFQSxxQkFBcUJBLENBQUNBLENBQUNBO0FBR3JFQSxDQUFDQSxFQW5RTSxlQUFlLEtBQWYsZUFBZSxRQW1RckI7O0FDclJEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Imhhd2t1bGFyLXVpLWNvbXBvbmVudHMtbWV0cmljcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyBDb3B5cmlnaHQgMjAxNC0yMDE1IFJlZCBIYXQsIEluYy4gYW5kL29yIGl0cyBhZmZpbGlhdGVzXG4vLy8gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycyBhcyBpbmRpY2F0ZWQgYnkgdGhlIEBhdXRob3IgdGFncy5cbi8vL1xuLy8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy8vXG4vLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vL1xuLy8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLiIsbnVsbCwiLy8vIENvcHlyaWdodCAyMDE0LTIwMTUgUmVkIEhhdCwgSW5jLiBhbmQvb3IgaXRzIGFmZmlsaWF0ZXNcbi8vLyBhbmQgb3RoZXIgY29udHJpYnV0b3JzIGFzIGluZGljYXRlZCBieSB0aGUgQGF1dGhvciB0YWdzLlxuLy8vXG4vLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vLy9cbi8vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy8vXG4vLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9pbmNsdWRlcy50c1wiLz5cblxubW9kdWxlIEhhd2t1bGFyTWV0cmljcyB7XG5cbiAgLy8vIHNvbWUgY29uZmlnIHZhcnNcbiAgZXhwb3J0IHZhciBwbHVnaW5OYW1lID0gXCJoYXdrdWxhci1tZXRyaWNzXCI7XG5cbiAgZXhwb3J0IHZhciBsb2c6TG9nZ2luZy5Mb2dnZXIgPSBMb2dnZXIuZ2V0KHBsdWdpbk5hbWUpO1xuXG4gIGV4cG9ydCB2YXIgdGVtcGxhdGVQYXRoID0gXCJwbHVnaW5zL21ldHJpY3MvaHRtbFwiO1xuXG5cbiAgLy8vIFRoZXNlIGFyZSBwbHVnaW4gZ2xvYmFscyB1c2VkIGFjcm9zcyBzZXZlcmFsIHNjcmVlbnMgKHRoaW5rIHNlc3Npb24gdmFycyBmcm9tIHNlcnZlciBzaWRlIHByb2dyYW1taW5nKVxuXG4gIC8vLyBAdG9kbzogdGhpcyB3aWxsIGdvIGF3YXkgb25jZSB3ZSBoYXZlIEtleUNsb2FrIGludGVncmF0aW9uXG4gIGV4cG9ydCB2YXIgZ2xvYmFsVGVuYW50SWQgPSBcInRlc3RcIjtcblxuICBleHBvcnQgdmFyIGdsb2JhbE1ldHJpY0lkID0gXCJcIjtcbiAgZXhwb3J0IHZhciBnbG9iYWxSZXNvdXJjZVVybCA9IFwiXCI7XG5cbiAgZXhwb3J0IHZhciBnbG9iYWxSZXNvdXJjZUxpc3QgPSBbXTtcblxuICBleHBvcnQgdmFyIGdsb2JhbENoYXJ0VGltZVJhbmdlOkNoYXJ0VGltZVJhbmdlO1xuXG4gIGV4cG9ydCBjbGFzcyBDaGFydFRpbWVSYW5nZSB7XG4gICAgc3RhcnRUaW1lc3RhbXA6bnVtYmVyO1xuICAgIGVuZFRpbWVzdGFtcDpudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGluaXRpYWxIb3Vyc0RpZmZlcmVuY2U6bnVtYmVyKSB7XG4gICAgICAvLy8ganVzdCBzZXQgYSBkZWZhdWx0IGlmIG5vIGN0b3JzIGdpdmVuXG4gICAgICB0aGlzLmluaXQoKTtcbiAgICB9XG5cbiAgICBpbml0KCkge1xuICAgICAgdGhpcy5lbmRUaW1lc3RhbXAgPSBtb21lbnQoKS52YWx1ZU9mKCk7XG4gICAgICB0aGlzLnN0YXJ0VGltZXN0YW1wID0gbW9tZW50KCkuc3VidHJhY3QoJ2hvdXInLCB0aGlzLmluaXRpYWxIb3Vyc0RpZmZlcmVuY2UpLnZhbHVlT2YoKTtcbiAgICB9XG5cbiAgICBnZXRTdGFydERhdGUoKTpEYXRlIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZSh0aGlzLnN0YXJ0VGltZXN0YW1wKTtcbiAgICB9XG5cbiAgICBnZXRFbmREYXRlKCk6RGF0ZSB7XG4gICAgICByZXR1cm4gbmV3IERhdGUodGhpcy5lbmRUaW1lc3RhbXApO1xuICAgIH1cblxuICAgIGdldEZvcm1hdHRlZFRpbWVSYW5nZSgpOnN0cmluZyB7XG4gICAgICAvLy9AdG9kbzogaWYgbGVzcyA8IDI0IGhyIHNob3cgdGltZXMgb3RoZXJ3aXNlIGRhdGVzXG4gICAgICAvLy9yZXR1cm4gbW9tZW50KHRoaXMuc3RhcnRUaW1lc3RhbXApLmZvcm1hdCgnTU1NIGRvJykgKyAnIC0gJyArIG1vbWVudCh0aGlzLmVuZFRpbWVzdGFtcCkuZm9ybWF0KCdNTU0gZG8nKVxuICAgICAgLy8vIGlmIHdpdGhpbiA3IGRheXNcbiAgICAgIC8vcmV0dXJuIG1vbWVudCh0aGlzLnN0YXJ0VGltZXN0YW1wKS5mb3JtYXQoJ2RkZCwgaEEnKSArICcgLSAnICsgbW9tZW50KHRoaXMuZW5kVGltZXN0YW1wKS5mb3JtYXQoJ2RkZCwgaEEnKTtcbiAgICAgIC8vIGlmIHdpdGhpbiAyNCBob3Vyc1xuICAgICAgcmV0dXJuIG1vbWVudCh0aGlzLnN0YXJ0VGltZXN0YW1wKS5mb3JtYXQoJ0g6bW0nKSArICcgLSAnICsgbW9tZW50KHRoaXMuZW5kVGltZXN0YW1wKS5mb3JtYXQoJ0g6bW0nKVxuICAgICAgICArICcgKCcgKyBtb21lbnQodGhpcy5lbmRUaW1lc3RhbXApLmZyb20obW9tZW50KHRoaXMuc3RhcnRUaW1lc3RhbXApLCB0cnVlKSArICcpJztcbiAgICB9XG4gIH1cblxufVxuIiwiLy8vIENvcHlyaWdodCAyMDE0LTIwMTUgUmVkIEhhdCwgSW5jLiBhbmQvb3IgaXRzIGFmZmlsaWF0ZXNcbi8vLyBhbmQgb3RoZXIgY29udHJpYnV0b3JzIGFzIGluZGljYXRlZCBieSB0aGUgQGF1dGhvciB0YWdzLlxuLy8vXG4vLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vLy9cbi8vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy8vXG4vLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9pbmNsdWRlcy50c1wiLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJtZXRyaWNzR2xvYmFscy50c1wiLz5cblxubW9kdWxlIEhhd2t1bGFyTWV0cmljcyB7XG5cbiAgZXhwb3J0IHZhciBfbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoSGF3a3VsYXJNZXRyaWNzLnBsdWdpbk5hbWUsIFsnbmdSZXNvdXJjZScsICd1aS5zZWxlY3QnLCAnaGF3a3VsYXJDaGFydHMnLFxuICAgICdoYXdrdWxhci5zZXJ2aWNlcycsICd1aS5ib290c3RyYXAnLCAndG9wYmFyJ10pO1xuXG4gIHZhciBtZXRyaWNzVGFiOmFueTtcblxuICBfbW9kdWxlLmNvbmZpZyhbJyRodHRwUHJvdmlkZXInLCAnJGxvY2F0aW9uUHJvdmlkZXInLCAnJHJvdXRlUHJvdmlkZXInLCAnSGF3dGlvTmF2QnVpbGRlclByb3ZpZGVyJywgKCRodHRwUHJvdmlkZXIsICRsb2NhdGlvblByb3ZpZGVyLCAkcm91dGVQcm92aWRlcjpuZy5yb3V0ZS5JUm91dGVQcm92aWRlciwgbmF2QnVpbGRlcjpIYXd0aW9NYWluTmF2LkJ1aWxkZXJGYWN0b3J5KSA9PiB7XG5cbiAgICBtZXRyaWNzVGFiID0gbmF2QnVpbGRlci5jcmVhdGUoKVxuICAgICAgLmlkKEhhd2t1bGFyTWV0cmljcy5wbHVnaW5OYW1lKVxuICAgICAgLnRpdGxlKCgpID0+ICdNZXRyaWNzJylcbiAgICAgIC5ocmVmKCgpID0+ICcvbWV0cmljcycpXG4gICAgICAuc3ViUGF0aCgnQWRkIFVybCcsICdhZGRVcmwnLCBuYXZCdWlsZGVyLmpvaW4oSGF3a3VsYXJNZXRyaWNzLnRlbXBsYXRlUGF0aCwgJ2FkZC11cmwuaHRtbCcpKVxuICAgICAgLnN1YlBhdGgoJ0hvbWUnLCAnaG9tZScsIG5hdkJ1aWxkZXIuam9pbihIYXdrdWxhck1ldHJpY3MudGVtcGxhdGVQYXRoLCAnaG9tZS5odG1sJykpXG4gICAgICAuc3ViUGF0aCgnUmVzcG9uc2UgVGltZScsICdyZXNwb25zZVRpbWUnLCBuYXZCdWlsZGVyLmpvaW4oSGF3a3VsYXJNZXRyaWNzLnRlbXBsYXRlUGF0aCwgJ3Jlc3BvbnNlLXRpbWUuaHRtbCcpKVxuICAgICAgLnN1YlBhdGgoJ1VwL0Rvd250aW1lJywgJ3VwRG93bnRpbWUnLCBuYXZCdWlsZGVyLmpvaW4oSGF3a3VsYXJNZXRyaWNzLnRlbXBsYXRlUGF0aCwgJ3VwLWRvd250aW1lLmh0bWwnKSlcbiAgICAgIC5zdWJQYXRoKCdBbGVydHMnLCAnYWxlcnRzJywgbmF2QnVpbGRlci5qb2luKEhhd2t1bGFyTWV0cmljcy50ZW1wbGF0ZVBhdGgsICdhbGVydHMuaHRtbCcpKVxuICAgICAgLmJ1aWxkKCk7XG5cbiAgICBuYXZCdWlsZGVyLmNvbmZpZ3VyZVJvdXRpbmcoJHJvdXRlUHJvdmlkZXIsIG1ldHJpY3NUYWIpO1xuXG4gICAgJGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKHRydWUpO1xuICB9XSk7XG5cbiAgX21vZHVsZS5ydW4oWydIYXd0aW9OYXYnLCAoSGF3dGlvTmF2Okhhd3Rpb01haW5OYXYuUmVnaXN0cnkpID0+IHtcbiAgICBIYXd0aW9OYXYuYWRkKG1ldHJpY3NUYWIpO1xuICAgIGxvZy5kZWJ1ZygnbG9hZGVkIE1ldHJpY3MgUGx1Z2luJyk7XG4gIH1dKTtcblxuICAvLy9AdG9kbzogbW92ZSB0aGlzIHNvbWVwbGFjZSBjb21tb25cbiAgX21vZHVsZS5kaXJlY3RpdmUoJ2hrRW50ZXInLCAoKSA9PiB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgIGVsZW1lbnQuYmluZCgna2V5ZG93biBrZXlwcmVzcycsIChldmVudCkgPT4ge1xuICAgICAgICBpZiAoZXZlbnQud2hpY2ggPT09IDEzKSB7XG4gICAgICAgICAgc2NvcGUuJGFwcGx5KCgpID0+IHtcbiAgICAgICAgICAgIHNjb3BlLiRldmFsKGF0dHJzLmhrRW50ZXIpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcbiAgfSk7XG5cbiAgX21vZHVsZS5jb25maWcoW1wiJHJvdXRlUHJvdmlkZXJcIiwgKCRyb3V0ZVByb3ZpZGVyKSA9PiB7XG4gICAgJHJvdXRlUHJvdmlkZXIuXG4gICAgICAgIHdoZW4oJy9tZXRyaWNzL3Jlc3BvbnNlVGltZScsIHt0ZW1wbGF0ZVVybDogJ3BsdWdpbnMvbWV0cmljcy9odG1sL3Jlc3BvbnNlLXRpbWUuaHRtbCcsXG4gICAgICAgIHJlc29sdmU6IHtcbiAgICAgICAgICBoa1Jlc291cmNlTGlzdCA6IGZ1bmN0aW9uKCRmaWx0ZXIsICRsb2NhdGlvbiwgJHEsIEhhd2t1bGFySW52ZW50b3J5KSB7XG4gICAgICAgICAgICB2YXIgcmVzUHJvbWlzZSA9IEhhd2t1bGFySW52ZW50b3J5LlJlc291cmNlLnF1ZXJ5KHt0ZW5hbnRJZDogZ2xvYmFsVGVuYW50SWR9KS4kcHJvbWlzZTtcbiAgICAgICAgICAgIHJlc1Byb21pc2UudGhlbihmdW5jdGlvbihoa1Jlc291cmNlTGlzdCl7XG4gICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvbWV0cmljcy9yZXNwb25zZVRpbWUvJyArIGhrUmVzb3VyY2VMaXN0WzBdLmlkKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICRsb2NhdGlvbi51cmwoJy9lcnJvcicpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIFJldHVybmluZyBhIHByb21pc2Ugd2hpY2ggd291bGQgbmV2ZXIgYmUgcmVzb2x2ZWQsIHNvIHRoYXQgdGhlIHBhZ2Ugd291bGQgbm90IHJlbmRlci5cbiAgICAgICAgICAgIC8vIFRoZSBwYWdlIHdpbGwgYmUgcmVkaXJlY3RlZCBiZWZvcmUgcmVuZGVyaW5nIGJhc2VkIG9uIHRoZSByZXNvdXJjZSBsaXN0IGxvYWRlZCBhYm92ZS5cbiAgICAgICAgICAgIHJldHVybiAkcS5kZWZlcigpLnByb21pc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9fSkuXG4gICAgICAgIHdoZW4oJy9tZXRyaWNzL3Jlc3BvbnNlVGltZS86cmVzb3VyY2VJZC8nLCB7dGVtcGxhdGVVcmw6ICdwbHVnaW5zL21ldHJpY3MvaHRtbC9yZXNwb25zZS10aW1lLmh0bWwnfSkuXG4gICAgICAgIHdoZW4oJy9tZXRyaWNzL3Jlc3BvbnNlVGltZS86cmVzb3VyY2VJZC86cmFuZ2VTdGFydCcsIHt0ZW1wbGF0ZVVybDogJ3BsdWdpbnMvbWV0cmljcy9odG1sL3Jlc3BvbnNlLXRpbWUuaHRtbCd9KS5cbiAgICAgICAgd2hlbignL21ldHJpY3MvcmVzcG9uc2VUaW1lLzpyZXNvdXJjZUlkLzpyYW5nZVN0YXJ0LzpyYW5nZUVuZCcsIHt0ZW1wbGF0ZVVybDogJ3BsdWdpbnMvbWV0cmljcy9odG1sL3Jlc3BvbnNlLXRpbWUuaHRtbCd9KS5cbiAgICAgICAgd2hlbignL21ldHJpY3MvYXZhaWxhYmlsaXR5LzpyZXNvdXJjZUlkJywge3RlbXBsYXRlVXJsOiAncGx1Z2lucy9tZXRyaWNzL2h0bWwvcmVzcG9uc2UtdGltZS5odG1sJ30pO1xuICB9XSk7XG5cbiAgaGF3dGlvUGx1Z2luTG9hZGVyLmFkZE1vZHVsZShIYXdrdWxhck1ldHJpY3MucGx1Z2luTmFtZSk7XG59XG4iLCIvLy8gQ29weXJpZ2h0IDIwMTQtMjAxNSBSZWQgSGF0LCBJbmMuIGFuZC9vciBpdHMgYWZmaWxpYXRlc1xuLy8vIGFuZCBvdGhlciBjb250cmlidXRvcnMgYXMgaW5kaWNhdGVkIGJ5IHRoZSBAYXV0aG9yIHRhZ3MuXG4vLy9cbi8vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vL1xuLy8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vLy9cbi8vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIm1ldHJpY3NQbHVnaW4udHNcIi8+XG5cbm1vZHVsZSBIYXdrdWxhck1ldHJpY3Mge1xuXG5cbiAgZXhwb3J0IGNsYXNzIEFkZFVybENvbnRyb2xsZXIge1xuICAgIC8vLyB0aGlzIGlzIGZvciBtaW5pZmljYXRpb24gcHVycG9zZXNcbiAgICBwdWJsaWMgc3RhdGljICRpbmplY3QgPSBbJyRsb2NhdGlvbicsICckc2NvcGUnLCAnJHJvb3RTY29wZScsICckbG9nJywgJyRmaWx0ZXInLCAnSGF3a3VsYXJJbnZlbnRvcnknLCAnSGF3a3VsYXJNZXRyaWMnLCAnSGF3a3VsYXJBbGVydCcsICdEYXRhUmVzb3VyY2UnXTtcblxuICAgIHByaXZhdGUgaHR0cFVyaVBhcnQgPSAnaHR0cDovLyc7XG5cbiAgICBwcml2YXRlIHJlc291cmNlTGlzdDtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgJGxvY2F0aW9uOm5nLklMb2NhdGlvblNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSAkc2NvcGU6YW55LFxuICAgICAgICAgICAgICAgIHByaXZhdGUgJHJvb3RTY29wZTpuZy5JUm9vdFNjb3BlU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlICRsb2c6bmcuSUxvZ1NlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSAkZmlsdGVyOm5nLklGaWx0ZXJTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgSGF3a3VsYXJJbnZlbnRvcnk6YW55LFxuICAgICAgICAgICAgICAgIHByaXZhdGUgSGF3a3VsYXJNZXRyaWM6YW55LFxuICAgICAgICAgICAgICAgIHByaXZhdGUgSGF3a3VsYXJBbGVydDphbnksXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBEYXRhUmVzb3VyY2U6YW55LFxuICAgICAgICAgICAgICAgIHB1YmxpYyByZXNvdXJjZVVybDpzdHJpbmcpIHtcbiAgICAgICRzY29wZS52bSA9IHRoaXM7XG4gICAgICB0aGlzLnJlc291cmNlVXJsID0gdGhpcy5odHRwVXJpUGFydDtcbiAgICAgIHRoaXMucmVzb3VyY2VMaXN0ID0gdGhpcy5nZXRSZXNvdXJjZUxpc3QoKTtcbiAgICB9XG5cbiAgICBhZGRVcmwodXJsOnN0cmluZyk6dm9pZCB7XG4gICAgICB2YXIgcmVzb3VyY2UgPSB7XG4gICAgICAgIHR5cGU6ICdVUkwnLFxuICAgICAgICBpZDogJycsXG4gICAgICAgIHBhcmFtZXRlcnM6IHtcbiAgICAgICAgICB1cmw6IHVybFxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB0aGlzLiRsb2cuaW5mbygnQWRkaW5nIG5ldyBSZXNvdXJjZSBVcmwgdG8gSGF3a3VsYXItaW52ZW50b3J5OiAnICsgdXJsKTtcblxuICAgICAgZ2xvYmFsQ2hhcnRUaW1lUmFuZ2UgPSBuZXcgQ2hhcnRUaW1lUmFuZ2UoMSk7XG5cbiAgICAgIC8vLyBBZGQgdGhlIFJlc291cmNlXG4gICAgICB0aGlzLkhhd2t1bGFySW52ZW50b3J5LlJlc291cmNlLnNhdmUoe3RlbmFudElkOiBnbG9iYWxUZW5hbnRJZH0sIHJlc291cmNlKS4kcHJvbWlzZVxuICAgICAgICAudGhlbigobmV3UmVzb3VyY2UpID0+IHtcbiAgICAgICAgICB0aGlzLkRhdGFSZXNvdXJjZS51cGRhdGVSZXNvdXJjZXMoKTtcbiAgICAgICAgICAvLyB3ZSBub3cgaGF2ZSBhIHJlc291cmNlSWQgZnJvbSB0aGlzIGNhbGxcbiAgICAgICAgICBnbG9iYWxNZXRyaWNJZCA9IG5ld1Jlc291cmNlLmlkO1xuICAgICAgICAgIGdsb2JhbFJlc291cmNlVXJsID0gcmVzb3VyY2UucGFyYW1ldGVycy51cmw7XG4gICAgICAgICAgY29uc29sZS5kaXIobmV3UmVzb3VyY2UpO1xuICAgICAgICAgIHRoaXMuJGxvZy5pbmZvKCdOZXcgUmVzb3VyY2UgSUQ6ICcgKyBnbG9iYWxNZXRyaWNJZCArICcgY3JlYXRlZCBmb3IgdXJsOiAnICsgZ2xvYmFsUmVzb3VyY2VVcmwpO1xuICAgICAgICAgIHZhciBtZXRyaWNzID0gW3tcbiAgICAgICAgICAgIG5hbWU6IGdsb2JhbE1ldHJpY0lkICsgJy5zdGF0dXMuZHVyYXRpb24nLFxuICAgICAgICAgICAgdW5pdDogJ01JTExJX1NFQ09ORCcsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1Jlc3BvbnNlIFRpbWUgaW4gbXMuJ1xuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIG5hbWU6IGdsb2JhbE1ldHJpY0lkICsgJy5zdGF0dXMuY29kZScsXG4gICAgICAgICAgICB1bml0OiAnTk9ORScsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1N0YXR1cyBDb2RlJ1xuICAgICAgICAgIH1dO1xuXG5cbiAgICAgICAgICAvLy8gRm9yIHJpZ2h0IG5vdyB3ZSB3aWxsIGp1c3QgUmVnaXN0ZXIgYSBjb3VwbGUgb2YgbWV0cmljcyBhdXRvbWF0aWNhbGx5XG4gICAgICAgICAgdGhpcy5IYXdrdWxhckludmVudG9yeS5NZXRyaWMuc2F2ZSh7XG4gICAgICAgICAgICB0ZW5hbnRJZDogZ2xvYmFsVGVuYW50SWQsXG4gICAgICAgICAgICByZXNvdXJjZUlkOiBuZXdSZXNvdXJjZS5pZFxuICAgICAgICAgIH0sIG1ldHJpY3MpLiRwcm9taXNlLnRoZW4oKG5ld01ldHJpY3MpID0+IHtcbiAgICAgICAgICAgICAgLy8gVE9ETzogQWRkIGF2YWlsYWJpbGl0eS4uLlxuICAgICAgICAgICAgICB0b2FzdHIuaW5mbygnWW91ciBkYXRhIGlzIGJlaW5nIGNvbGxlY3RlZC4gUGxlYXNlIGJlIHBhdGllbnQgKHNob3VsZCBiZSBhYm91dCBhbm90aGVyIG1pbnV0ZSkuJyk7XG4gICAgICAgICAgICAgIHRoaXMuJGxvY2F0aW9uLnVybCgnL21ldHJpY3MvcmVzcG9uc2VUaW1lLycgKyBuZXdSZXNvdXJjZS5pZCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZ2V0UmVzb3VyY2VMaXN0KCk6YW55IHtcbiAgICAgIHJldHVybiB0aGlzLkhhd2t1bGFySW52ZW50b3J5LlJlc291cmNlLnF1ZXJ5KHt0ZW5hbnRJZDogZ2xvYmFsVGVuYW50SWR9LCAoYVJlc291cmNlTGlzdCkgPT4ge1xuICAgICAgICB0aGlzLnJlc291cmNlTGlzdCA9IGFSZXNvdXJjZUxpc3Q7XG4gICAgICAgIGFuZ3VsYXIuZm9yRWFjaCh0aGlzLnJlc291cmNlTGlzdCwgZnVuY3Rpb24ocmVzLCBpZHgpIHtcbiAgICAgICAgICB0aGlzLkhhd2t1bGFyTWV0cmljLk51bWVyaWNNZXRyaWNEYXRhLnF1ZXJ5TWV0cmljcyh7XG4gICAgICAgICAgICB0ZW5hbnRJZDogZ2xvYmFsVGVuYW50SWQsIHJlc291cmNlSWQ6IHJlcy5pZCwgbnVtZXJpY0lkOiAocmVzLmlkICsgJy5zdGF0dXMuZHVyYXRpb24nKSxcbiAgICAgICAgICAgIHN0YXJ0OiBtb21lbnQoKS5zdWJ0cmFjdCgxLCAnaG91cicpLnZhbHVlT2YoKSwgZW5kOiBtb21lbnQoKS52YWx1ZU9mKCl9LCAocmVzb3VyY2UpID0+IHtcbiAgICAgICAgICAgIC8vIEZJWE1FOiBXb3JrIGRhdGEgc28gaXQgd29ya3MgZm9yIGNoYXJ0ID9cbiAgICAgICAgICAgIHJlc1sncmVzcG9uc2VUaW1lJ10gPSByZXNvdXJjZTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0aGlzLkhhd2t1bGFyTWV0cmljLk51bWVyaWNNZXRyaWNEYXRhLnF1ZXJ5TWV0cmljcyh7XG4gICAgICAgICAgICB0ZW5hbnRJZDogZ2xvYmFsVGVuYW50SWQsIHJlc291cmNlSWQ6IHJlcy5pZCwgbnVtZXJpY0lkOiAocmVzLmlkICsgJy5zdGF0dXMuY29kZScpLFxuICAgICAgICAgICAgc3RhcnQ6IG1vbWVudCgpLnN1YnRyYWN0KDEsICdob3VyJykudmFsdWVPZigpLCBlbmQ6IG1vbWVudCgpLnZhbHVlT2YoKX0sIChyZXNvdXJjZSkgPT4ge1xuICAgICAgICAgICAgLy8gRklYTUU6IFVzZSBhdmFpbGFiaWxpdHkgaW5zdGVhZC4uXG4gICAgICAgICAgICByZXNbJ2lzVXAnXSA9IChyZXNvdXJjZVswXS52YWx1ZSA+PSAyMDAgJiYgcmVzb3VyY2VbMF0udmFsdWUgPCAzMDApO1xuICAgICAgICAgICAgdmFyIHVwVGltZSA9IDA7XG4gICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgcmVzb3VyY2UubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgaWYocmVzb3VyY2VbaV0udmFsdWUgPj0gMjAwICYmIHJlc291cmNlW2ldLnZhbHVlIDwgMzAwKSB7XG4gICAgICAgICAgICAgICAgdXBUaW1lKys7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc1snYXZhaWxhYmlsaXR5J10gPSB1cFRpbWUvcmVzb3VyY2UubGVuZ3RoICogMTAwO1xuICAgICAgICAgICAgcmVzWydkb3duVGltZSddID0gcmVzb3VyY2UubGVuZ3RoIC0gdXBUaW1lO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRoaXMuSGF3a3VsYXJBbGVydC5BbGVydC5xdWVyeSh7IHF1ZXJ5OiByZXMuaWQsIHN0YXJ0OiBtb21lbnQoKS5zdWJ0cmFjdCgxLCAnaG91cicpLnZhbHVlT2YoKSxcbiAgICAgICAgICAgIGVuZDogbW9tZW50KCkudmFsdWVPZigpfSwgKGFsZXJ0c0xpc3QpID0+IHtcbiAgICAgICAgICAgIHJlc1snYWxlcnRzJ10gPSBbXTtcbiAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBhbGVydHNMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIGlmIChhbGVydHNMaXN0W2ldLmV2YWxTZXRzWzBdWzBdLmNvbmRpdGlvbi5kYXRhSWQuaW5kZXhPZihyZXMuaWQpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmVzWydhbGVydHMnXS5wdXNoKGFsZXJ0c0xpc3RbaV0uZXZhbFNldHNbMF1bMF0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmVzWyd1cGRhdGVUaW1lJ10gPSBuZXcgRGF0ZSgpO1xuICAgICAgICB9LCB0aGlzKTtcblxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZ2V0QXZlcmFnZShkYXRhOmFueSwgZmllbGQ6c3RyaW5nKTpudW1iZXIge1xuICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgdmFyIHN1bSA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHN1bSArPSBwYXJzZUludChkYXRhW2ldW2ZpZWxkXSwgMTApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBNYXRoLnJvdW5kKHN1bSAvIGRhdGEubGVuZ3RoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBkZWxldGVSZXNvdXJjZShyZXNvdXJjZTphbnkpOmFueSB7XG4gICAgICAvLyBUT0RPOiB1c2UgbW9kYWwgdG8gY29uZmlybSBkZWxldGUuLi5cbiAgICAgIHRoaXMuSGF3a3VsYXJJbnZlbnRvcnkuUmVzb3VyY2UuZGVsZXRlKHtcbiAgICAgICAgdGVuYW50SWQ6IGdsb2JhbFRlbmFudElkLFxuICAgICAgICByZXNvdXJjZUlkOiByZXNvdXJjZS5pZFxuICAgICAgfSkuJHByb21pc2UudGhlbigocmVzKSA9PiB7XG4gICAgICAgICAgdG9hc3RyLmluZm8oJ1RoZSBzaXRlICcgKyByZXNvdXJjZS5wYXJhbWV0ZXJzLnVybCArICcgaXMgbm8gbG9uZ2VyIGJlaW5nIG1vbml0b3JlZC4nKTtcbiAgICAgICAgICB0aGlzLnJlc291cmNlTGlzdCA9IHRoaXMuZ2V0UmVzb3VyY2VMaXN0KCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICB9XG5cbiAgX21vZHVsZS5jb250cm9sbGVyKCdIYXdrdWxhck1ldHJpY3MuQWRkVXJsQ29udHJvbGxlcicsIEFkZFVybENvbnRyb2xsZXIpO1xuXG59XG4iLCIvLy8gQ29weXJpZ2h0IDIwMTQtMjAxNSBSZWQgSGF0LCBJbmMuIGFuZC9vciBpdHMgYWZmaWxpYXRlc1xuLy8vIGFuZCBvdGhlciBjb250cmlidXRvcnMgYXMgaW5kaWNhdGVkIGJ5IHRoZSBAYXV0aG9yIHRhZ3MuXG4vLy9cbi8vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vL1xuLy8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vLy9cbi8vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIm1ldHJpY3NQbHVnaW4udHNcIi8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vaW5jbHVkZXMudHNcIi8+XG5cbm1vZHVsZSBIYXdrdWxhck1ldHJpY3Mge1xuXG4gIGV4cG9ydCBpbnRlcmZhY2UgSU1ldHJpY3NBbGVydENvbnRyb2xsZXIge1xuXG4gIH1cblxuICBleHBvcnQgY2xhc3MgTWV0cmljc0FsZXJ0Q29udHJvbGxlciBpbXBsZW1lbnRzIElNZXRyaWNzQWxlcnRDb250cm9sbGVyIHtcbiAgICBwdWJsaWMgc3RhdGljICAkaW5qZWN0ID0gWyckc2NvcGUnLCAnSGF3a3VsYXJBbGVydCcsICckbG9nJywgJyRxJ107XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlICRzY29wZTphbnksXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBIYXdrdWxhckFsZXJ0OmFueSxcbiAgICAgICAgICAgICAgICBwcml2YXRlICRsb2c6IG5nLklMb2dTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgJHE6IG5nLklRU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIGFsZXJ0TGlzdDogYW55KSB7XG5cbiAgICAgIHRoaXMuJGxvZy5kZWJ1ZygncXVlcnlpbmcgZGF0YScpO1xuICAgICAgdGhpcy5hbGVydExpc3QgPSBbXTtcblxuICAgICAgdGhpcy5IYXdrdWxhckFsZXJ0LkFsZXJ0LnF1ZXJ5KCkuJHByb21pc2UudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICB0aGlzLiRsb2cuZGVidWcoJ3F1ZXJ5aW5nIGRhdGEgZmluaXNoZWQnKTtcbiAgICAgICAgdGhpcy5hbGVydExpc3QgPSBkYXRhO1xuICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICAgIHRoaXMuJGxvZy5kZWJ1ZygncXVlcnlpbmcgZGF0YSBlcnJvcicsIGVycm9yKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIF9tb2R1bGUuY29udHJvbGxlcignTWV0cmljc0FsZXJ0Q29udHJvbGxlcicsIE1ldHJpY3NBbGVydENvbnRyb2xsZXIpO1xufVxuXG4iLCIvLy8gQ29weXJpZ2h0IDIwMTQtMjAxNSBSZWQgSGF0LCBJbmMuIGFuZC9vciBpdHMgYWZmaWxpYXRlc1xuLy8vIGFuZCBvdGhlciBjb250cmlidXRvcnMgYXMgaW5kaWNhdGVkIGJ5IHRoZSBAYXV0aG9yIHRhZ3MuXG4vLy9cbi8vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vL1xuLy8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vLy9cbi8vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIm1ldHJpY3NQbHVnaW4udHNcIi8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vaW5jbHVkZXMudHNcIi8+XG5cbm1vZHVsZSBIYXdrdWxhck1ldHJpY3Mge1xuXG4gIGV4cG9ydCBjbGFzcyBNZXRyaWNzQXZhaWxhYmlsaXR5Q29udHJvbGxlciB7XG4gICAgLy8vIGZvciBtaW5pZmljYXRpb24gb25seVxuICAgIHB1YmxpYyBzdGF0aWMgICRpbmplY3QgPSBbJyRzY29wZScsICckaW50ZXJ2YWwnLCAnJGxvZycsICdIYXdrdWxhck1ldHJpYycsICckcm91dGVQYXJhbXMnXTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgJHNjb3BlOmFueSxcbiAgICAgICAgICAgICAgICBwcml2YXRlICRpbnRlcnZhbDpuZy5JSW50ZXJ2YWxTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgJGxvZzpuZy5JTG9nU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIEhhd2t1bGFyTWV0cmljOmFueSxcbiAgICAgICAgICAgICAgICBwcml2YXRlICRyb3V0ZVBhcmFtczphbnksXG4gICAgICAgICAgICAgICAgcHVibGljIHN0YXJ0VGltZVN0YW1wOkRhdGUsXG4gICAgICAgICAgICAgICAgcHVibGljIGVuZFRpbWVTdGFtcDpEYXRlKSB7XG4gICAgICAkc2NvcGUudm0gPSB0aGlzO1xuXG4gICAgICB0aGlzLnN0YXJ0VGltZVN0YW1wID0gbW9tZW50KCkuc3VidHJhY3QoMSwgJ2hvdXJzJykudG9EYXRlKCk7XG4gICAgICB0aGlzLmVuZFRpbWVTdGFtcCA9IG5ldyBEYXRlKCk7XG5cbiAgICAgICRzY29wZS4kb24oJ1JlZnJlc2hBdmFpbGFiaWxpdHlDaGFydCcsIChldmVudCkgPT4ge1xuICAgICAgICB0aGlzLnJlZnJlc2hBdmFpbENoYXJ0RGF0YU5vdyh0aGlzLmdldE1ldHJpY0lkKCkpO1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMub25DcmVhdGUoJHJvdXRlUGFyYW1zLnJlc291cmNlSWQpO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXZhaWxhYmlsaXR5RGF0YVBvaW50czphbnlbXSA9IFtdO1xuICAgIHByaXZhdGUgY2hhcnREYXRhOmFueTtcbiAgICBwcml2YXRlIGF1dG9SZWZyZXNoUHJvbWlzZTpuZy5JUHJvbWlzZTxudW1iZXI+O1xuICAgIHNlbGVjdGVkUmVzb3VyY2U7XG5cbiAgICBhdmFpbGFiaWxpdHlQZXJjZW50ID0gMDtcbiAgICBkb3duVGltZUR1cmF0aW9uID0gMDtcbiAgICBsYXN0RG93blRpbWU6RGF0ZTtcbiAgICBkb3duVGltZUV2ZW50cyA9IDA7XG5cblxuICAgIHByaXZhdGUgb25DcmVhdGUoY3VyUmVzb3VyY2VJZDpzdHJpbmcpIHtcbiAgICAgIC8vLyBzZXR1cCBhdXRvcmVmcmVzaCBmb3IgZXZlcnkgbWludXRlXG4gICAgICB0aGlzLmF1dG9SZWZyZXNoQXZhaWxhYmlsaXR5KDYwKTtcbiAgICB9XG5cblxuICAgIGNhbmNlbEF1dG9SZWZyZXNoKCk6dm9pZCB7XG4gICAgICB0aGlzLiRpbnRlcnZhbC5jYW5jZWwodGhpcy5hdXRvUmVmcmVzaFByb21pc2UpO1xuICAgICAgdG9hc3RyLmluZm8oJ0NhbmNlbGluZyBBdXRvIFJlZnJlc2ggQXZhaWxhYmlsaXR5Jyk7XG4gICAgfVxuXG4gICAgYXV0b1JlZnJlc2hBdmFpbGFiaWxpdHkoaW50ZXJ2YWxJblNlY29uZHM6bnVtYmVyKTp2b2lkIHtcbiAgICAgIHRoaXMucmVmcmVzaEhpc3RvcmljYWxBdmFpbERhdGFGb3JUaW1lc3RhbXAodGhpcy5nZXRNZXRyaWNJZCgpKTtcbiAgICAgIHRoaXMuYXV0b1JlZnJlc2hQcm9taXNlID0gdGhpcy4kaW50ZXJ2YWwoKCkgID0+IHtcbiAgICAgICAgdGhpcy5lbmRUaW1lU3RhbXAgPSBuZXcgRGF0ZSgpO1xuICAgICAgICB0aGlzLnJlZnJlc2hIaXN0b3JpY2FsQXZhaWxEYXRhRm9yVGltZXN0YW1wKHRoaXMuZ2V0TWV0cmljSWQoKSk7XG4gICAgICB9LCBpbnRlcnZhbEluU2Vjb25kcyAqIDEwMDApO1xuXG4gICAgICB0aGlzLiRzY29wZS4kb24oJyRkZXN0cm95JywgKCkgPT4ge1xuICAgICAgICB0aGlzLiRpbnRlcnZhbC5jYW5jZWwodGhpcy5hdXRvUmVmcmVzaFByb21pc2UpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBub0RhdGFGb3VuZEZvcklkKGlkOnN0cmluZyk6dm9pZCB7XG4gICAgICB0aGlzLiRsb2cud2FybignTm8gRGF0YSBmb3VuZCBmb3IgaWQ6ICcgKyBpZCk7XG4gICAgICAvLy90b2FzdHIud2FybmluZygnTm8gRGF0YSBmb3VuZCBmb3IgaWQ6ICcgKyBpZCk7XG4gICAgfVxuXG5cbiAgICByZWZyZXNoQXZhaWxDaGFydERhdGFOb3cobWV0cmljSWQ6c3RyaW5nLCBzdGFydFRpbWU/OkRhdGUpOnZvaWQge1xuICAgICAgdmFyIGFkalN0YXJ0VGltZVN0YW1wOkRhdGUgPSBtb21lbnQoKS5zdWJ0cmFjdCgnaG91cnMnLCAxKS50b0RhdGUoKTsgLy9kZWZhdWx0IHRpbWUgcGVyaW9kIHNldCB0byAyNCBob3Vyc1xuICAgICAgdGhpcy5lbmRUaW1lU3RhbXAgPSBuZXcgRGF0ZSgpO1xuICAgICAgdGhpcy5yZWZyZXNoSGlzdG9yaWNhbENoYXJ0RGF0YShtZXRyaWNJZCwgYW5ndWxhci5pc1VuZGVmaW5lZChzdGFydFRpbWUpID8gYWRqU3RhcnRUaW1lU3RhbXAgOiBzdGFydFRpbWUsIHRoaXMuZW5kVGltZVN0YW1wKTtcbiAgICB9XG5cbiAgICByZWZyZXNoSGlzdG9yaWNhbENoYXJ0RGF0YShtZXRyaWNJZDpzdHJpbmcsIHN0YXJ0RGF0ZTpEYXRlLCBlbmREYXRlOkRhdGUpOnZvaWQge1xuICAgICAgdGhpcy5yZWZyZXNoSGlzdG9yaWNhbEF2YWlsRGF0YUZvclRpbWVzdGFtcChtZXRyaWNJZCwgc3RhcnREYXRlLmdldFRpbWUoKSwgZW5kRGF0ZS5nZXRUaW1lKCkpO1xuICAgIH1cblxuICAgIGdldE1ldHJpY0lkKCk6c3RyaW5nIHtcbiAgICAgIHJldHVybiBNZXRyaWNzQXZhaWxhYmlsaXR5Q29udHJvbGxlci5nZXRSZXNvdXJjZUNvZGVNZXRyaWNJZCgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGdldFJlc291cmNlQ29kZU1ldHJpY0lkKCkge1xuICAgICAgcmV0dXJuIGdsb2JhbE1ldHJpY0lkICsgJy5zdGF0dXMuY29kZSc7XG4gICAgfVxuXG5cbiAgICByZWZyZXNoSGlzdG9yaWNhbEF2YWlsRGF0YUZvclRpbWVzdGFtcChtZXRyaWNJZDpzdHJpbmcsIHN0YXJ0VGltZT86bnVtYmVyLCBlbmRUaW1lPzpudW1iZXIpOnZvaWQge1xuICAgICAgLy8gY2FsbGluZyByZWZyZXNoQ2hhcnREYXRhIHdpdGhvdXQgcGFyYW1zIHVzZSB0aGUgbW9kZWwgdmFsdWVzXG4gICAgICBpZiAoIWVuZFRpbWUpIHtcbiAgICAgICAgZW5kVGltZSA9IHRoaXMuZW5kVGltZVN0YW1wLmdldFRpbWUoKTtcbiAgICAgIH1cbiAgICAgIGlmICghc3RhcnRUaW1lKSB7XG4gICAgICAgIHN0YXJ0VGltZSA9IHRoaXMuc3RhcnRUaW1lU3RhbXAuZ2V0VGltZSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAobWV0cmljSWQpIHtcbiAgICAgICAgdGhpcy5IYXdrdWxhck1ldHJpYy5BdmFpbGFiaWxpdHlNZXRyaWNEYXRhLnF1ZXJ5KHtcbiAgICAgICAgICB0ZW5hbnRJZDogZ2xvYmFsVGVuYW50SWQsXG4gICAgICAgICAgYXZhaWxhYmlsaXR5SWQ6IG1ldHJpY0lkXG4gICAgICAgIH0pLiRwcm9taXNlXG4gICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG5cbiAgICAgICAgICAgIC8vIHdlIHdhbnQgdG8gaXNvbGF0ZSB0aGUgcmVzcG9uc2UgZnJvbSB0aGUgZGF0YSB3ZSBhcmUgZmVlZGluZyB0byB0aGUgY2hhcnRcbiAgICAgICAgICAgIHRoaXMuYXZhaWxhYmlsaXR5RGF0YVBvaW50cyA9IHRoaXMuZm9ybWF0QXZhaWxhYmlsaXR5KHJlc3BvbnNlKTtcbiAgICAgICAgICAgIGNvbnNvbGUuaW5mbyhcIkF2YWlsYWJpbGl0eTogXCIpO1xuICAgICAgICAgICAgY29uc29sZS5kaXIodGhpcy5hdmFpbGFiaWxpdHlEYXRhUG9pbnRzKTtcblxuICAgICAgICAgICAgLy90aGlzLnRvdGFsRG93bnRpbWUgPSBNYXRoLnJvdW5kKF8ubGFzdCh0aGlzLmJ1Y2tldGVkRGF0YVBvaW50cykubWVkaWFuKTtcbiAgICAgICAgICAgIC8vQHRvZG86IGdldCByaWQgb2YgdGhlc2UgZmFrZSB2YWx1ZXNcbiAgICAgICAgICAgIHRoaXMuYXZhaWxhYmlsaXR5UGVyY2VudCA9IC45NTtcbiAgICAgICAgICAgIHRoaXMuZG93blRpbWVEdXJhdGlvbiA9IDQ0O1xuICAgICAgICAgICAgdGhpcy5sYXN0RG93blRpbWUgPSBtb21lbnQoKS5zdWJ0cmFjdCgnaG91cnMnLCAyKS50b0RhdGUoKTtcbiAgICAgICAgICAgIHRoaXMuZG93blRpbWVFdmVudHMgPSAyO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5hdmFpbGFiaWxpdHlEYXRhUG9pbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAvLyB0aGlzIGlzIGJhc2ljYWxseSB0aGUgRFRPIGZvciB0aGUgY2hhcnRcbiAgICAgICAgICAgICAgdGhpcy5jaGFydERhdGEgPSB7XG4gICAgICAgICAgICAgICAgaWQ6IG1ldHJpY0lkLFxuICAgICAgICAgICAgICAgIHN0YXJ0VGltZVN0YW1wOiB0aGlzLnN0YXJ0VGltZVN0YW1wLFxuICAgICAgICAgICAgICAgIGVuZFRpbWVTdGFtcDogdGhpcy5lbmRUaW1lU3RhbXAsXG4gICAgICAgICAgICAgICAgZGF0YVBvaW50czogdGhpcy5hdmFpbGFiaWxpdHlEYXRhUG9pbnRzLFxuICAgICAgICAgICAgICAgIGFubm90YXRpb25EYXRhUG9pbnRzOiBbXVxuICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLm5vRGF0YUZvdW5kRm9ySWQodGhpcy5nZXRNZXRyaWNJZCgpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgdGhpcy4kbG9nLmVycm9yKCdFcnJvciBMb2FkaW5nIEF2YWlsIGRhdGEnKTtcbiAgICAgICAgICAgIHRvYXN0ci5lcnJvcignRXJyb3IgTG9hZGluZyBBdmFpbCBEYXRhOiAnICsgZXJyb3IpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBmb3JtYXRBdmFpbGFiaWxpdHkocmVzcG9uc2UpOmFueVtdIHtcbiAgICAgIC8vICBUaGUgc2NoZW1hIGlzIGRpZmZlcmVudCBmb3IgYnVja2V0ZWQgb3V0cHV0XG4gICAgICByZXR1cm4gXy5tYXAocmVzcG9uc2UsIChwb2ludDpJQ2hhcnREYXRhUG9pbnQpID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0aW1lc3RhbXA6IHBvaW50LnN0YXJ0LFxuICAgICAgICAgIGRhdGU6IG5ldyBEYXRlKHBvaW50LnN0YXJ0KSxcbiAgICAgICAgICB2YWx1ZTogIWFuZ3VsYXIuaXNOdW1iZXIocG9pbnQudmFsdWUpID8gMCA6IHBvaW50LnZhbHVlLFxuICAgICAgICAgIGF2ZzogKHBvaW50LmVtcHR5KSA/IDAgOiBwb2ludC5hdmcsXG4gICAgICAgICAgbWluOiAhYW5ndWxhci5pc051bWJlcihwb2ludC5taW4pID8gMCA6IHBvaW50Lm1pbixcbiAgICAgICAgICBtYXg6ICFhbmd1bGFyLmlzTnVtYmVyKHBvaW50Lm1heCkgPyAwIDogcG9pbnQubWF4LFxuICAgICAgICAgIHBlcmNlbnRpbGU5NXRoOiAhYW5ndWxhci5pc051bWJlcihwb2ludC5wZXJjZW50aWxlOTV0aCkgPyAwIDogcG9pbnQucGVyY2VudGlsZTk1dGgsXG4gICAgICAgICAgbWVkaWFuOiAhYW5ndWxhci5pc051bWJlcihwb2ludC5tZWRpYW4pID8gMCA6IHBvaW50Lm1lZGlhbixcbiAgICAgICAgICBlbXB0eTogcG9pbnQuZW1wdHlcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIF9tb2R1bGUuY29udHJvbGxlcignTWV0cmljc0F2YWlsYWJpbGl0eUNvbnRyb2xsZXInLCBNZXRyaWNzQXZhaWxhYmlsaXR5Q29udHJvbGxlcik7XG5cblxufVxuIiwiLy8vIENvcHlyaWdodCAyMDE0LTIwMTUgUmVkIEhhdCwgSW5jLiBhbmQvb3IgaXRzIGFmZmlsaWF0ZXNcbi8vLyBhbmQgb3RoZXIgY29udHJpYnV0b3JzIGFzIGluZGljYXRlZCBieSB0aGUgQGF1dGhvciB0YWdzLlxuLy8vXG4vLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vLy9cbi8vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy8vXG4vLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJtZXRyaWNzUGx1Z2luLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2luY2x1ZGVzLnRzXCIvPlxuXG5tb2R1bGUgSGF3a3VsYXJNZXRyaWNzIHtcblxuICBleHBvcnQgaW50ZXJmYWNlIElRdWlja0FsZXJ0Q29udHJvbGxlciB7XG4gICAgdG9nZ2xlUXVpY2tBbGVydCgpOnZvaWRcbiAgICBzYXZlUXVpY2tBbGVydCgpOnZvaWRcbiAgfVxuXG4gIGV4cG9ydCBjbGFzcyBRdWlja0FsZXJ0Q29udHJvbGxlciBpbXBsZW1lbnRzIElRdWlja0FsZXJ0Q29udHJvbGxlciB7XG4gICAgcHVibGljIHN0YXRpYyAgJGluamVjdCA9IFsnJHNjb3BlJywgJ0hhd2t1bGFyQWxlcnQnLCAnJGxvZycsICckcSddO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSAkc2NvcGU6YW55LFxuICAgICAgICAgICAgICAgIHByaXZhdGUgSGF3a3VsYXJBbGVydDphbnksXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSAkbG9nOiBuZy5JTG9nU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlICRxOiBuZy5JUVNlcnZpY2UpIHtcbiAgICAgIHRoaXMuJHNjb3BlLnNob3dRdWlja0FsZXJ0ID0gZmFsc2U7XG4gICAgICB0aGlzLiRzY29wZS5xdWlja1RyaWdnZXIgPSB7XG4gICAgICAgIG9wZXJhdG9yOiAnTFQnLFxuICAgICAgICB0aHJlc2hvbGQ6IDBcbiAgICAgIH07XG4gICAgICB0aGlzLmFsbEFjdGlvbnMoKTtcbiAgICB9XG5cbiAgICB0b2dnbGVRdWlja0FsZXJ0KCk6dm9pZCB7XG4gICAgICB0aGlzLiRzY29wZS5zaG93UXVpY2tBbGVydCA9ICF0aGlzLiRzY29wZS5zaG93UXVpY2tBbGVydDtcbiAgICB9XG5cbiAgICBwcml2YXRlIFBST01JU0VfQlJFQUs6IHN0cmluZyA9ICdtYWdpY1ZhbHVlMTIzNCc7XG5cbiAgICBwcml2YXRlIGFsbEFjdGlvbnMoKTp2b2lkIHtcbiAgICAgIHRoaXMuJHNjb3BlLmFjdGlvbnMgPSBbXTtcbiAgICAgIHRoaXMuSGF3a3VsYXJBbGVydC5BY3Rpb24ucXVlcnkoXG4gICAgICAgIChyZXN1bHQpID0+IHtcbiAgICAgICAgICB0aGlzLiRzY29wZS5hY3Rpb25zID0gcmVzdWx0O1xuICAgICAgICB9LCAoZXJyb3IpID0+IHtcbiAgICAgICAgICB0aGlzLmVycm9yVG9hc3RyKGVycm9yLCAnRXJyb3IgbG9hZGluZyBBbGVydHMgTm90aWZpZXJzOicpO1xuICAgICAgICB9XG4gICAgICApO1xuICAgIH1cblxuICAgIHByaXZhdGUgZXJyb3JUb2FzdHIoZXJyb3I6IGFueSwgZXJyb3JNc2c6IHN0cmluZyk6dm9pZCB7XG4gICAgICB2YXIgZXJyb3JNc2dDb21wbGV0ZTogc3RyaW5nO1xuXG4gICAgICBpZiAoZXJyb3IuZGF0YSAmJiBlcnJvci5kYXRhLmVycm9yTXNnKSB7XG4gICAgICAgIGVycm9yTXNnQ29tcGxldGUgPSBlcnJvci5kYXRhLmVycm9yTXNnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXJyb3JNc2dDb21wbGV0ZSA9IGVycm9yTXNnICsgJyAnICsgZXJyb3I7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuJGxvZy5lcnJvcihlcnJvck1zZ0NvbXBsZXRlKTtcbiAgICAgIHRvYXN0ci5lcnJvcihlcnJvck1zZ0NvbXBsZXRlKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGVycm9ySGFuZGxlcihlcnJvcjogYW55LCBtc2c6IHN0cmluZykge1xuICAgICAgaWYgKGVycm9yICE9PSB0aGlzLlBST01JU0VfQlJFQUspIHtcbiAgICAgICAgdGhpcy5lcnJvclRvYXN0cihlcnJvciwgbXNnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLiRxLnJlamVjdCh0aGlzLlBST01JU0VfQlJFQUspO1xuICAgIH1cblxuICAgIHNhdmVRdWlja0FsZXJ0KCk6dm9pZCB7XG4gICAgICBpZiAoZ2xvYmFsTWV0cmljSWQgIT09ICcuc3RhdHVzLmR1cmF0aW9uJyAmJiBnbG9iYWxNZXRyaWNJZCAhPT0gJy5zdGF0dXMuY29kZScpIHtcbiAgICAgICAgdmFyIG5ld1RyaWdnZXI6YW55ID0ge307XG4gICAgICAgIG5ld1RyaWdnZXIubmFtZSA9IGdsb2JhbE1ldHJpY0lkICsgJ1Jlc3BvbnNlVGltZScgKyAnLScgKyB0aGlzLiRzY29wZS5xdWlja1RyaWdnZXIub3BlcmF0b3IgKyAnLScgKyB0aGlzLiRzY29wZS5xdWlja1RyaWdnZXIudGhyZXNob2xkO1xuICAgICAgICBuZXdUcmlnZ2VyLmRlc2NyaXB0aW9uID0gJ0NyZWF0ZWQgb24gJyArIG5ldyBEYXRlKCk7XG4gICAgICAgIG5ld1RyaWdnZXIuZmlyaW5nTWF0Y2ggPSAnQUxMJztcbiAgICAgICAgbmV3VHJpZ2dlci5zYWZldHlNYXRjaCA9ICdBTEwnO1xuICAgICAgICBuZXdUcmlnZ2VyLmVuYWJsZWQgPSB0cnVlO1xuICAgICAgICBuZXdUcmlnZ2VyLnNhZmV0eUVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgbmV3VHJpZ2dlci5hY3Rpb25zID0gdGhpcy4kc2NvcGUucXVpY2tUcmlnZ2VyLmFjdGlvbnM7XG5cbiAgICAgICAgdmFyIG5ld0RhbXBlbmluZzphbnkgPSB7XG4gICAgICAgICAgdHJpZ2dlcklkOiAnJyxcbiAgICAgICAgICB0eXBlOiAnUkVMQVhFRF9DT1VOVCcsXG4gICAgICAgICAgZXZhbFRydWVTZXR0aW5nOiAxLFxuICAgICAgICAgIGV2YWxUb3RhbFNldHRpbmc6IDEsXG4gICAgICAgICAgZXZhbFRpbWVTZXR0aW5nOiAwXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5IYXdrdWxhckFsZXJ0LlRyaWdnZXIuc2F2ZShuZXdUcmlnZ2VyKS4kcHJvbWlzZS50aGVuKFxuICAgICAgICAgIC8vIFN1Y2Nlc3MgVHJpZ2dlciBzYXZlXG4gICAgICAgICAgKHRyaWdnZXIpID0+IHtcbiAgICAgICAgICAgIHRoaXMuJGxvZy5kZWJ1ZygnU3VjY2VzcyBUcmlnZ2VyIHNhdmUnKTtcbiAgICAgICAgICAgIG5ld0RhbXBlbmluZy50cmlnZ2VySWQgPSB0cmlnZ2VyLmlkO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5IYXdrdWxhckFsZXJ0LkRhbXBlbmluZy5zYXZlKHt0cmlnZ2VySWQ6IG5ld0RhbXBlbmluZy50cmlnZ2VySWR9LFxuICAgICAgICAgICAgICBuZXdEYW1wZW5pbmcpLiRwcm9taXNlO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgLy8gRXJyb3IgVHJpZ2dlciBzYXZlXG4gICAgICAgICAgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lcnJvckhhbmRsZXIoZXJyb3IsICdFcnJvciBzYXZpbmcgVHJpZ2dlcicpO1xuICAgICAgICAgIH1cbiAgICAgICAgKS50aGVuKFxuICAgICAgICAgIC8vIFN1Y2Nlc3MgRGFtcGVuaW5nIHNhdmVcbiAgICAgICAgICAoZGFtcGVuaW5nKSA9PiB7XG4gICAgICAgICAgICB0aGlzLiRsb2cuZGVidWcoJ1N1Y2Nlc3MgRGFtcGVuaW5nIHNhdmUnLCBkYW1wZW5pbmcpO1xuICAgICAgICAgICAgdmFyIG5ld1RocmVzaG9sZENvbmRpdGlvbiA9IHtcbiAgICAgICAgICAgICAgdHJpZ2dlcklkOiBkYW1wZW5pbmcudHJpZ2dlcklkLFxuICAgICAgICAgICAgICB0eXBlOiAnVEhSRVNIT0xEJyxcbiAgICAgICAgICAgICAgZGF0YUlkOiBnbG9iYWxNZXRyaWNJZCxcbiAgICAgICAgICAgICAgb3BlcmF0b3I6IHRoaXMuJHNjb3BlLnF1aWNrVHJpZ2dlci5vcGVyYXRvcixcbiAgICAgICAgICAgICAgdGhyZXNob2xkOiB0aGlzLiRzY29wZS5xdWlja1RyaWdnZXIudGhyZXNob2xkXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5IYXdrdWxhckFsZXJ0LkNvbmRpdGlvbi5zYXZlKHt0cmlnZ2VySWQ6IG5ld1RocmVzaG9sZENvbmRpdGlvbi50cmlnZ2VySWR9LFxuICAgICAgICAgICAgICBuZXdUaHJlc2hvbGRDb25kaXRpb24pLiRwcm9taXNlO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgLy8gRXJyb3IgRGFtcGVuaW5nIHNhdmVcbiAgICAgICAgICAoZXJyb3JEYW1wZW5pbmcpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVycm9ySGFuZGxlcihlcnJvckRhbXBlbmluZywgJ0Vycm9yIHNhdmluZyBUcmlnZ2VyJyk7XG4gICAgICAgICAgfVxuICAgICAgICApLnRoZW4oXG4gICAgICAgICAgLy8gU3VjY2VzcyBUaHJlc2hvbGRDb25kaXRpb24gc2F2ZVxuICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuJGxvZy5kZWJ1ZygnU3VjY2VzcyBUaHJlc2hvbGRDb25kaXRpb24gc2F2ZScpO1xuICAgICAgICAgICAgdGhpcy4kbG9nLmRlYnVnKCdBbGVydCBDcmVhdGVkIScpO1xuICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoJ0FsZXJ0IENyZWF0ZWQhJyk7XG5cbiAgICAgICAgICAgIHRoaXMudG9nZ2xlUXVpY2tBbGVydCgpO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5IYXdrdWxhckFsZXJ0LkFsZXJ0LnJlbG9hZCgpLiRwcm9taXNlO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgLy8gRXJyb3IgVGhyZXNob2xkQ29uZGl0aW9uIHNhdmVcbiAgICAgICAgICAoZXJyb3JDb25kaXRpb24pID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVycm9ySGFuZGxlcihlcnJvckNvbmRpdGlvbiwgJ0Vycm9yIHNhdmluZyBUcmlnZ2VyIENvbmRpdGlvbicpO1xuICAgICAgICAgIH1cbiAgICAgICAgKS50aGVuKFxuICAgICAgICAgIC8vIFN1Y2Nlc3MgUmVsb2FkXG4gICAgICAgICAgYW5ndWxhci5ub29wLFxuICAgICAgICAgIC8vIEVycm9yIFJlbG9hZFxuICAgICAgICAgIChlcnJvclJlbG9hZCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3JIYW5kbGVyKGVycm9yUmVsb2FkLCAnRXJyb3IgcmVsb2FkaW5nIEFsZXJ0cycpO1xuICAgICAgICAgIH1cbiAgICAgICAgKS5jYXRjaChcbiAgICAgICAgICAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZXJyb3JIYW5kbGVyKGVycm9yLCAnRXJyb3I6Jyk7XG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kbG9nLmRlYnVnKCdObyBtZXRyaWMgc2VsZWN0ZWQnKTtcbiAgICAgICAgdG9hc3RyLndhcm5pbmcoJ05vIG1ldHJpYyBzZWxlY3RlZCcpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF9tb2R1bGUuY29udHJvbGxlcignUXVpY2tBbGVydENvbnRyb2xsZXInLCBRdWlja0FsZXJ0Q29udHJvbGxlcik7XG59XG5cbiIsIi8vLyBDb3B5cmlnaHQgMjAxNC0yMDE1IFJlZCBIYXQsIEluYy4gYW5kL29yIGl0cyBhZmZpbGlhdGVzXG4vLy8gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycyBhcyBpbmRpY2F0ZWQgYnkgdGhlIEBhdXRob3IgdGFncy5cbi8vL1xuLy8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy8vXG4vLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vL1xuLy8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwibWV0cmljc1BsdWdpbi50c1wiLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9pbmNsdWRlcy50c1wiLz5cblxubW9kdWxlIEhhd2t1bGFyTWV0cmljcyB7XG5cbiAgZXhwb3J0IGludGVyZmFjZSBJQ29udGV4dENoYXJ0RGF0YVBvaW50IHtcbiAgICB0aW1lc3RhbXA6IG51bWJlcjtcbiAgICBzdGFydD86IG51bWJlcjtcbiAgICBlbmQ/OiBudW1iZXI7XG4gICAgdmFsdWU6IG51bWJlcjtcbiAgICBhdmc6IG51bWJlcjtcbiAgICBlbXB0eTogYm9vbGVhbjtcbiAgfVxuXG4gIGV4cG9ydCBpbnRlcmZhY2UgSUNoYXJ0RGF0YVBvaW50IGV4dGVuZHMgSUNvbnRleHRDaGFydERhdGFQb2ludCB7XG4gICAgZGF0ZTogRGF0ZTtcbiAgICBtaW46IG51bWJlcjtcbiAgICBtYXg6IG51bWJlcjtcbiAgICBwZXJjZW50aWxlOTV0aDogbnVtYmVyO1xuICAgIG1lZGlhbjogbnVtYmVyO1xuICB9XG5cblxuICAvKipcbiAgICogQG5nZG9jIGNvbnRyb2xsZXJcbiAgICogQG5hbWUgQ2hhcnRDb250cm9sbGVyXG4gICAqIEBkZXNjcmlwdGlvbiBUaGlzIGNvbnRyb2xsZXIgaXMgcmVzcG9uc2libGUgZm9yIGhhbmRsaW5nIGFjdGl2aXR5IHJlbGF0ZWQgdG8gdGhlIENoYXJ0IHRhYi5cbiAgICogQHBhcmFtICRzY29wZVxuICAgKiBAcGFyYW0gJHJvb3RTY29wZSBmb3IgcHVibGlzaGluZyAkYnJvYWRjYXN0IGV2ZW50cyBvbmx5XG4gICAqIEBwYXJhbSAkaW50ZXJ2YWxcbiAgICogQHBhcmFtICRsb2dcbiAgICogQHBhcmFtIEhhd2t1bGFyTWV0cmljXG4gICAqIEBwYXJhbSBIYXdrdWxhckludmVudG9yeVxuICAgKi9cbiAgZXhwb3J0IGNsYXNzIE1ldHJpY3NWaWV3Q29udHJvbGxlciB7XG4gICAgLy8vIGZvciBtaW5pZmljYXRpb24gb25seVxuICAgIHB1YmxpYyBzdGF0aWMgICRpbmplY3QgPSBbJyRzY29wZScsICckcm9vdFNjb3BlJywgJyRpbnRlcnZhbCcsICckbG9nJywgJ0hhd2t1bGFyTWV0cmljJywgJ0hhd2t1bGFySW52ZW50b3J5JywgJyRyb3V0ZVBhcmFtcyddO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSAkc2NvcGU6YW55LFxuICAgICAgICAgICAgICAgIHByaXZhdGUgJHJvb3RTY29wZTpuZy5JUm9vdFNjb3BlU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlICRpbnRlcnZhbDpuZy5JSW50ZXJ2YWxTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgJGxvZzpuZy5JTG9nU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIEhhd2t1bGFyTWV0cmljOmFueSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIEhhd2t1bGFySW52ZW50b3J5OmFueSxcbiAgICAgICAgICAgICAgICBwcml2YXRlICRyb3V0ZVBhcmFtczphbnksXG4gICAgICAgICAgICAgICAgcHVibGljIHN0YXJ0VGltZVN0YW1wOkRhdGUsXG4gICAgICAgICAgICAgICAgcHVibGljIGVuZFRpbWVTdGFtcDpEYXRlKSB7XG4gICAgICAkc2NvcGUudm0gPSB0aGlzO1xuXG4gICAgICB0aGlzLnN0YXJ0VGltZVN0YW1wID0gbW9tZW50KCkuc3VidHJhY3QoMSwgJ2hvdXJzJykudG9EYXRlKCk7XG4gICAgICB0aGlzLmVuZFRpbWVTdGFtcCA9IG5ldyBEYXRlKCk7XG5cbiAgICAgICRzY29wZS4kb24oJ1JlZnJlc2hDaGFydCcsIChldmVudCkgPT4ge1xuICAgICAgICB0aGlzLnJlZnJlc2hDaGFydERhdGFOb3codGhpcy5nZXRNZXRyaWNJZCgpKTtcbiAgICAgIH0pO1xuXG5cbiAgICAgICRzY29wZS4kd2F0Y2goJ3ZtLnNlbGVjdGVkUmVzb3VyY2UnLCAocmVzb3VyY2UpID0+IHtcbiAgICAgICAgaWYgKHJlc291cmNlKSB7XG4gICAgICAgICAgLy8vIG1hZGUgYSBzZWxlY3Rpb24gZnJvbSB1cmwgc3dpdGNoZXJcbiAgICAgICAgICBnbG9iYWxNZXRyaWNJZCA9IHJlc291cmNlLmlkO1xuICAgICAgICAgIHRoaXMucmVmcmVzaENoYXJ0RGF0YU5vdyh0aGlzLmdldE1ldHJpY0lkKCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vLyBjYXNlIHdoZW4gY29taW5nIGZyb20gYWRkVXJsIHNjcmVlblxuICAgICAgICAgIGdsb2JhbFJlc291cmNlTGlzdCA9IHRoaXMuSGF3a3VsYXJJbnZlbnRvcnkuUmVzb3VyY2UucXVlcnkoe3RlbmFudElkOiBnbG9iYWxUZW5hbnRJZH0pLiRwcm9taXNlLlxuICAgICAgICAgICAgdGhlbigocmVzb3VyY2VzKT0+IHtcbiAgICAgICAgICAgICAgdGhpcy5yZXNvdXJjZUxpc3QgPSByZXNvdXJjZXM7XG4gICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRSZXNvdXJjZSA9IF8ubGFzdChyZXNvdXJjZXMpO1xuICAgICAgICAgICAgICB0aGlzLnJlZnJlc2hDaGFydERhdGFOb3codGhpcy5nZXRNZXRyaWNJZCgpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgIH0pO1xuXG5cbiAgICAgIHRoaXMub25DcmVhdGUoJHJvdXRlUGFyYW1zLnJlc291cmNlSWQpO1xuICAgIH1cblxuICAgIHByaXZhdGUgYnVja2V0ZWREYXRhUG9pbnRzOklDaGFydERhdGFQb2ludFtdID0gW107XG4gICAgcHJpdmF0ZSBjb250ZXh0RGF0YVBvaW50czpJQ2hhcnREYXRhUG9pbnRbXSA9IFtdO1xuICAgIHByaXZhdGUgY2hhcnREYXRhOmFueTtcbiAgICBwcml2YXRlIGF1dG9SZWZyZXNoUHJvbWlzZTpuZy5JUHJvbWlzZTxudW1iZXI+O1xuICAgIHByaXZhdGUgX3Jlc291cmNlTGlzdCA9IFtdO1xuICAgIHNlbGVjdGVkUmVzb3VyY2U7XG5cbiAgICBtZWRpYW4gPSAwO1xuICAgIHBlcmNlbnRpbGU5NXRoID0gMDtcbiAgICBhdmVyYWdlID0gMDtcblxuXG4gICAgcHVibGljIGdldCByZXNvdXJjZUxpc3QoKTpzdHJpbmdbXSB7XG4gICAgICByZXR1cm4gdGhpcy5fcmVzb3VyY2VMaXN0O1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXQgcmVzb3VyY2VMaXN0KG5ld1Jlc291cmNlTGlzdDpzdHJpbmdbXSkge1xuICAgICAgZ2xvYmFsUmVzb3VyY2VMaXN0ID0gbmV3UmVzb3VyY2VMaXN0O1xuICAgICAgdGhpcy5fcmVzb3VyY2VMaXN0ID0gbmV3UmVzb3VyY2VMaXN0O1xuICAgIH1cblxuICAgIHByaXZhdGUgb25DcmVhdGUoY3VyUmVzb3VyY2VJZDpzdHJpbmcpIHtcbiAgICAgIC8vLyBzZXR1cCBhdXRvcmVmcmVzaCBmb3IgZXZlcnkgbWludXRlXG4gICAgICB0aGlzLmF1dG9SZWZyZXNoKDYwKTtcbiAgICAgIHRoaXMuSGF3a3VsYXJJbnZlbnRvcnkuUmVzb3VyY2UucXVlcnkoe3RlbmFudElkOiBnbG9iYWxUZW5hbnRJZH0sIChhUmVzb3VyY2VMaXN0KSA9PiB7XG4gICAgICAgIHRoaXMucmVzb3VyY2VMaXN0ID0gYVJlc291cmNlTGlzdDtcbiAgICAgICAgdGhpcy5zZWxlY3RlZFJlc291cmNlID0gXy5sYXN0KHRoaXMuX3Jlc291cmNlTGlzdCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fcmVzb3VyY2VMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKGFSZXNvdXJjZUxpc3RbaV0uaWQgPT09IGN1clJlc291cmNlSWQpIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRSZXNvdXJjZSA9IHRoaXMuX3Jlc291cmNlTGlzdFtpXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZWZyZXNoQ2hhcnREYXRhTm93KHRoaXMuZ2V0TWV0cmljSWQoKSk7XG4gICAgICB9KTtcbiAgICB9XG5cblxuICAgIGNhbmNlbEF1dG9SZWZyZXNoKCk6dm9pZCB7XG4gICAgICB0aGlzLiRpbnRlcnZhbC5jYW5jZWwodGhpcy5hdXRvUmVmcmVzaFByb21pc2UpO1xuICAgICAgdG9hc3RyLmluZm8oJ0NhbmNlbGluZyBBdXRvIFJlZnJlc2gnKTtcbiAgICB9XG5cbiAgICBhdXRvUmVmcmVzaChpbnRlcnZhbEluU2Vjb25kczpudW1iZXIpOnZvaWQge1xuICAgICAgdGhpcy5yZWZyZXNoSGlzdG9yaWNhbENoYXJ0RGF0YUZvclRpbWVzdGFtcCh0aGlzLmdldE1ldHJpY0lkKCkpO1xuICAgICAgdGhpcy5hdXRvUmVmcmVzaFByb21pc2UgPSB0aGlzLiRpbnRlcnZhbCgoKSAgPT4ge1xuICAgICAgICB0aGlzLmVuZFRpbWVTdGFtcCA9IG5ldyBEYXRlKCk7XG4gICAgICAgIHRoaXMucmVmcmVzaEhpc3RvcmljYWxDaGFydERhdGFGb3JUaW1lc3RhbXAodGhpcy5nZXRNZXRyaWNJZCgpKTtcbiAgICAgICAgdGhpcy5yZWZyZXNoU3VtbWFyeURhdGEodGhpcy5nZXRNZXRyaWNJZCgpKTtcbiAgICAgIH0sIGludGVydmFsSW5TZWNvbmRzICogMTAwMCk7XG5cbiAgICAgIHRoaXMuJHNjb3BlLiRvbignJGRlc3Ryb3knLCAoKSA9PiB7XG4gICAgICAgIHRoaXMuJGludGVydmFsLmNhbmNlbCh0aGlzLmF1dG9SZWZyZXNoUHJvbWlzZSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG5vRGF0YUZvdW5kRm9ySWQoaWQ6c3RyaW5nKTp2b2lkIHtcbiAgICAgIHRoaXMuJGxvZy53YXJuKCdObyBEYXRhIGZvdW5kIGZvciBpZDogJyArIGlkKTtcbiAgICAgIC8vL3RvYXN0ci53YXJuaW5nKCdObyBEYXRhIGZvdW5kIGZvciBpZDogJyArIGlkKTtcbiAgICB9XG5cblxuICAgIHJlZnJlc2hDaGFydERhdGFOb3cobWV0cmljSWQ6c3RyaW5nLCBzdGFydFRpbWU/OkRhdGUpOnZvaWQge1xuICAgICAgdmFyIGFkalN0YXJ0VGltZVN0YW1wOkRhdGUgPSBtb21lbnQoKS5zdWJ0cmFjdCgnaG91cnMnLCAxKS50b0RhdGUoKTsgLy9kZWZhdWx0IHRpbWUgcGVyaW9kIHNldCB0byAyNCBob3Vyc1xuICAgICAgdGhpcy5lbmRUaW1lU3RhbXAgPSBuZXcgRGF0ZSgpO1xuICAgICAgdGhpcy5yZWZyZXNoSGlzdG9yaWNhbENoYXJ0RGF0YShtZXRyaWNJZCwgYW5ndWxhci5pc1VuZGVmaW5lZChzdGFydFRpbWUpID8gYWRqU3RhcnRUaW1lU3RhbXAgOiBzdGFydFRpbWUsIHRoaXMuZW5kVGltZVN0YW1wKTtcbiAgICAgIHRoaXMucmVmcmVzaFN1bW1hcnlEYXRhKG1ldHJpY0lkLCBzdGFydFRpbWUgPyBzdGFydFRpbWUuZ2V0VGltZSgpOiBhZGpTdGFydFRpbWVTdGFtcC5nZXRUaW1lKCksIHRoaXMuZW5kVGltZVN0YW1wLmdldFRpbWUoKSk7XG4gICAgfVxuXG4gICAgcmVmcmVzaEhpc3RvcmljYWxDaGFydERhdGEobWV0cmljSWQ6c3RyaW5nLCBzdGFydERhdGU6RGF0ZSwgZW5kRGF0ZTpEYXRlKTp2b2lkIHtcbiAgICAgIHRoaXMucmVmcmVzaEhpc3RvcmljYWxDaGFydERhdGFGb3JUaW1lc3RhbXAobWV0cmljSWQsIHN0YXJ0RGF0ZS5nZXRUaW1lKCksIGVuZERhdGUuZ2V0VGltZSgpKTtcbiAgICB9XG5cbiAgICBnZXRNZXRyaWNJZCgpOnN0cmluZyB7XG4gICAgICByZXR1cm4gTWV0cmljc1ZpZXdDb250cm9sbGVyLmdldFJlc291cmNlRHVyYXRpb25NZXRyaWNJZCgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGdldFJlc291cmNlRHVyYXRpb25NZXRyaWNJZCgpIHtcbiAgICAgIHJldHVybiBnbG9iYWxNZXRyaWNJZCArICcuc3RhdHVzLmR1cmF0aW9uJztcbiAgICB9XG5cbiAgICByZWZyZXNoU3VtbWFyeURhdGEobWV0cmljSWQ6c3RyaW5nLCBzdGFydFRpbWU/Om51bWJlciwgZW5kVGltZT86bnVtYmVyKTp2b2lkIHtcbiAgICAgIHZhciBkYXRhUG9pbnRzOklDaGFydERhdGFQb2ludFtdO1xuICAgICAgLy8gY2FsbGluZyByZWZyZXNoQ2hhcnREYXRhIHdpdGhvdXQgcGFyYW1zIHVzZSB0aGUgbW9kZWwgdmFsdWVzXG4gICAgICBpZiAoIWVuZFRpbWUpIHtcbiAgICAgICAgZW5kVGltZSA9IHRoaXMuZW5kVGltZVN0YW1wLmdldFRpbWUoKTtcbiAgICAgIH1cbiAgICAgIGlmICghc3RhcnRUaW1lKSB7XG4gICAgICAgIHN0YXJ0VGltZSA9IHRoaXMuc3RhcnRUaW1lU3RhbXAuZ2V0VGltZSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAobWV0cmljSWQpIHtcbiAgICAgICAgdGhpcy5IYXdrdWxhck1ldHJpYy5OdW1lcmljTWV0cmljRGF0YS5xdWVyeU1ldHJpY3Moe1xuICAgICAgICAgIHRlbmFudElkOiBnbG9iYWxUZW5hbnRJZCxcbiAgICAgICAgICBudW1lcmljSWQ6IG1ldHJpY0lkLFxuICAgICAgICAgIHN0YXJ0OiBzdGFydFRpbWUsXG4gICAgICAgICAgZW5kOiBlbmRUaW1lLFxuICAgICAgICAgIGJ1Y2tldHM6IDFcbiAgICAgICAgfSkuJHByb21pc2VcbiAgICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcblxuICAgICAgICAgICAgZGF0YVBvaW50cyA9IHRoaXMuZm9ybWF0QnVja2V0ZWRDaGFydE91dHB1dChyZXNwb25zZSk7XG4gICAgICAgICAgICBjb25zb2xlLmRpcihkYXRhUG9pbnRzKTtcblxuICAgICAgICAgICAgdGhpcy5tZWRpYW4gPSBNYXRoLnJvdW5kKF8ubGFzdChkYXRhUG9pbnRzKS5tZWRpYW4pO1xuICAgICAgICAgICAgdGhpcy5wZXJjZW50aWxlOTV0aCA9IE1hdGgucm91bmQoXy5sYXN0KGRhdGFQb2ludHMpLnBlcmNlbnRpbGU5NXRoKTtcbiAgICAgICAgICAgIHRoaXMuYXZlcmFnZSA9IE1hdGgucm91bmQoXy5sYXN0KGRhdGFQb2ludHMpLmF2Zyk7XG5cbiAgICAgICAgICB9LCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIHRoaXMuJGxvZy5lcnJvcignRXJyb3IgTG9hZGluZyBDaGFydCBkYXRhJyk7XG4gICAgICAgICAgICB0b2FzdHIuZXJyb3IoJ0Vycm9yIExvYWRpbmcgQ2hhcnQgRGF0YTogJyArIGVycm9yKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgfVxuICAgIH1cblxuXG4gICAgcmVmcmVzaEhpc3RvcmljYWxDaGFydERhdGFGb3JUaW1lc3RhbXAobWV0cmljSWQ6c3RyaW5nLCBzdGFydFRpbWU/Om51bWJlciwgZW5kVGltZT86bnVtYmVyKTp2b2lkIHtcbiAgICAgIC8vIGNhbGxpbmcgcmVmcmVzaENoYXJ0RGF0YSB3aXRob3V0IHBhcmFtcyB1c2UgdGhlIG1vZGVsIHZhbHVlc1xuICAgICAgaWYgKCFlbmRUaW1lKSB7XG4gICAgICAgIGVuZFRpbWUgPSB0aGlzLmVuZFRpbWVTdGFtcC5nZXRUaW1lKCk7XG4gICAgICB9XG4gICAgICBpZiAoIXN0YXJ0VGltZSkge1xuICAgICAgICBzdGFydFRpbWUgPSB0aGlzLnN0YXJ0VGltZVN0YW1wLmdldFRpbWUoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1ldHJpY0lkKSB7XG4gICAgICAgIHRoaXMuSGF3a3VsYXJNZXRyaWMuTnVtZXJpY01ldHJpY0RhdGEucXVlcnlNZXRyaWNzKHtcbiAgICAgICAgICB0ZW5hbnRJZDogZ2xvYmFsVGVuYW50SWQsXG4gICAgICAgICAgbnVtZXJpY0lkOiBtZXRyaWNJZCxcbiAgICAgICAgICBzdGFydDogc3RhcnRUaW1lLFxuICAgICAgICAgIGVuZDogZW5kVGltZSxcbiAgICAgICAgICBidWNrZXRzOiA2MFxuICAgICAgICB9KS4kcHJvbWlzZVxuICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuXG4gICAgICAgICAgICAvLyB3ZSB3YW50IHRvIGlzb2xhdGUgdGhlIHJlc3BvbnNlIGZyb20gdGhlIGRhdGEgd2UgYXJlIGZlZWRpbmcgdG8gdGhlIGNoYXJ0XG4gICAgICAgICAgICB0aGlzLmJ1Y2tldGVkRGF0YVBvaW50cyA9IHRoaXMuZm9ybWF0QnVja2V0ZWRDaGFydE91dHB1dChyZXNwb25zZSk7XG4gICAgICAgICAgICBjb25zb2xlLmRpcih0aGlzLmJ1Y2tldGVkRGF0YVBvaW50cyk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmJ1Y2tldGVkRGF0YVBvaW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgLy8gdGhpcyBpcyBiYXNpY2FsbHkgdGhlIERUTyBmb3IgdGhlIGNoYXJ0XG4gICAgICAgICAgICAgIHRoaXMuY2hhcnREYXRhID0ge1xuICAgICAgICAgICAgICAgIGlkOiBtZXRyaWNJZCxcbiAgICAgICAgICAgICAgICBzdGFydFRpbWVTdGFtcDogc3RhcnRUaW1lLFxuICAgICAgICAgICAgICAgIGVuZFRpbWVTdGFtcDogZW5kVGltZSxcbiAgICAgICAgICAgICAgICBkYXRhUG9pbnRzOiB0aGlzLmJ1Y2tldGVkRGF0YVBvaW50cyxcbiAgICAgICAgICAgICAgICBjb250ZXh0RGF0YVBvaW50czogdGhpcy5jb250ZXh0RGF0YVBvaW50cyxcbiAgICAgICAgICAgICAgICBhbm5vdGF0aW9uRGF0YVBvaW50czogW11cbiAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy5ub0RhdGFGb3VuZEZvcklkKHRoaXMuZ2V0TWV0cmljSWQoKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9LCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIHRoaXMuJGxvZy5lcnJvcignRXJyb3IgTG9hZGluZyBDaGFydCBkYXRhJyk7XG4gICAgICAgICAgICB0b2FzdHIuZXJyb3IoJ0Vycm9yIExvYWRpbmcgQ2hhcnQgRGF0YTogJyArIGVycm9yKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgZm9ybWF0QnVja2V0ZWRDaGFydE91dHB1dChyZXNwb25zZSk6SUNoYXJ0RGF0YVBvaW50W10ge1xuICAgICAgLy8gIFRoZSBzY2hlbWEgaXMgZGlmZmVyZW50IGZvciBidWNrZXRlZCBvdXRwdXRcbiAgICAgIHJldHVybiBfLm1hcChyZXNwb25zZSwgKHBvaW50OklDaGFydERhdGFQb2ludCkgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHRpbWVzdGFtcDogcG9pbnQuc3RhcnQsXG4gICAgICAgICAgZGF0ZTogbmV3IERhdGUocG9pbnQuc3RhcnQpLFxuICAgICAgICAgIHZhbHVlOiAhYW5ndWxhci5pc051bWJlcihwb2ludC52YWx1ZSkgPyAwIDogcG9pbnQudmFsdWUsXG4gICAgICAgICAgYXZnOiAocG9pbnQuZW1wdHkpID8gMCA6IHBvaW50LmF2ZyxcbiAgICAgICAgICBtaW46ICFhbmd1bGFyLmlzTnVtYmVyKHBvaW50Lm1pbikgPyAwIDogcG9pbnQubWluLFxuICAgICAgICAgIG1heDogIWFuZ3VsYXIuaXNOdW1iZXIocG9pbnQubWF4KSA/IDAgOiBwb2ludC5tYXgsXG4gICAgICAgICAgcGVyY2VudGlsZTk1dGg6ICFhbmd1bGFyLmlzTnVtYmVyKHBvaW50LnBlcmNlbnRpbGU5NXRoKSA/IDAgOiBwb2ludC5wZXJjZW50aWxlOTV0aCxcbiAgICAgICAgICBtZWRpYW46ICFhbmd1bGFyLmlzTnVtYmVyKHBvaW50Lm1lZGlhbikgPyAwIDogcG9pbnQubWVkaWFuLFxuICAgICAgICAgIGVtcHR5OiBwb2ludC5lbXB0eVxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfVxuXG4gIH1cblxuICBfbW9kdWxlLmNvbnRyb2xsZXIoJ01ldHJpY3NWaWV3Q29udHJvbGxlcicsIE1ldHJpY3NWaWV3Q29udHJvbGxlcik7XG5cblxufVxuIiwiYW5ndWxhci5tb2R1bGUoXCJoYXdrdWxhci11aS1jb21wb25lbnRzLW1ldHJpY3MtdGVtcGxhdGVzXCIsIFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHskdGVtcGxhdGVDYWNoZS5wdXQoXCJwbHVnaW5zL21ldHJpY3MvaHRtbC9hZGQtdXJsLmh0bWxcIixcIjxkaXYgbmctY29udHJvbGxlcj1cXFwiSGF3a3VsYXJNZXRyaWNzLkFkZFVybENvbnRyb2xsZXIgYXMgdm1cXFwiPlxcbiAgPGRpdiBjbGFzcz1cXFwiY29udGFpbmVyIHRleHQtY2VudGVyXFxcIj5cXG4gICAgPGgxPldlbGNvbWUgQmFjayB7e3VzZXJuYW1lfX0hPC9oMT5cXG4gICAgPGgyIG5nLXNob3c9XFxcInJlc291cmNlc0xpc3QubGVuZ3RoID09PSAwXFxcIj5Db2xsZWN0IG1ldHJpY3MgZnJvbSBhIHdlYnNpdGUgdGhhdCB5b3Ugd2FudCB0byBtb25pdG9yLjwvaDI+XFxuXFxuICAgIDxmb3JtIGNsYXNzPVxcXCJmb3JtLWhvcml6b250YWwgYWRkLXVybFxcXCIgbmFtZT1cXFwiYWRkVXJsRm9ybVxcXCIgcm9sZT1cXFwiZm9ybVxcXCIgbm92YWxpZGF0ZSBuZy1zdWJtaXQ9XFxcInZtLmFkZFVybCh2bS5yZXNvdXJjZVVybClcXFwiPlxcbiAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXAgaW5wdXRcXFwiPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29sLWxnLTUgY29sLXNtLTYgYWxpZ24tY2VudGVyXFxcIj5cXG4gICAgICAgICAgPGRpdiBjbGFzcz1cXFwiaW5wdXQtZ3JvdXBcXFwiIG5nLWNsYXNzPVxcXCJ7XFwnaW5wdXQtZ3JvdXAtbGdcXCc6IHJlc291cmNlc0xpc3QubGVuZ3RoID09PSAwfVxcXCI+XFxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcInVybFxcXCIgY2xhc3M9XFxcImZvcm0tY29udHJvbFxcXCIgbmFtZT1cXFwicmVzb3VyY2VVcmxcXFwiIG5nLW1vZGVsPVxcXCJ2bS5yZXNvdXJjZVVybFxcXCJcXG4gICAgICAgICAgICAgICAgICAgbmctbW9kZWwtb3B0aW9ucz1cXFwieyB1cGRhdGVPbjogXFwnZGVmYXVsdCBibHVyXFwnfVxcXCJcXG4gICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XFxcIkVudGVyIGEgd2Vic2l0ZSBVUkwgKGUuZy4sIGh0dHA6Ly9teXNpdGUuY29tL2hvbWUpXFxcIiByZXF1aXJlZD5cXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiaGVscC1ibG9ja1xcXCJcXG4gICAgICAgICAgICAgICAgICBuZy1zaG93PVxcXCJhZGRVcmxGb3JtLnJlc291cmNlVXJsLiRkaXJ0eSAmJiBhZGRVcmxGb3JtLnJlc291cmNlVXJsLiRpbnZhbGlkXFxcIj5UaGUgVVJMIHlvdSBlbnRlcmVkIGlzIG5vdCB2YWxpZC4gUGxlYXNlIGVudGVyIGEgdmFsaWQgVVJMLjwvc3Bhbj5cXG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJpbnB1dC1ncm91cC1idG5cXFwiPlxcbiAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLXByaW1hcnlcXFwiIG5nLWNsYXNzPVxcXCJ7XFwnYnRuLWxnXFwnOiByZXNvdXJjZXNMaXN0Lmxlbmd0aCA9PT0gMH1cXFwiIHR5cGU9XFxcInN1Ym1pdFxcXCIgbmctZGlzYWJsZWQ9XFxcImFkZFVybEZvcm0uJGludmFsaWRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICBBZGQgVVJMXFxuICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgIDwvZGl2PlxcbiAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXAgbG9hZGluZyBoaWRlXFxcIj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInNwaW5uZXIgc3Bpbm5lci1sZ1xcXCI+PC9kaXY+XFxuICAgICAgICA8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBidG4tbGlua1xcXCI+Q2FuY2VsPC9idXR0b24+XFxuICAgICAgPC9kaXY+XFxuICAgIDwvZm9ybT5cXG5cXG4gICAgPGRpdiBjbGFzcz1cXFwicm93IHVybHMtbGlzdC1sYWJlbHNcXFwiPlxcbiAgICAgIDxkaXYgY2xhc3M9XFxcImNvbC1tZC00IHRleHQtbGVmdFxcXCI+XFxuICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLWxpbmtcXFwiIGRhdGEtdG9nZ2xlPVxcXCJ0b29sdGlwXFxcIiBkYXRhLXBsYWNlbWVudD1cXFwidG9wXFxcIiB0aXRsZT1cXFwiXFxcIiBkYXRhLW9yaWdpbmFsLXRpdGxlPVxcXCJTb3J0XFxcIj5cXG4gICAgICAgICAgVVJMIDxiIGNsYXNzPVxcXCJjYXJldFxcXCI+PC9iPlxcbiAgICAgICAgPC9idXR0b24+XFxuICAgICAgPC9kaXY+XFxuICAgICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTRcXFwiPlxcbiAgICAgICAgQ3VycmVudCBSZXNwb25zZSBUaW1lXFxuICAgICAgPC9kaXY+XFxuICAgICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTRcXFwiPlxcbiAgICAgICAgQ3VycmVudCBBdmFpbGFiaWxpdHlcXG4gICAgICA8L2Rpdj5cXG4gICAgPC9kaXY+XFxuXFxuICAgIDxkaXYgY2xhc3M9XFxcInBhbmVsIHBhbmVsLWRlZmF1bHQgc3VtbWFyeSB1cmwtaW5mb1xcXCIgbmctcmVwZWF0PVxcXCJyZXMgaW4gdm0ucmVzb3VyY2VMaXN0XFxcIj5cXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJyb3cgcm93LXRhYmxlXFxcIj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbC1tZC00IHN1bW1hcnktaXRlbVxcXCI+XFxuICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJ1cmwtbGlua1xcXCI+PGEgaHJlZj1cXFwiL21ldHJpY3MvcmVzcG9uc2VUaW1lL3t7cmVzLmlkfX1cXFwiPnt7cmVzLnBhcmFtZXRlcnMudXJsfX08L2E+PC9zcGFuPlxcbiAgICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLWxpbmsgdHJpZ2dlclxcXCIgdG9vbHRpcD1cXFwiRXhwYW5kL2NvbGxhcHNlXFxcIiBuZy1jbGljaz1cXFwicmVzLmV4cGFuZGVkID0gIXJlcy5leHBhbmRlZFxcXCI+PGkgY2xhc3M9XFxcImZhXFxcIiBuZy1jbGFzcz1cXFwicmVzLmV4cGFuZGVkID8gXFwnZmEtbWludXMtc3F1YXJlLW9cXCcgOiBcXCdmYS1wbHVzLXNxdWFyZS1vXFwnXFxcIj48L2k+TGFzdCAyNCBob3VyczwvYnV0dG9uPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtNCBzdW1tYXJ5LWl0ZW1cXFwiPlxcbiAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiZGF0YVxcXCI+e3tyZXMucmVzcG9uc2VUaW1lWzBdLnZhbHVlfX0gPHNwYW4+bXM8L3NwYW4+PC9zcGFuPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtNCBzdW1tYXJ5LWl0ZW1cXFwiPlxcbiAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiZGF0YVxcXCI+PGkgY2xhc3M9XFxcImZhIFxcXCIgbmctY2xhc3M9XFxcInJlcy5pc1VwID8gXFwnZmEtYXJyb3ctdXBcXCcgOiBcXCdmYS1hcnJvdy1kb3duXFwnXFxcIj48L2k+e3tyZXMuaXNVcCA/IFxcJ1VwXFwnIDogXFwnRG93blxcJ319PC9zcGFuPlxcbiAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwidXBkYXRlXFxcIiB0b29sdGlwPVxcXCJMYXN0IHVwZGF0ZVxcXCI+PGkgY2xhc3M9XFxcImZhIGZhLWNsb2NrLW9cXFwiPjwvaT57e3Jlcy51cGRhdGVUaW1lfCBkYXRlOlxcXCJISDptbVxcXCIgfX08L3NwYW4+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICA8L2Rpdj5cXG4gICAgICA8aHIgbmctc2hvdz1cXFwicmVzLmV4cGFuZGVkXFxcIj5cXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJyb3cgcm93LXRhYmxlIHBhbmVsLWV4cGFuZGVkLWNvbnRlbnRcXFwiIG5nLXNob3c9XFxcInJlcy5leHBhbmRlZFxcXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtNCBzdW1tYXJ5LWl0ZW0gdGV4dC1sZWZ0XFxcIj5cXG4gICAgICAgICAgPHVsIGNsYXNzPVxcXCJsaXN0LXVuc3R5bGVkIGFsZXJ0LXN0YXR1c1xcXCIgbmctaGlkZT1cXFwicmVzLmFsZXJ0cy5sZW5ndGggPT09IDBcXFwiPlxcbiAgICAgICAgICAgIDxsaSBuZy1yZXBlYXQ9XFxcImFsZXJ0IGluIHJlcy5hbGVydHN8bGltaXRUbzozXFxcIj5cXG4gICAgICAgICAgICAgIDxpIGNsYXNzPVxcXCJmYSBmYS1mbGFnXFxcIj48L2k+e3thbGVydC5kYXRhVGltZXN0YW1wfGRhdGU6XFwneXl5eS1NTS1kZCBISDptbVxcJ319OiA8c3Ryb25nPnt7YWxlcnQuY29uZGl0aW9uLnR5cGV9fToge3thbGVydC52YWx1ZX19PC9zdHJvbmc+XFxuICAgICAgICAgICAgPC9saT5cXG4gICAgICAgICAgPC91bD5cXG4gICAgICAgICAgPGEgaHJlZj1cXFwiL21ldHJpY3MvYWxlcnRzL3t7cmVzLmlkfX1cXFwiPlZpZXcgQWxsIEFsZXJ0cyAoe3tyZXMuYWxlcnRzLmxlbmd0aH19KTwvYT5cXG4gICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZGF0YVxcXCIgbmctc2hvdz1cXFwicmVzLmFsZXJ0cy5sZW5ndGggPT09IDBcXFwiPjxpIGNsYXNzPVxcXCJmYSBmYS10aHVtYnMtby11cFxcXCI+PC9pPk5vIEFsZXJ0czwvZGl2PlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtNCBzdW1tYXJ5LWl0ZW1cXFwiPlxcbiAgICAgICAgICA8ZGl2IGlkPVxcXCJtZXRyaWNzLWNoYXJ0XFxcIiBjbGFzcz1cXFwidG9wLWFyZWFcXFwiIHN0eWxlPVxcXCJoZWlnaHQ6IDQ0cHg7IHdpZHRoOiAyMzdweDtcXFwiPlxcbiAgICAgICAgICAgIDxoYXdrdWxhci1jaGFydCBkYXRhPVxcXCJ7e3Jlcy5yZXNwb25zZVRpbWV9fVxcXCIgY2hhcnQtdHlwZT1cXFwibGluZVxcXCIgY2hhcnQtaGVpZ2h0PVxcXCI0NFxcXCIgY2hhcnQtd2lkdGg9XFxcIjIzN1xcXCI+PC9oYXdrdWxhci1jaGFydD5cXG4gICAgICAgICAgICA8IS0tPGltZyBzcmM9XFxcImltZy9vdmVydmlldy1ncmFwaC5wbmdcXFwiIGFsdD1cXFwib3ZlcnZpZXctZ3JhcGhcXFwiIHdpZHRoPVxcXCIyMzdcXFwiIGhlaWdodD1cXFwiNDRcXFwiPi0tPlxcbiAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgPGRpdiBjbGFzcz1cXFwiYm90dG9tLWFyZWFcXFwiPlxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJkYXRhXFxcIj57e3ZtLmdldEF2ZXJhZ2UocmVzLnJlc3BvbnNlVGltZSwgXFwndmFsdWVcXCcpfX0gPHNwYW4+bXM8L3NwYW4+PC9zcGFuPlxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJpdGVtXFxcIj5BdmVyYWdlIFJlc3BvbnNlIFRpbWU8L3NwYW4+XFxuICAgICAgICAgIDwvZGl2PlxcblxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtNCBzdW1tYXJ5LWl0ZW1cXFwiPlxcbiAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ0b3AtYXJlYVxcXCI+XFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImRhdGFcXFwiIG5nLXNob3c9XFxcInJlcy5hdmFpbGFiaWxpdHkgPT09IDEwMFxcXCI+PGkgY2xhc3M9XFxcImZhIGZhLWNoZWNrXFxcIj48L2k+Tm8gRG93bnRpbWU8L3NwYW4+XFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImRhdGFcXFwiIG5nLWhpZGU9XFxcInJlcy5hdmFpbGFiaWxpdHkgPT09IDEwMFxcXCI+PGkgY2xhc3M9XFxcImZhIGZhLWFycm93LWRvd25cXFwiPjwvaT5Eb3duIHt7cmVzLmRvd25UaW1lfX0gbWluPC9zcGFuPlxcbiAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgPGRpdiBjbGFzcz1cXFwiYm90dG9tLWFyZWFcXFwiPlxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJkYXRhXFxcIiBuZy1oaWRlPVxcXCJyZXMuYXZhaWxhYmlsaXR5ID09PSAxMDBcXFwiPnt7cmVzLmF2YWlsYWJpbGl0eSB8IG51bWJlcjozfX0gPHNwYW4+JTwvc3Bhbj48L3NwYW4+XFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImRhdGFcXFwiIG5nLXNob3c9XFxcInJlcy5hdmFpbGFiaWxpdHkgPT09IDEwMFxcXCI+e3tyZXMuYXZhaWxhYmlsaXR5fX0gPHNwYW4+JTwvc3Bhbj48L3NwYW4+XFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcIml0ZW1cXFwiPkF2YWlsYWJpbGl0eTwvc3Bhbj5cXG4gICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgIDxidXR0b24gY2xhc3M9XFxcImJ0biBidG4tbGluayBkZWxldGVcXFwiIHRvb2x0aXA9XFxcIkRlbGV0ZVxcXCIgbmctY2xpY2s9XFxcInZtLmRlbGV0ZVJlc291cmNlKHJlcylcXFwiPjxpIGNsYXNzPVxcXCJmYSBmYS10cmFzaC1vXFxcIj48L2k+PC9idXR0b24+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICA8L2Rpdj5cXG4gICAgPC9kaXY+XFxuXFxuICA8L2Rpdj5cXG48L2Rpdj5cXG5cIik7XG4kdGVtcGxhdGVDYWNoZS5wdXQoXCJwbHVnaW5zL21ldHJpY3MvaHRtbC9hbGVydHMtc2V0dXAuaHRtbFwiLFwiPGRpdiBjbGFzcz1cXFwiYWxlcnQtc2V0dGluZ3NcXFwiPlxcbiAgPGZvcm0gY2xhc3M9XFxcImZvcm0taG9yaXpvbnRhbFxcXCI+XFxuICAgIDxmaWVsZHNldD5cXG4gICAgICA8bGVnZW5kPlByZWZlcmVuY2VzPC9sZWdlbmQ+XFxuICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuICAgICAgICA8bGFiZWwgY2xhc3M9XFxcImNvbC1tZC0yIGNvbnRyb2wtbGFiZWxcXFwiIGZvcj1cXFwiZW1haWxcXFwiPkVtYWlsPC9sYWJlbD5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbC1tZC02XFxcIj5cXG4gICAgICAgICAgPGlucHV0IHR5cGU9XFxcInRleHRcXFwiIGlkPVxcXCJlbWFpbFxcXCIgY2xhc3M9XFxcImZvcm0tY29udHJvbFxcXCI+XFxuICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJoZWxwLWJsb2NrXFxcIj5TZW5kIGFsZXJ0cyB0byB0aGlzIGVtYWlsIGFkZHJlc3MuPC9zcGFuPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgPC9kaXY+XFxuICAgIDwvZmllbGRzZXQ+XFxuICAgIDxmaWVsZHNldD5cXG4gICAgICA8bGVnZW5kPlJlc3BvbnNlIFRpbWU8L2xlZ2VuZD5cXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG4gICAgICAgIDxsYWJlbCBjbGFzcz1cXFwiY29sLW1kLTIgY29udHJvbC1sYWJlbFxcXCIgZm9yPVxcXCJlbWFpbFxcXCI+U3RhdHVzPC9sYWJlbD5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbC1tZC02XFxcIj5cXG4gICAgICAgICAgPGRpdiBjbGFzcz1cXFwib25vZmZzd2l0Y2hcXFwiPlxcbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJjaGVja2JveFxcXCIgaWQ9XFxcInJ0XFxcIiBjbGFzcz1cXFwib25vZmZzd2l0Y2gtY2hlY2tib3hcXFwiPlxcbiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cXFwib25vZmZzd2l0Y2gtbGFiZWxcXFwiIGZvcj1cXFwicnRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJvbm9mZnN3aXRjaC1pbm5lclxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwib25vZmZzd2l0Y2gtYWN0aXZlIG5nLWJpbmRpbmdcXFwiPk9OPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcIm9ub2Zmc3dpdGNoLWluYWN0aXZlIG5nLWJpbmRpbmdcXFwiPk9GRjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwib25vZmZzd2l0Y2gtc3dpdGNoXFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgPC9sYWJlbD5cXG4gICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICA8L2Rpdj5cXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG4gICAgICAgIDxsYWJlbCBjbGFzcz1cXFwiY29sLW1kLTIgY29udHJvbC1sYWJlbFxcXCIgZm9yPVxcXCJlbWFpbFxcXCI+VGhyZXNob2xkIGFuZCBkdXJhdGlvbjwvbGFiZWw+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtNiBpbmxpbmUtcm93XFxcIj5cXG4gICAgICAgICAgPGRpdiBjbGFzcz1cXFwiaW5wdXQtZ3JvdXAgdGltZVxcXCI+XFxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcInRleHRcXFwiIGNsYXNzPVxcXCJmb3JtLWNvbnRyb2xcXFwiIHBsYWNlaG9sZGVyPVxcXCJUaHJlc2hvbGRcXFwiPlxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJpbnB1dC1ncm91cC1hZGRvblxcXCI+bXM8L3NwYW4+XFxuICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiYmV0d2Vlbi1pbnB1dHNcXFwiPmZvcjwvc3Bhbj5cXG4gICAgICAgICAgPGRpdiBjbGFzcz1cXFwiaW5wdXQtZ3JvdXAgZHVyYXRpb25cXFwiPlxcbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJ0ZXh0XFxcIiBjbGFzcz1cXFwiZm9ybS1jb250cm9sXFxcIiBwbGFjZWhvbGRlcj1cXFwiRHVyYXRpb25cXFwiPlxcbiAgICAgICAgICAgIDxzZWxlY3QgY2xhc3M9XFxcInNlbGVjdHBpY2tlclxcXCIgc3R5bGU9XFxcImRpc3BsYXk6IG5vbmU7XFxcIj5cXG4gICAgICAgICAgICAgIDxvcHRpb24+bWlsaXNlY29uZHM8L29wdGlvbj5cXG4gICAgICAgICAgICAgIDxvcHRpb24+c2Vjb25kczwvb3B0aW9uPlxcbiAgICAgICAgICAgICAgPG9wdGlvbj5taW51dGVzPC9vcHRpb24+XFxuICAgICAgICAgICAgICA8b3B0aW9uPmhvdXJzPC9vcHRpb24+XFxuICAgICAgICAgICAgPC9zZWxlY3Q+PGRpdiBjbGFzcz1cXFwiYnRuLWdyb3VwIGJvb3RzdHJhcC1zZWxlY3QgaW5wdXQtZ3JvdXAtYnRuXFxcIj48YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBkcm9wZG93bi10b2dnbGUgc2VsZWN0cGlja2VyIGJ0bi1kZWZhdWx0XFxcIiBkYXRhLXRvZ2dsZT1cXFwiZHJvcGRvd25cXFwiIHRpdGxlPVxcXCJtaWxpc2Vjb25kc1xcXCI+PHNwYW4gY2xhc3M9XFxcImZpbHRlci1vcHRpb24gcHVsbC1sZWZ0XFxcIj5taWxpc2Vjb25kczwvc3Bhbj4mbmJzcDs8c3BhbiBjbGFzcz1cXFwiY2FyZXRcXFwiPjwvc3Bhbj48L2J1dHRvbj48ZGl2IGNsYXNzPVxcXCJkcm9wZG93bi1tZW51IG9wZW5cXFwiPjx1bCBjbGFzcz1cXFwiZHJvcGRvd24tbWVudSBpbm5lciBzZWxlY3RwaWNrZXJcXFwiIHJvbGU9XFxcIm1lbnVcXFwiPjxsaSByZWw9XFxcIjBcXFwiIGNsYXNzPVxcXCJzZWxlY3RlZFxcXCI+PGEgdGFiaW5kZXg9XFxcIjBcXFwiIGNsYXNzPVxcXCJcXFwiIHN0eWxlPVxcXCJcXFwiPjxzcGFuIGNsYXNzPVxcXCJ0ZXh0XFxcIj5taWxpc2Vjb25kczwvc3Bhbj48aSBjbGFzcz1cXFwiZ2x5cGhpY29uIGdseXBoaWNvbi1vayBpY29uLW9rIGNoZWNrLW1hcmtcXFwiPjwvaT48L2E+PC9saT48bGkgcmVsPVxcXCIxXFxcIj48YSB0YWJpbmRleD1cXFwiMFxcXCIgY2xhc3M9XFxcIlxcXCIgc3R5bGU9XFxcIlxcXCI+PHNwYW4gY2xhc3M9XFxcInRleHRcXFwiPnNlY29uZHM8L3NwYW4+PGkgY2xhc3M9XFxcImdseXBoaWNvbiBnbHlwaGljb24tb2sgaWNvbi1vayBjaGVjay1tYXJrXFxcIj48L2k+PC9hPjwvbGk+PGxpIHJlbD1cXFwiMlxcXCI+PGEgdGFiaW5kZXg9XFxcIjBcXFwiIGNsYXNzPVxcXCJcXFwiIHN0eWxlPVxcXCJcXFwiPjxzcGFuIGNsYXNzPVxcXCJ0ZXh0XFxcIj5taW51dGVzPC9zcGFuPjxpIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLW9rIGljb24tb2sgY2hlY2stbWFya1xcXCI+PC9pPjwvYT48L2xpPjxsaSByZWw9XFxcIjNcXFwiPjxhIHRhYmluZGV4PVxcXCIwXFxcIiBjbGFzcz1cXFwiXFxcIiBzdHlsZT1cXFwiXFxcIj48c3BhbiBjbGFzcz1cXFwidGV4dFxcXCI+aG91cnM8L3NwYW4+PGkgY2xhc3M9XFxcImdseXBoaWNvbiBnbHlwaGljb24tb2sgaWNvbi1vayBjaGVjay1tYXJrXFxcIj48L2k+PC9hPjwvbGk+PC91bD48L2Rpdj48L2Rpdj5cXG4gICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJoZWxwLWJsb2NrXFxcIj5TZW5kIGFsZXJ0cyB3aGVuIHRoZSByZXNwb25zZSB0aW1lIGlzIG92ZXIgMjAwMCBtcyBmb3IgbW9yZSB0aGFuIDMgbWludXRlcy48L3NwYW4+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICA8L2Rpdj5cXG4gICAgPC9maWVsZHNldD5cXG4gICAgPGZpZWxkc2V0PlxcbiAgICAgIDxsZWdlbmQ+RG93bnRpbWU8L2xlZ2VuZD5cXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG4gICAgICAgIDxsYWJlbCBjbGFzcz1cXFwiY29sLW1kLTIgY29udHJvbC1sYWJlbFxcXCIgZm9yPVxcXCJlbWFpbFxcXCI+U3RhdHVzPC9sYWJlbD5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbC1tZC02XFxcIj5cXG4gICAgICAgICAgPGRpdiBjbGFzcz1cXFwib25vZmZzd2l0Y2hcXFwiPlxcbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJjaGVja2JveFxcXCIgaWQ9XFxcInJ0XFxcIiBuYW1lPVxcXCJhY2Nlc3NcXFwiIGNsYXNzPVxcXCJvbm9mZnN3aXRjaC1jaGVja2JveFxcXCI+XFxuICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVxcXCJvbm9mZnN3aXRjaC1sYWJlbFxcXCIgZm9yPVxcXCJydFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcIm9ub2Zmc3dpdGNoLWlubmVyXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJvbm9mZnN3aXRjaC1hY3RpdmUgbmctYmluZGluZ1xcXCI+T048L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwib25vZmZzd2l0Y2gtaW5hY3RpdmUgbmctYmluZGluZ1xcXCI+T0ZGPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJvbm9mZnN3aXRjaC1zd2l0Y2hcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICA8L2xhYmVsPlxcbiAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgIDwvZGl2PlxcbiAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcbiAgICAgICAgPGxhYmVsIGNsYXNzPVxcXCJjb2wtbWQtMiBjb250cm9sLWxhYmVsXFxcIiBmb3I9XFxcImVtYWlsXFxcIj5EdXJhdGlvbjwvbGFiZWw+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtNiBpbmxpbmUtcm93XFxcIj5cXG4gICAgICAgICAgPGRpdiBjbGFzcz1cXFwiaW5wdXQtZ3JvdXAgZHVyYXRpb25cXFwiPlxcbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJ0ZXh0XFxcIiBjbGFzcz1cXFwiZm9ybS1jb250cm9sXFxcIiBwbGFjZWhvbGRlcj1cXFwiRHVyYXRpb25cXFwiPlxcbiAgICAgICAgICAgIDxzZWxlY3QgY2xhc3M9XFxcInNlbGVjdHBpY2tlclxcXCIgc3R5bGU9XFxcImRpc3BsYXk6IG5vbmU7XFxcIj5cXG4gICAgICAgICAgICAgIDxvcHRpb24+bWlsaXNlY29uZHM8L29wdGlvbj5cXG4gICAgICAgICAgICAgIDxvcHRpb24+c2Vjb25kczwvb3B0aW9uPlxcbiAgICAgICAgICAgICAgPG9wdGlvbj5taW51dGVzPC9vcHRpb24+XFxuICAgICAgICAgICAgICA8b3B0aW9uPmhvdXJzPC9vcHRpb24+XFxuICAgICAgICAgICAgPC9zZWxlY3Q+PGRpdiBjbGFzcz1cXFwiYnRuLWdyb3VwIGJvb3RzdHJhcC1zZWxlY3QgaW5wdXQtZ3JvdXAtYnRuXFxcIj48YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBkcm9wZG93bi10b2dnbGUgc2VsZWN0cGlja2VyIGJ0bi1kZWZhdWx0XFxcIiBkYXRhLXRvZ2dsZT1cXFwiZHJvcGRvd25cXFwiIHRpdGxlPVxcXCJtaWxpc2Vjb25kc1xcXCI+PHNwYW4gY2xhc3M9XFxcImZpbHRlci1vcHRpb24gcHVsbC1sZWZ0XFxcIj5taWxpc2Vjb25kczwvc3Bhbj4mbmJzcDs8c3BhbiBjbGFzcz1cXFwiY2FyZXRcXFwiPjwvc3Bhbj48L2J1dHRvbj48ZGl2IGNsYXNzPVxcXCJkcm9wZG93bi1tZW51IG9wZW5cXFwiPjx1bCBjbGFzcz1cXFwiZHJvcGRvd24tbWVudSBpbm5lciBzZWxlY3RwaWNrZXJcXFwiIHJvbGU9XFxcIm1lbnVcXFwiPjxsaSByZWw9XFxcIjBcXFwiIGNsYXNzPVxcXCJzZWxlY3RlZFxcXCI+PGEgdGFiaW5kZXg9XFxcIjBcXFwiIGNsYXNzPVxcXCJcXFwiIHN0eWxlPVxcXCJcXFwiPjxzcGFuIGNsYXNzPVxcXCJ0ZXh0XFxcIj5taWxpc2Vjb25kczwvc3Bhbj48aSBjbGFzcz1cXFwiZ2x5cGhpY29uIGdseXBoaWNvbi1vayBpY29uLW9rIGNoZWNrLW1hcmtcXFwiPjwvaT48L2E+PC9saT48bGkgcmVsPVxcXCIxXFxcIj48YSB0YWJpbmRleD1cXFwiMFxcXCIgY2xhc3M9XFxcIlxcXCIgc3R5bGU9XFxcIlxcXCI+PHNwYW4gY2xhc3M9XFxcInRleHRcXFwiPnNlY29uZHM8L3NwYW4+PGkgY2xhc3M9XFxcImdseXBoaWNvbiBnbHlwaGljb24tb2sgaWNvbi1vayBjaGVjay1tYXJrXFxcIj48L2k+PC9hPjwvbGk+PGxpIHJlbD1cXFwiMlxcXCI+PGEgdGFiaW5kZXg9XFxcIjBcXFwiIGNsYXNzPVxcXCJcXFwiIHN0eWxlPVxcXCJcXFwiPjxzcGFuIGNsYXNzPVxcXCJ0ZXh0XFxcIj5taW51dGVzPC9zcGFuPjxpIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLW9rIGljb24tb2sgY2hlY2stbWFya1xcXCI+PC9pPjwvYT48L2xpPjxsaSByZWw9XFxcIjNcXFwiPjxhIHRhYmluZGV4PVxcXCIwXFxcIiBjbGFzcz1cXFwiXFxcIiBzdHlsZT1cXFwiXFxcIj48c3BhbiBjbGFzcz1cXFwidGV4dFxcXCI+aG91cnM8L3NwYW4+PGkgY2xhc3M9XFxcImdseXBoaWNvbiBnbHlwaGljb24tb2sgaWNvbi1vayBjaGVjay1tYXJrXFxcIj48L2k+PC9hPjwvbGk+PC91bD48L2Rpdj48L2Rpdj5cXG4gICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJoZWxwLWJsb2NrXFxcIj5TZW5kIGFsZXJ0cyB3aGVuIHRoZSBkb3dudGltZSBsYXN0cyBtb3JlIHRoYW4gMiBtaW51dGVzLjwvc3Bhbj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgIDwvZGl2PlxcbiAgICA8L2ZpZWxkc2V0PlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtMTAgY29sLW1kLW9mZnNldC0yXFxcIj5cXG4gICAgICAgIDxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1wcmltYXJ5XFxcIj5TYXZlPC9idXR0b24+XFxuICAgICAgICA8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdFxcXCI+Q2FuY2VsPC9idXR0b24+XFxuICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcbiAgPC9mb3JtPlxcblxcbjwvZGl2PlxcblwiKTtcbiR0ZW1wbGF0ZUNhY2hlLnB1dChcInBsdWdpbnMvbWV0cmljcy9odG1sL2FsZXJ0cy12aWV3Lmh0bWxcIixcIjxwIGNsYXNzPVxcXCJpbmZvLXRvcFxcXCI+PHN0cm9uZz57e21hYy5hbGVydExpc3QubGVuZ3RofX0gYWxlcnRzPC9zdHJvbmc+IGxhc3Qgd2Vlay48L3A+XFxuXFxuPGRpdiBjbGFzcz1cXFwiYWxlcnRzLWFjdGl2aXR5XFxcIj5cXG4gIDxkaXYgbmctcmVwZWF0PVxcXCJhbGVydCBpbiBtYWMuYWxlcnRMaXN0XFxcIj5cXG4gICAgPGRpdiBjbGFzcz1cXFwicGFuZWwgcGFuZWwtZGVmYXVsdCBhbGVydCBhbGVydC1kYW5nZXJcXFwiPlxcbiAgICAgIDxkaXYgY2xhc3M9XFxcImFsZXJ0LWljb25cXFwiPlxcbiAgICAgICAgPGkgY2xhc3M9XFxcImZhIGZhLWxpbmUtY2hhcnRcXFwiPjwvaT5cXG4gICAgICA8L2Rpdj5cXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJkYXRlXFxcIj5cXG4gICAgICAgIHt7YWxlcnQuY3RpbWUgfCBkYXRlOlxcJ21lZGl1bVxcJyB9fVxcbiAgICAgIDwvZGl2PlxcbiAgICAgIDxkaXYgY2xhc3M9XFxcImV2ZW50XFxcIj5cXG4gICAgICAgIDxzdHJvbmc+TWV0cmljczwvc3Ryb25nPiBtZXQgdGhlIGNvbmRpdGlvbi5cXG4gICAgICA8L2Rpdj5cXG4gICAgPC9kaXY+XFxuICA8L2Rpdj5cXG48L2Rpdj5cXG5cIik7XG4kdGVtcGxhdGVDYWNoZS5wdXQoXCJwbHVnaW5zL21ldHJpY3MvaHRtbC9hbGVydHMuaHRtbFwiLFwiPGRpdiBjbGFzcz1cXFwicm93XFxcIiA+XFxuICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtMTJcXFwiPlxcbiAgICA8aDE+QWxlcnRzPC9oMT5cXG4gICAgPHRhYnNldD5cXG4gICAgICA8dGFiIGhlYWRpbmc9XFxcIkFsZXJ0c1xcXCI+XFxuICAgICAgICA8ZGl2IG5nLWluY2x1ZGU9XFxcIlxcJ3BsdWdpbnMvbWV0cmljcy9odG1sL2FsZXJ0cy12aWV3Lmh0bWxcXCdcXFwiIG5nLWNvbnRyb2xsZXI9XFxcIk1ldHJpY3NBbGVydENvbnRyb2xsZXIgYXMgbWFjXFxcIj48L2Rpdj5cXG4gICAgICA8L3RhYj5cXG4gICAgICA8dGFiIGhlYWRpbmc9XFxcIkFsZXJ0cyBTZXR1cFxcXCI+XFxuICAgICAgICA8ZGl2IG5nLWluY2x1ZGU9XFxcIlxcJ3BsdWdpbnMvbWV0cmljcy9odG1sL2FsZXJ0cy1zZXR1cC5odG1sXFwnXFxcIj48L2Rpdj5cXG4gICAgICA8L3RhYj5cXG4gICAgPC90YWJzZXQ+XFxuICA8L2Rpdj5cXG48L2Rpdj5cXG5cIik7XG4kdGVtcGxhdGVDYWNoZS5wdXQoXCJwbHVnaW5zL21ldHJpY3MvaHRtbC9jcmVhdGUtYWxlcnQtZm9ybS5odG1sXCIsXCI8ZGl2IG5nLWNvbnRyb2xsZXI9XFxcIlF1aWNrQWxlcnRDb250cm9sbGVyIGFzIHFhY1xcXCIgbmctc2hvdz1cXFwidm0uY2hhcnREYXRhLmRhdGFQb2ludHMubGVuZ3RoID4gMVxcXCI+XFxuICA8ZGl2IG5nLXNob3c9XFxcIiFzaG93UXVpY2tBbGVydFxcXCIgY2xhc3M9XFxcImNvbC1zbS05IGNvbC1tZC0xMCBjb250ZW50XFxcIj5cXG4gICAgPGJ1dHRvbiBjbGFzcz1cXFwiYnRuIGJ0bi1wcmltYXJ5IHB1bGwtbGVmdFxcXCIgbmctY2xpY2s9XFxcInFhYy50b2dnbGVRdWlja0FsZXJ0KClcXFwiPkFkZCBhbiBBbGVydDwvYnV0dG9uPlxcbiAgPC9kaXY+XFxuICA8ZGl2IG5nLXNob3c9XFxcInNob3dRdWlja0FsZXJ0XFxcIiBjbGFzcz1cXFwiY29sLXNtLTkgY29sLW1kLTEwIGNvbnRlbnRcXFwiPlxcbiAgICA8aDE+QWRkIGFuIEFsZXJ0PC9oMT5cXG5cXG4gICAgPGZvcm0gY2xhc3M9XFxcImZvcm0taG9yaXpvbnRhbFxcXCIgbmFtZT1cXFwiYWRkUXVpY2tBbGVydEZvcm1cXFwiIHJvbGU9XFxcImZvcm1cXFwiPlxcbiAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcbiAgICAgICAgPGxhYmVsIGNsYXNzPVxcXCJjb2wtbWQtNCBjb250cm9sLWxhYmVsXFxcIj5cXG4gICAgICAgICAgRmlyZSB3aGVuIG1ldHJpYyBpc1xcbiAgICAgICAgPC9sYWJlbD5cXG5cXG4gICAgICAgIDxkaXYgaWQ9XFxcImFsZXJ0LXJhZGlvLWNvbnRhaW5lclxcXCIgY2xhc3M9XFxcImNvbC1tZC00XFxcIj5cXG4gICAgICAgICAgPGxhYmVsIGNsYXNzPVxcXCJyYWRpby1pbmxpbmVcXFwiPlxcbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJyYWRpb1xcXCIgbmctbW9kZWw9XFxcInF1aWNrVHJpZ2dlci5vcGVyYXRvclxcXCIgY2xhc3M9XFxcInJhZGlvXFxcIiB2YWx1ZT1cXFwiTFRcXFwiPiA8XFxuICAgICAgICAgIDwvbGFiZWw+XFxuICAgICAgICAgIDxsYWJlbCBjbGFzcz1cXFwicmFkaW8taW5saW5lXFxcIj5cXG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwicmFkaW9cXFwiIG5nLW1vZGVsPVxcXCJxdWlja1RyaWdnZXIub3BlcmF0b3JcXFwiIGNsYXNzPVxcXCJyYWRpb1xcXCIgdmFsdWU9XFxcIkdUXFxcIj4gPlxcbiAgICAgICAgICA8L2xhYmVsPlxcbiAgICAgICAgICA8bGFiZWwgY2xhc3M9XFxcInJhZGlvLWlubGluZVxcXCI+XFxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcInJhZGlvXFxcIiBuZy1tb2RlbD1cXFwicXVpY2tUcmlnZ2VyLm9wZXJhdG9yXFxcIiBjbGFzcz1cXFwicmFkaW9cXFwiIHZhbHVlPVxcXCJMVEVcXFwiPiA8PVxcbiAgICAgICAgICA8L2xhYmVsPlxcbiAgICAgICAgICA8bGFiZWwgY2xhc3M9XFxcInJhZGlvLWlubGluZVxcXCI+XFxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcInJhZGlvXFxcIiBuZy1tb2RlbD1cXFwicXVpY2tUcmlnZ2VyLm9wZXJhdG9yXFxcIiBjbGFzcz1cXFwicmFkaW9cXFwiIHZhbHVlPVxcXCJHVEVcXFwiPiA+PVxcbiAgICAgICAgICA8L2xhYmVsPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgPC9kaXY+XFxuICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuICAgICAgICA8bGFiZWwgY2xhc3M9XFxcImNvbC1tZC00IGNvbnRyb2wtbGFiZWxcXFwiIGZvcj1cXFwidGhyZXNob2xkXFxcIj5cXG4gICAgICAgICAgT2YgdGhyZXNob2xkXFxuICAgICAgICA8L2xhYmVsPlxcblxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTJcXFwiPlxcbiAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwibnVtYmVyXFxcIiBpZD1cXFwidGhyZXNob2xkXFxcIiBuZy1tb2RlbD1cXFwicXVpY2tUcmlnZ2VyLnRocmVzaG9sZFxcXCIgY2xhc3M9XFxcImZvcm0tY29udHJvbFxcXCJcXG4gICAgICAgICAgICAgICAgIG5nLW1pbmxlbmd0aD1cXFwiMVxcXCIgcmVxdWlyZWQ+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICA8L2Rpdj5cXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG4gICAgICAgIDxsYWJlbCBjbGFzcz1cXFwiY29sLW1kLTQgY29udHJvbC1sYWJlbFxcXCIgZm9yPVxcXCJhY3Rpb25zXFxcIj5cXG4gICAgICAgICAgTm90aWZ5IHRvOlxcbiAgICAgICAgPC9sYWJlbD5cXG5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbC1tZC0zXFxcIj5cXG4gICAgICAgICAgPHVpLXNlbGVjdCBpZD1cXFwiYWN0aW9uc1xcXCIgbXVsdGlwbGUgbmctbW9kZWw9XFxcInF1aWNrVHJpZ2dlci5hY3Rpb25zXFxcIiB0aGVtZT1cXFwiYm9vdHN0cmFwXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgIG5nLWRpc2FibGVkPVxcXCJkaXNhYmxlZFxcXCIgY2xvc2Utb24tc2VsZWN0PVxcXCJmYWxzZVxcXCI+XFxuICAgICAgICAgICAgPHVpLXNlbGVjdC1tYXRjaCBwbGFjZWhvbGRlcj1cXFwiU2VsZWN0IGFjdGlvbi4uLlxcXCI+e3skaXRlbX19PC91aS1zZWxlY3QtbWF0Y2g+XFxuICAgICAgICAgICAgPHVpLXNlbGVjdC1jaG9pY2VzIHJlcGVhdD1cXFwiYWN0aW9uIGluIGFjdGlvbnMgfCBmaWx0ZXI6JHNlbGVjdC5zZWFyY2hcXFwiPlxcbiAgICAgICAgICAgICAge3sgYWN0aW9uIH19XFxuICAgICAgICAgICAgPC91aS1zZWxlY3QtY2hvaWNlcz5cXG4gICAgICAgICAgPC91aS1zZWxlY3Q+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICA8L2Rpdj5cXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbC1tZC1vZmZzZXQtNCBjb2wtbWQtNlxcXCI+XFxuICAgICAgICAgIDxidXR0b24gY2xhc3M9XFxcImJ0biBidG4tcHJpbWFyeVxcXCIgbmctY2xpY2s9XFxcInFhYy5zYXZlUXVpY2tBbGVydCgpXFxcIj5DcmVhdGUgQWxlcnQ8L2J1dHRvbj5cXG4gICAgICAgICAgPGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHRcXFwiIG5nLWNsaWNrPVxcXCJxYWMudG9nZ2xlUXVpY2tBbGVydCgpXFxcIj5DYW5jZWw8L2J1dHRvbj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgIDwvZGl2PlxcbiAgICA8L2Zvcm0+XFxuICA8L2Rpdj5cXG48L2Rpdj5cXG5cIik7XG4kdGVtcGxhdGVDYWNoZS5wdXQoXCJwbHVnaW5zL21ldHJpY3MvaHRtbC9yZXNwb25zZS10aW1lLmh0bWxcIixcIjxkaXYgbmctY29udHJvbGxlcj1cXFwiTWV0cmljc1ZpZXdDb250cm9sbGVyIGFzIHZtXFxcIj5cXG5cXG4gIDxkaXYgY2xhc3M9XFxcImNvbC1zbS05IGNvbC1tZC0xMCBjb250ZW50XFxcIj5cXG5cXG4gICAgPGRpdiBjbGFzcz1cXFwid2VsbFxcXCIgaWQ9XFxcImNvbnRyb2wtYmFyXFxcIj5cXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiY29sLW1kLTMgY29sLXNtLTQgc2VsZWN0LXVybC1jb250YWluZXJcXFwiPlxcbiAgICAgICAgICAgICAgICA8c2VsZWN0IGNsYXNzPVxcXCJmb3JtLWNvbnRyb2wgaW5wdXQtc20gc2VsZWN0LXVybFxcXCIgbmctbW9kZWw9XFxcInZtLnNlbGVjdGVkUmVzb3VyY2VcXFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgbmctb3B0aW9ucz1cXFwicnMucGFyYW1ldGVycy51cmwgZm9yIHJzIGluIHZtLnJlc291cmNlTGlzdFxcXCI+PC9zZWxlY3Q+XFxuICAgICAgICAgICAgPC9zcGFuPlxcbiAgICA8L2Rpdj5cXG5cXG4gICAgPGRpdiBjbGFzcz1cXFwiY29sLXNtLTkgY29sLW1kLTEwIGNvbnRlbnQgcmVzcG9uc2UtdGltZVxcXCI+XFxuICAgICAgPGgxPlJlc3BvbnNlIFRpbWU8L2gxPlxcblxcbiAgICAgIDxkaXYgY2xhc3M9XFxcInBhbmVsIHBhbmVsLWRlZmF1bHQgZ3JhcGgtc3VtbWFyeVxcXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJyb3dcXFwiPlxcbiAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtNCBzdW1tYXJ5LWl0ZW1cXFwiPlxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJkYXRhXFxcIj57e3ZtLmF2ZXJhZ2V9fSA8c3Bhbj5tczwvc3Bhbj48L3NwYW4+XFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcIml0ZW1cXFwiPkF2ZXJhZ2U8L3NwYW4+XFxuICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtNCBzdW1tYXJ5LWl0ZW1cXFwiPlxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJkYXRhXFxcIj57e3ZtLm1lZGlhbn19IDxzcGFuPm1zPC9zcGFuPjwvc3Bhbj5cXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiaXRlbVxcXCI+TWVkaWFuPC9zcGFuPlxcbiAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTQgc3VtbWFyeS1pdGVtXFxcIj5cXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiZGF0YVxcXCI+e3t2bS5wZXJjZW50aWxlOTV0aH19IDxzcGFuPm1zPC9zcGFuPjwvc3Bhbj5cXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiaXRlbVxcXCI+OTV0aCBwZXJjZW50aWxlPC9zcGFuPlxcbiAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgIDwvZGl2PlxcblxcblxcbiAgICAgIDxkaXYgY2xhc3M9XFxcInBhbmVsIHBhbmVsLWRlZmF1bHQgZ3JhcGhcXFwiPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwibGVnZW5kIHB1bGwtbGVmdFxcXCIgbmctc2hvdz1cXFwidm0uY2hhcnREYXRhLmRhdGFQb2ludHMubGVuZ3RoID4gMFxcXCI+XFxuICAgICAgICAgIDxzcGFuPjxpIGNsYXNzPVxcXCJmYSBmYS1jaXJjbGUgcHJpbWFyeVxcXCI+PC9pPlJlc3BvbnNlIFRpbWU8L3NwYW4+XFxuICAgICAgICAgIDxzcGFuPjxpIGNsYXNzPVxcXCJmYSBmYS1jaXJjbGUgZGFuZ2VyXFxcIj48L2k+UmVzcG9uc2UgVGltZSAoYWJvdmUgdGhlIHRocmVzaG9sZCk8L3NwYW4+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInVwZGF0ZSBwdWxsLXJpZ2h0XFxcIiBuZy1zaG93PVxcXCJ2bS5jaGFydERhdGEuZGF0YVBvaW50cy5sZW5ndGggPiAwXFxcIiA+XFxuICAgICAgICAgIDxpIGNsYXNzPVxcXCJmYSBmYS1jbG9jay1vXFxcIj48L2k+PGEgbmctY2xpY2s9XFxcInZtLnJlZnJlc2hDaGFydERhdGFOb3codm0uZ2V0TWV0cmljSWQoKSlcXFwiPjxzdHJvbmc+TGFzdFxcbiAgICAgICAgICB1cGRhdGU8L3N0cm9uZz4gMSBtaW51dGVzIGFnbzwvYT5cXG4gICAgICAgIDwvZGl2PlxcblxcbiAgICAgICAgPHAgY2xhc3M9XFxcImxhYmVsIGxhYmVsLWluZm8gd2FpdGluZy1sYWJlbFxcXCIgbmctaGlkZT1cXFwidm0uY2hhcnREYXRhLmRhdGFQb2ludHMubGVuZ3RoID4gMFxcXCIgPldlIGFyZVxcbiAgICAgICAgICBjb2xsZWN0aW5nIHlvdXIgaW5pdGlhbCBkYXRhLiBQbGVhc2UgYmUgcGF0aWVudChjb3VsZCBiZSB1cCB0byBhIG1pbnV0ZSkuLi48L3A+XFxuXFxuXFxuICAgICAgICA8ZGl2IGlkPVxcXCJtZXRyaWNzLWNoYXJ0XFxcIj5cXG4gICAgICAgICAgPCEtLSBISU5UOiBjb2xvcnMgZm9yIHRoZSBjaGFydCBjYW4gYmUgY2hhbmdlZCBpbiB0aGUgaGF3a3VsYXItY2hhcnRzLmNzcyAtLT5cXG4gICAgICAgICAgPGhhd2t1bGFyLWNoYXJ0XFxuICAgICAgICAgICAgZGF0YT1cXFwie3t2bS5jaGFydERhdGEuZGF0YVBvaW50c319XFxcIlxcbiAgICAgICAgICAgIGNoYXJ0LXR5cGU9XFxcImhhd2t1bGFybWV0cmljXFxcIlxcbiAgICAgICAgICAgIGFsZXJ0LXZhbHVlPVxcXCI1MDBcXFwiXFxuICAgICAgICAgICAgeS1heGlzLXVuaXRzPVxcXCJSZXNwb25zZSBUaW1lIChtcylcXFwiXFxuICAgICAgICAgICAgY2hhcnQtaGVpZ2h0PVxcXCIyNTBcXFwiPlxcbiAgICAgICAgICA8L2hhd2t1bGFyLWNoYXJ0PlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgPC9kaXY+XFxuXFxuXFxuICAgIDwvZGl2PlxcblxcblxcbiAgPC9kaXY+XFxuXFxuPC9kaXY+XFxuXFxuXFxuXCIpO1xuJHRlbXBsYXRlQ2FjaGUucHV0KFwicGx1Z2lucy9tZXRyaWNzL2h0bWwvdXAtZG93bnRpbWUuaHRtbFwiLFwiPHNlY3Rpb24gY2xhc3M9XFxcImF2YWlsYWJpbGl0eVxcXCIgbmctY29udHJvbGxlcj1cXFwiTWV0cmljc0F2YWlsYWJpbGl0eUNvbnRyb2xsZXIgYXMgdm1cXFwiPlxcblxcbiAgPGgxPkF2YWlsYWJpbGl0eTwvaDE+XFxuXFxuICA8ZGl2IGNsYXNzPVxcXCJwYW5lbCBwYW5lbC1kZWZhdWx0IHN1bW1hcnlcXFwiPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJyb3dcXFwiPlxcbiAgICAgIDxkaXYgY2xhc3M9XFxcImNvbC1tZC0zIHN1bW1hcnktaXRlbVxcXCI+XFxuICAgICAgICA8c3BhbiBjbGFzcz1cXFwiZGF0YVxcXCI+e3t2bS5hdmFpbGFiaWxpdHlQZXJjZW50ICogMTAwfX0gJTwvc3Bhbj5cXG4gICAgICAgIDxzcGFuIGNsYXNzPVxcXCJpdGVtXFxcIj5BdmFpbGFiaWxpdHk8L3NwYW4+XFxuICAgICAgPC9kaXY+XFxuICAgICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTMgc3VtbWFyeS1pdGVtXFxcIj5cXG4gICAgICAgIDxzcGFuIGNsYXNzPVxcXCJkYXRhXFxcIj57e3ZtLmRvd25UaW1lRHVyYXRpb259fTwvc3Bhbj5cXG4gICAgICAgIDxzcGFuIGNsYXNzPVxcXCJpdGVtXFxcIj5Ub3RhbCBEb3dudGltZSBEdXJhdGlvbjwvc3Bhbj5cXG4gICAgICA8L2Rpdj5cXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtMyBzdW1tYXJ5LWl0ZW1cXFwiPlxcbiAgICAgICAgPHNwYW4gY2xhc3M9XFxcImRhdGFcXFwiPnt7dm0ubGFzdERvd25UaW1lIHwgZGF0ZTpcXCdtZWRpdW1EYXRlXFwnfX08L3NwYW4+XFxuICAgICAgICA8c3BhbiBjbGFzcz1cXFwiaXRlbVxcXCI+TGFzdCBEb3dudGltZTwvc3Bhbj5cXG4gICAgICA8L2Rpdj5cXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtMyBzdW1tYXJ5LWl0ZW1cXFwiPlxcbiAgICAgICAgPHNwYW4gY2xhc3M9XFxcImRhdGFcXFwiPnt7dm0uZG93blRpbWVFdmVudHN9fTwvc3Bhbj5cXG4gICAgICAgIDxzcGFuIGNsYXNzPVxcXCJpdGVtXFxcIj5Eb3dudGltZSBFdmVudHM8L3NwYW4+XFxuICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcbiAgPC9kaXY+XFxuXFxuICA8ZGl2IGNsYXNzPVxcXCJwYW5lbCBwYW5lbC1kZWZhdWx0IGdyYXBoXFxcIj5cXG4gICAgPGRpdiBjbGFzcz1cXFwidXBkYXRlIHB1bGwtcmlnaHRcXFwiPlxcbiAgICAgIDxpIGNsYXNzPVxcXCJmYSBmYS1jbG9jay1vXFxcIj48L2k+PHN0cm9uZz5MYXN0IHVwZGF0ZTwvc3Ryb25nPiAxIG1pbnV0ZXMgYWdvXFxuICAgIDwvZGl2PlxcbiAgICA8ZGl2PlRPRE86IEF2YWlsIENoYXJ0IGdvZXMgaGVyZS4uLjwvZGl2PlxcbiAgPC9kaXY+XFxuXFxuPC9zZWN0aW9uPjwhLS0gLmF2YWlsYWJpbGl0eSAtLT5cXG5cIik7fV0pOyBoYXd0aW9QbHVnaW5Mb2FkZXIuYWRkTW9kdWxlKFwiaGF3a3VsYXItdWktY29tcG9uZW50cy1tZXRyaWNzLXRlbXBsYXRlc1wiKTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=