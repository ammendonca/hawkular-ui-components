/// Copyright 2014-2015 Red Hat, Inc. and/or its affiliates
/// and other contributors as indicated by the @author tags.
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///   http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.


var HawkularMetrics;
(function (HawkularMetrics) {
    HawkularMetrics.pluginName = "hawkular-metrics";
    HawkularMetrics.log = Logger.get(HawkularMetrics.pluginName);
    HawkularMetrics.templatePath = "plugins/metrics/html";
    HawkularMetrics.globalTenantId = "test";
    HawkularMetrics.globalMetricId = "";
    HawkularMetrics.globalResourceUrl = "";
    HawkularMetrics.globalResourceList = [];
    HawkularMetrics.globalChartTimeRange;
    var ChartTimeRange = (function () {
        function ChartTimeRange(initialHoursDifference) {
            this.initialHoursDifference = initialHoursDifference;
            this.init();
        }
        ChartTimeRange.prototype.init = function () {
            this.endTimestamp = moment().valueOf();
            this.startTimestamp = moment().subtract('hour', this.initialHoursDifference).valueOf();
        };
        ChartTimeRange.prototype.getStartDate = function () {
            return new Date(this.startTimestamp);
        };
        ChartTimeRange.prototype.getEndDate = function () {
            return new Date(this.endTimestamp);
        };
        ChartTimeRange.prototype.getFormattedTimeRange = function () {
            return moment(this.startTimestamp).format('H:mm') + ' - ' + moment(this.endTimestamp).format('H:mm') + ' (' + moment(this.endTimestamp).from(moment(this.startTimestamp), true) + ')';
        };
        return ChartTimeRange;
    })();
    HawkularMetrics.ChartTimeRange = ChartTimeRange;
})(HawkularMetrics || (HawkularMetrics = {}));

var HawkularMetrics;
(function (HawkularMetrics) {
    HawkularMetrics._module = angular.module(HawkularMetrics.pluginName, ['ngResource', 'ui.select', 'hawkularCharts', 'hawkular.services']);
    var metricsTab;
    HawkularMetrics._module.config(['$httpProvider', '$locationProvider', '$routeProvider', 'HawtioNavBuilderProvider', function ($httpProvider, $locationProvider, $routeProvider, navBuilder) {
        metricsTab = navBuilder.create().id(HawkularMetrics.pluginName).title(function () { return 'Metrics'; }).href(function () { return '/metrics'; }).subPath('Add Url', 'addUrl', navBuilder.join(HawkularMetrics.templatePath, 'add-url.html')).subPath('Home', 'home', navBuilder.join(HawkularMetrics.templatePath, 'home.html')).subPath('Response Time', 'responseTime', navBuilder.join(HawkularMetrics.templatePath, 'response-time.html')).subPath('Up/Downtime', 'upDowntime', navBuilder.join(HawkularMetrics.templatePath, 'up-downtime.html')).subPath('Alerts', 'alerts', navBuilder.join(HawkularMetrics.templatePath, 'alerts.html')).build();
        navBuilder.configureRouting($routeProvider, metricsTab);
        $locationProvider.html5Mode(true);
    }]);
    HawkularMetrics._module.run(['HawtioNav', function (HawtioNav) {
        HawtioNav.add(metricsTab);
        HawkularMetrics.log.debug('loaded Metrics Plugin');
    }]);
    HawkularMetrics._module.directive('hkEnter', function () {
        return function (scope, element, attrs) {
            element.bind('keydown keypress', function (event) {
                if (event.which === 13) {
                    scope.$apply(function () {
                        scope.$eval(attrs.hkEnter);
                    });
                    event.preventDefault();
                }
            });
        };
    });
    hawtioPluginLoader.addModule(HawkularMetrics.pluginName);
})(HawkularMetrics || (HawkularMetrics = {}));

var HawkularMetrics;
(function (HawkularMetrics) {
    var AddUrlController = (function () {
        function AddUrlController($location, $scope, $rootScope, $log, HawkularInventory, resourceUrl) {
            this.$location = $location;
            this.$scope = $scope;
            this.$rootScope = $rootScope;
            this.$log = $log;
            this.HawkularInventory = HawkularInventory;
            this.resourceUrl = resourceUrl;
            this.httpUriPart = 'http://';
            $scope.vm = this;
            this.resourceUrl = this.httpUriPart;
        }
        AddUrlController.prototype.addUrl = function (url) {
            var _this = this;
            var resource = {
                type: 'URL',
                id: '',
                parameters: {
                    url: url
                }
            };
            this.$log.info('Adding new Resource Url to Hawkular-inventory: ' + url);
            HawkularMetrics.globalChartTimeRange = new HawkularMetrics.ChartTimeRange(1);
            this.HawkularInventory.Resource.save({ tenantId: HawkularMetrics.globalTenantId }, resource).$promise.then(function (newResource) {
                HawkularMetrics.globalMetricId = newResource.id;
                HawkularMetrics.globalResourceUrl = resource.parameters.url;
                console.dir(newResource);
                _this.$log.info('New Resource ID: ' + HawkularMetrics.globalMetricId + ' created for url: ' + HawkularMetrics.globalResourceUrl);
                var metrics = [{
                    name: HawkularMetrics.globalMetricId + '.status.duration',
                    unit: 'MILLI_SECOND',
                    description: 'Response Time in ms.'
                }, {
                    name: HawkularMetrics.globalMetricId + '.status.code',
                    unit: 'NONE',
                    description: 'Status Code'
                }];
                _this.HawkularInventory.Metric.save({
                    tenantId: HawkularMetrics.globalTenantId,
                    resourceId: newResource.id
                }, metrics).$promise.then(function (newMetrics) {
                    toastr.info('Your data is being collected. Please be patient (should be about another minute).');
                    _this.$location.url('/metrics/responseTime');
                });
            });
        };
        AddUrlController.$inject = ['$location', '$scope', '$rootScope', '$log', 'HawkularInventory'];
        return AddUrlController;
    })();
    HawkularMetrics.AddUrlController = AddUrlController;
    HawkularMetrics._module.controller('HawkularMetrics.AddUrlController', AddUrlController);
})(HawkularMetrics || (HawkularMetrics = {}));

var HawkularMetrics;
(function (HawkularMetrics) {
    var QuickAlertController = (function () {
        function QuickAlertController($scope, HawkularAlert, $log, $q) {
            this.$scope = $scope;
            this.HawkularAlert = HawkularAlert;
            this.$log = $log;
            this.$q = $q;
            this.PROMISE_BREAK = 'magicValue1234';
            this.$scope.showQuickAlert = false;
            this.$scope.quickTrigger = {
                operator: 'LT',
                threshold: 0
            };
            this.allNotifiers();
            this.$log.debug('Notifiers: ' + this.$scope.notifiers);
        }
        QuickAlertController.prototype.toggleQuickAlert = function () {
            this.$scope.showQuickAlert = !this.$scope.showQuickAlert;
        };
        QuickAlertController.prototype.allNotifiers = function () {
            var _this = this;
            this.$scope.notifiers = [];
            this.HawkularAlert.Notifier.query(function (result) {
                _this.$scope.notifiers = result;
            }, function (error) {
                _this.errorToastr(error, 'Error loading Alerts Notifiers:');
            });
        };
        QuickAlertController.prototype.errorToastr = function (error, errorMsg) {
            var errorMsgComplete;
            if (error.data && error.data.errorMsg) {
                errorMsgComplete = error.data.errorMsg;
            }
            else {
                errorMsgComplete = errorMsg + ' ' + error;
            }
            this.$log.error(errorMsgComplete);
            toastr.error(errorMsgComplete);
        };
        QuickAlertController.prototype.errorHandler = function (error, msg) {
            if (error !== this.PROMISE_BREAK) {
                this.errorToastr(error, msg);
            }
            return this.$q.reject(this.PROMISE_BREAK);
        };
        QuickAlertController.prototype.saveQuickAlert = function () {
            var _this = this;
            if (HawkularMetrics.globalMetricId !== '.status.duration' && HawkularMetrics.globalMetricId !== '.status.code') {
                var newTrigger = {};
                newTrigger.id = HawkularMetrics.globalMetricId + 'ResponseTime' + '-' + this.$scope.quickTrigger.operator + '-' + this.$scope.quickTrigger.threshold;
                newTrigger.name = newTrigger.id;
                newTrigger.description = 'Created on ' + new Date();
                newTrigger.match = 'ALL';
                newTrigger.enabled = true;
                newTrigger.notifiers = this.$scope.quickTrigger.notifiers;
                var newDampening = {
                    triggerId: newTrigger.id,
                    type: 'RELAXED_COUNT',
                    evalTrueSetting: 1,
                    evalTotalSetting: 1,
                    evalTimeSetting: 0
                };
                this.HawkularAlert.Trigger.save(newTrigger).$promise.then(function (trigger) {
                    _this.$log.debug('Success Trigger save');
                    newDampening.triggerId = trigger.id;
                    return _this.HawkularAlert.Dampening.save(newDampening).$promise;
                }, function (error) {
                    return _this.errorHandler(error, 'Error saving Trigger');
                }).then(function (dampening) {
                    _this.$log.debug('Success Dampening save', dampening);
                    var newThresholdCondition = {
                        triggerId: dampening.triggerId,
                        dataId: HawkularMetrics.globalMetricId,
                        conditionSetSize: 1,
                        conditionSetIndex: 1,
                        operator: _this.$scope.quickTrigger.operator,
                        threshold: _this.$scope.quickTrigger.threshold
                    };
                    return _this.HawkularAlert.ThresholdCondition.save(newThresholdCondition).$promise;
                }, function (errorDampening) {
                    return _this.errorHandler(errorDampening, 'Error saving Trigger');
                }).then(function () {
                    _this.$log.debug('Success ThresholdCondition save');
                    _this.$log.debug('Alert Created!');
                    toastr.success('Alert Created!');
                    _this.toggleQuickAlert();
                    return _this.HawkularAlert.Alert.reload().$promise;
                }, function (errorCondition) {
                    return _this.errorHandler(errorCondition, 'Error saving Trigger Condition');
                }).then(angular.noop, function (errorReload) {
                    return _this.errorHandler(errorReload, 'Error reloading Alerts');
                }).catch(function (error) {
                    _this.errorHandler(error, 'Error:');
                });
            }
            else {
                this.$log.debug('No metric selected');
                toastr.warning('No metric selected');
            }
        };
        QuickAlertController.$inject = ['$scope', 'HawkularAlert', '$log', '$q'];
        return QuickAlertController;
    })();
    HawkularMetrics.QuickAlertController = QuickAlertController;
    HawkularMetrics._module.controller('QuickAlertController', QuickAlertController);
})(HawkularMetrics || (HawkularMetrics = {}));

var HawkularMetrics;
(function (HawkularMetrics) {
    var MetricsViewController = (function () {
        function MetricsViewController($scope, $rootScope, $interval, $log, HawkularMetric, HawkularInventory, startTimeStamp, endTimeStamp, dateRange) {
            var _this = this;
            this.$scope = $scope;
            this.$rootScope = $rootScope;
            this.$interval = $interval;
            this.$log = $log;
            this.HawkularMetric = HawkularMetric;
            this.HawkularInventory = HawkularInventory;
            this.startTimeStamp = startTimeStamp;
            this.endTimeStamp = endTimeStamp;
            this.dateRange = dateRange;
            this.bucketedDataPoints = [];
            this.contextDataPoints = [];
            this._resourceList = [];
            $scope.vm = this;
            this.startTimeStamp = moment().subtract(1, 'hours').toDate();
            this.endTimeStamp = new Date();
            this.dateRange = moment(this.startTimeStamp).format('H:mm') + ' - ' + moment(this.endTimeStamp).format('H:mm') + ' (' + moment(this.endTimeStamp).from(moment(this.startTimeStamp), true) + ')';
            $scope.$on('RefreshChart', function (event) {
                _this.refreshChartDataNow(_this.getMetricId());
            });
            $scope.$watch('vm.selectedResource', function (resource) {
                if (resource) {
                    HawkularMetrics.globalMetricId = resource.id;
                    _this.refreshChartDataNow(_this.getMetricId());
                }
                else {
                    HawkularMetrics.globalResourceList = _this.HawkularInventory.Resource.query({ tenantId: HawkularMetrics.globalTenantId }).$promise.then(function (resources) {
                        _this.resourceList = resources;
                        _this.selectedResource = _.last(resources);
                        _this.refreshChartDataNow(_this.getMetricId());
                    });
                }
            });
            this.onCreate();
        }
        Object.defineProperty(MetricsViewController.prototype, "resourceList", {
            get: function () {
                return this._resourceList;
            },
            set: function (newResourceList) {
                HawkularMetrics.globalResourceList = newResourceList;
                this._resourceList = newResourceList;
            },
            enumerable: true,
            configurable: true
        });
        MetricsViewController.prototype.onCreate = function () {
            var _this = this;
            this.autoRefresh(60);
            this.HawkularInventory.Resource.query({ tenantId: HawkularMetrics.globalTenantId }, function (aResourceList) {
                _this.resourceList = aResourceList;
                _this.selectedResource = _.last(_this._resourceList);
                _this.refreshChartDataNow(_this.getMetricId());
            });
        };
        MetricsViewController.prototype.cancelAutoRefresh = function () {
            this.$interval.cancel(this.autoRefreshPromise);
            toastr.info('Canceling Auto Refresh');
        };
        MetricsViewController.prototype.autoRefresh = function (intervalInSeconds) {
            var _this = this;
            this.refreshHistoricalChartDataForTimestamp(this.getMetricId());
            this.autoRefreshPromise = this.$interval(function () {
                _this.endTimeStamp = new Date();
                _this.refreshHistoricalChartDataForTimestamp(_this.getMetricId());
            }, intervalInSeconds * 1000);
            this.$scope.$on('$destroy', function () {
                _this.$interval.cancel(_this.autoRefreshPromise);
            });
        };
        MetricsViewController.prototype.noDataFoundForId = function (id) {
            this.$log.warn('No Data found for id: ' + id);
        };
        MetricsViewController.prototype.refreshChartDataNow = function (metricId, startTime) {
            var adjStartTimeStamp = moment().subtract('hours', 1).toDate();
            this.endTimeStamp = new Date();
            this.refreshHistoricalChartData(metricId, angular.isUndefined(startTime) ? adjStartTimeStamp : startTime, this.endTimeStamp);
        };
        MetricsViewController.prototype.refreshHistoricalChartData = function (metricId, startDate, endDate) {
            this.refreshHistoricalChartDataForTimestamp(metricId, startDate.getTime(), endDate.getTime());
        };
        MetricsViewController.prototype.getMetricId = function () {
            return MetricsViewController.getResourceDurationMetricId();
        };
        MetricsViewController.getResourceDurationMetricId = function () {
            return HawkularMetrics.globalMetricId + '.status.duration';
        };
        MetricsViewController.getResourceCodeMetricId = function () {
            return HawkularMetrics.globalMetricId + '.status.code';
        };
        MetricsViewController.prototype.refreshHistoricalChartDataForTimestamp = function (metricId, startTime, endTime) {
            var _this = this;
            if (!endTime) {
                endTime = this.endTimeStamp.getTime();
            }
            if (!startTime) {
                startTime = this.startTimeStamp.getTime();
            }
            if (metricId) {
                this.HawkularMetric.NumericMetricData.queryMetrics({
                    tenantId: HawkularMetrics.globalTenantId,
                    numericId: metricId,
                    start: startTime,
                    end: endTime,
                    buckets: 60
                }).$promise.then(function (response) {
                    _this.bucketedDataPoints = _this.formatBucketedChartOutput(response);
                    console.dir(_this.bucketedDataPoints);
                    if (_this.bucketedDataPoints.length) {
                        _this.chartData = {
                            id: metricId,
                            startTimeStamp: _this.startTimeStamp,
                            endTimeStamp: _this.endTimeStamp,
                            dataPoints: _this.bucketedDataPoints,
                            contextDataPoints: _this.contextDataPoints,
                            annotationDataPoints: []
                        };
                    }
                    else {
                        _this.noDataFoundForId(_this.getMetricId());
                    }
                }, function (error) {
                    _this.$log.error('Error Loading Chart data');
                    toastr.error('Error Loading Chart Data: ' + error);
                });
            }
        };
        MetricsViewController.prototype.formatBucketedChartOutput = function (response) {
            return _.map(response.data, function (point) {
                return {
                    timestamp: point.timestamp,
                    date: new Date(point.timestamp),
                    value: !angular.isNumber(point.value) ? 0 : point.value,
                    avg: (point.empty) ? 0 : point.avg,
                    min: !angular.isNumber(point.min) ? 0 : point.min,
                    max: !angular.isNumber(point.max) ? 0 : point.max,
                    empty: point.empty
                };
            });
        };
        MetricsViewController.$inject = ['$scope', '$rootScope', '$interval', '$log', 'HawkularMetric', 'HawkularInventory'];
        return MetricsViewController;
    })();
    HawkularMetrics.MetricsViewController = MetricsViewController;
    HawkularMetrics._module.controller('MetricsViewController', MetricsViewController);
})(HawkularMetrics || (HawkularMetrics = {}));

var HawkularMetrics;
(function (HawkularMetrics) {
    HawkularMetrics.OverviewController = HawkularMetrics._module.controller("HawkularMetrics.OverviewController", ['$scope', function ($scope) {
        $scope.overview = "Over View";
    }]);
})(HawkularMetrics || (HawkularMetrics = {}));

//# sourceMappingURL=data:application/json;base64,
angular.module("hawkular-ui-components-metrics-templates", []).run(["$templateCache", function($templateCache) {$templateCache.put("plugins/metrics/html/add-url.html","<div class=\"pg-insert-url\" ng-controller=\"HawkularMetrics.AddUrlController as vm\">\n  <div class=\"container\">\n    <h1>Welcome!</h1>\n\n    <h2>Collect metrics from a website that you want to monitor.</h2>\n\n    <form class=\"form-horizontal\" name=\"addUrlForm\" role=\"form\" novalidate ng-submit=\"vm.addUrl(vm.resourceUrl)\">\n      <div class=\"form-group input\">\n        <div class=\"col-lg-6 col-sm-8 col-xs-12 align-center\">\n          <div class=\"input-group input-group-lg\">\n            <input type=\"url\" class=\"form-control input-lg\" name=\"resourceUrl\" ng-model=\"vm.resourceUrl\"\n                   ng-model-options=\"{ updateOn: \'default blur\'}\"\n                   placeholder=\"Enter a website URL (e.g., http://mysite.com/home)\" required>\n            <span class=\"help-block\"\n                  ng-show=\"addUrlForm.resourceUrl.$dirty && addUrlForm.resourceUrl.$invalid\">The URL you entered is not valid. Please enter a valid URL.</span>\n              <span class=\"input-group-btn\">\n                   <button class=\"btn btn-primary btn-lg\" type=\"submit\" ng-disabled=\"addUrlForm.$invalid\">\n                   Get Metrics\n                   </button>\n              </span>\n          </div>\n        </div>\n      </div>\n      <div class=\"form-group loading hide\">\n        <div class=\"spinner spinner-lg\"></div>\n        <button type=\"button\" class=\"btn btn-link\">Cancel</button>\n      </div>\n    </form>\n  </div>\n</div>\n");
$templateCache.put("plugins/metrics/html/alerts.html","<div class=\"row\" >\n  <div class=\"col-md-12\">\n    <h1>Alerts</h1>\n  </div>\n</div>\n");
$templateCache.put("plugins/metrics/html/create-alert-form.html","<div ng-controller=\"QuickAlertController as qac\" ng-show=\"vm.chartData.dataPoints.length > 1\">\n  <div ng-show=\"!showQuickAlert\" class=\"col-sm-9 col-md-10 content\">\n    <button class=\"btn btn-primary pull-left\" ng-click=\"qac.toggleQuickAlert()\">Add an Alert</button>\n  </div>\n  <div ng-show=\"showQuickAlert\" class=\"col-sm-9 col-md-10 content\">\n    <h1>Add an Alert</h1>\n\n    <form class=\"form-horizontal\" name=\"addQuickAlertForm\" role=\"form\">\n      <div class=\"form-group\">\n        <label class=\"col-md-4 control-label\">\n          Fire when metric is\n        </label>\n\n        <div id=\"alert-radio-container\" class=\"col-md-4\">\n          <label class=\"radio-inline\">\n            <input type=\"radio\" ng-model=\"quickTrigger.operator\" class=\"radio\" value=\"LT\"> <\n          </label>\n          <label class=\"radio-inline\">\n            <input type=\"radio\" ng-model=\"quickTrigger.operator\" class=\"radio\" value=\"GT\"> >\n          </label>\n          <label class=\"radio-inline\">\n            <input type=\"radio\" ng-model=\"quickTrigger.operator\" class=\"radio\" value=\"LTE\"> <=\n          </label>\n          <label class=\"radio-inline\">\n            <input type=\"radio\" ng-model=\"quickTrigger.operator\" class=\"radio\" value=\"GTE\"> >=\n          </label>\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <label class=\"col-md-4 control-label\" for=\"threshold\">\n          Of threshold\n        </label>\n\n        <div class=\"col-md-2\">\n          <input type=\"number\" id=\"threshold\" ng-model=\"quickTrigger.threshold\" class=\"form-control\"\n                 ng-minlength=\"1\" required>\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <label class=\"col-md-4 control-label\" for=\"notifiers\">\n          Notify to:\n        </label>\n\n        <div class=\"col-md-3\">\n          <ui-select id=\"notifiers\" multiple ng-model=\"quickTrigger.notifiers\" theme=\"bootstrap\"\n                     ng-disabled=\"disabled\" close-on-select=\"false\">\n            <ui-select-match placeholder=\"Select notifier...\">{{$item}}</ui-select-match>\n            <ui-select-choices repeat=\"notifier in notifiers | filter:$select.search\">\n              {{ notifier }}\n            </ui-select-choices>\n          </ui-select>\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <div class=\"col-md-offset-4 col-md-6\">\n          <button class=\"btn btn-primary\" ng-click=\"qac.saveQuickAlert()\">Create Alert</button>\n          <button type=\"button\" class=\"btn btn-default\" ng-click=\"qac.toggleQuickAlert()\">Cancel</button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>\n");
$templateCache.put("plugins/metrics/html/home.html","<div class=\"row\" ng-controller=\"HawkularMetrics.OverviewController as vm\">\n  <div class=\"col-md-12\">\n    <h1>Home Page (when url exists)</h1>\n  </div>\n</div>\n");
$templateCache.put("plugins/metrics/html/response-time.html","<div ng-controller=\"MetricsViewController as vm\">\n\n  <div class=\"col-sm-9 col-md-10 content\">\n\n    <div class=\"well\" id=\"control-bar\">\n            <span class=\"col-md-3 col-sm-4 select-url-container\">\n                <select class=\"form-control input-sm select-url\" ng-model=\"vm.selectedResource\"\n                        ng-options=\"rs.parameters.url for rs in vm.resourceList\"></select>\n            </span>\n            <span id=\"date-range-container\" class=\"col-md-3 col-sm-2 pull-right\">\n                <span id=\"date-range\" class=\"input-group input-group-sm\">\n                    <input type=\"text\" class=\"form-control input-sm\" value=\"{{vm.dateRange}}\" readonly>\n                </span>\n            </span>\n    </div>\n\n    <div class=\"col-sm-9 col-md-10 content response-time\">\n      <h1>Response Time</h1>\n\n      <div class=\"panel panel-default graph-summary\">\n        <div class=\"row\">\n          <div class=\"col-md-4 summary-item\">\n            <span class=\"data\">879 <span>ms</span></span>\n            <span class=\"item\">Average</span>\n          </div>\n          <div class=\"col-md-4 summary-item\">\n            <span class=\"data\">2345 <span>ms</span></span>\n            <span class=\"item\">Median</span>\n          </div>\n          <div class=\"col-md-4 summary-item\">\n            <span class=\"data\">2786 <span>ms</span></span>\n            <span class=\"item\">95th percentile</span>\n          </div>\n        </div>\n      </div>\n\n\n      <div class=\"panel panel-default graph\">\n        <div class=\"legend pull-left\" ng-show=\"vm.chartData.dataPoints.length > 0\">\n          <span><i class=\"fa fa-circle primary\"></i>Response Time</span>\n          <span><i class=\"fa fa-circle danger\"></i>Response Time (above the threshold)</span>\n        </div>\n        <div class=\"update pull-right\" ng-show=\"vm.chartData.dataPoints.length > 0\" >\n          <i class=\"fa fa-clock-o\"></i><a ng-click=\"vm.refreshChartDataNow(vm.getMetricId())\"><strong>Last\n          update</strong> 1 minutes ago</a>\n        </div>\n\n        <p class=\"label label-info waiting-label\" ng-hide=\"vm.chartData.dataPoints.length > 0\" >We are\n          collecting your initial data. Please be patient(could be up to a minute)...</p>\n\n\n        <div id=\"metrics-chart\">\n          <!-- HINT: colors for the chart can be changed in the hawkular-charts.css -->\n          <hawkular-chart\n            data=\"{{vm.chartData.dataPoints}}\"\n            chart-type=\"hawkulararea\"\n            alert-value=\"500\"\n            hide-high-low-values=\"true\"\n            y-axis-units=\"Response Time (ms)\"\n            chart-height=\"250\">\n          </hawkular-chart>\n        </div>\n      </div>\n\n\n    </div>\n\n\n  </div>\n\n</div>\n\n\n");
$templateCache.put("plugins/metrics/html/up-downtime.html","<div class=\"row\" ng-controller=\"HawkularMetrics.OverviewController as vm\">\n  <div class=\"col-md-12\">\n    <h1>Availability</h1>\n  </div>\n</div>\n");}]); hawtioPluginLoader.addModule("hawkular-ui-components-metrics-templates");