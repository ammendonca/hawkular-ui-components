/// Copyright 2014-2015 Red Hat, Inc. and/or its affiliates
/// and other contributors as indicated by the @author tags.
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///   http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
if (typeof HawkularComponentsVersions !== 'undefined') { HawkularComponentsVersions.push({name:'directives', version:'4a36992 Merge pull request #98 from jpkrohling/JPK-FixAccountSwitcher'})} else {HawkularComponentsVersions = [{name:'directives', version:'4a36992 Merge pull request #98 from jpkrohling/JPK-FixAccountSwitcher'}]};


var Sidebar;
(function (Sidebar) {
    Sidebar.pluginName = "sidebar";
    Sidebar.log = Logger.get(Sidebar.pluginName);
    Sidebar.templatePath = "plugins/sidebar/html/sidebar.html";
})(Sidebar || (Sidebar = {}));

var Sidebar;
(function (Sidebar) {
    Sidebar._module = angular.module(Sidebar.pluginName, ['duScroll']);
    Sidebar._module.directive('hawkularSidebar', function () {
        return new Sidebar.SidebarDirective();
    });
    hawtioPluginLoader.addModule(Sidebar.pluginName);
})(Sidebar || (Sidebar = {}));

var Sidebar;
(function (Sidebar) {
    var log = Logger.get("Sidebar");
    var SidebarDirective = (function () {
        function SidebarDirective() {
            this.restrict = 'E';
            this.transclude = false;
            this.replace = false;
            this.templateUrl = Sidebar.templatePath;
        }
        return SidebarDirective;
    })();
    Sidebar.SidebarDirective = SidebarDirective;
    Sidebar.SidebarController = Sidebar._module.controller("Sidebar.SidebarController", ['$scope', '$rootScope', '$location', function ($scope, $rootScope, $location) {
        $scope.isSinglePage = function () {
            return $location.path().indexOf('/metrics') !== 0;
        };
        $scope.getClass = function (path) {
            return $location.path().indexOf(path) === 0 ? 'active' : '';
        };
    }]);
})(Sidebar || (Sidebar = {}));

var Topbar;
(function (Topbar) {
    Topbar.pluginName = "topbar";
    Topbar.log = Logger.get(Topbar.pluginName);
    Topbar.templatePath = "plugins/topbar/html/topbar.html";
    Topbar.globalTenantId = "test";
    Topbar.globalEnvironmentId = "test";
})(Topbar || (Topbar = {}));

var Topbar;
(function (Topbar) {
    Topbar._module = angular.module(Topbar.pluginName, ['ngResource', 'hawkular.services', 'ui.bootstrap']);
    Topbar._module.directive('hawkularTopbar', function () {
        return new Topbar.TopbarDirective();
    });
    hawtioPluginLoader.addModule(Topbar.pluginName);
})(Topbar || (Topbar = {}));

var Topbar;
(function (Topbar) {
    var log = Logger.get("Topbar");
    var TopbarDirective = (function () {
        function TopbarDirective() {
            this.restrict = 'E';
            this.transclude = false;
            this.replace = false;
            this.templateUrl = Topbar.templatePath;
        }
        return TopbarDirective;
    })();
    Topbar.TopbarDirective = TopbarDirective;
    Topbar.TopbarController = Topbar._module.controller("Topbar.TopbarController", ['$scope', '$rootScope', '$location', '$route', '$routeParams', 'HawkularNav', 'HawkularInventory', function ($scope, $rootScope, $location, $route, $routeParams, HawkularNav, HawkularInventory) {
        $scope.rangeNames = {
            '3600000': 'Last Hour',
            '43200000': 'Last 12 Hours',
            '86400000': 'Last Day',
            '604800000': 'Last Week',
            '2592000000': 'Last Month',
            '31536000000': 'Last Year'
        };
        $scope.getFormattedDate = function () {
            var diff = $scope.hkParams.timeOffset;
            $scope.offsetName = $scope.rangeNames[$scope.hkParams.timeOffset] || 'Custom';
            var momStart = moment().subtract($scope.hkParams.timeOffset, 'milliseconds');
            var momEnd = moment();
            if (diff < 24 * 60 * 60 * 1000) {
                return momStart.format('D MMM YYYY') + ' ' + momStart.format('HH:mm') + ' - ' + (momStart.day() !== momEnd.day() ? momEnd.format('D MMM YYYY ') : '') + momEnd.format('HH:mm');
            }
            else {
                return momStart.format('D MMM YYYY') + ' - ' + momEnd.format('D MMM YYYY');
            }
        };
        $scope.setRange = function (range) {
            HawkularNav.setTimestamp(moment.duration(range).valueOf());
        };
        $scope.$watch(function () {
            return $location.path();
        }, function (value) {
            $rootScope.hideSidebar = ($location.path().indexOf('/metrics/add-url') === 0);
        });
        $scope.setSelection = function (resourceId) {
            $route.updateParams({ resourceId: resourceId.id });
        };
    }]);
})(Topbar || (Topbar = {}));

var Topbar;
(function (Topbar) {
    var HawkularNav = (function () {
        function HawkularNav($rootScope, $route, $routeParams, HawkularInventory) {
            this.$rootScope = $rootScope;
            this.$route = $route;
            this.$routeParams = $routeParams;
            this.HawkularInventory = HawkularInventory;
            $rootScope.hkParams = $routeParams || [];
            var defaultOffset = 1 * 60 * 60 * 1000;
            HawkularInventory.Resource.query({ tenantId: Topbar.globalTenantId, environmentId: Topbar.globalEnvironmentId }, function (resourceList) {
                $rootScope.hkResources = resourceList;
                for (var i = 0; i < resourceList.length; i++) {
                    if (resourceList[i].id === $rootScope.hkParams.resourceId) {
                        $rootScope.selectedResource = resourceList[i];
                    }
                }
            });
            $rootScope.hkParams.timeOffset = $routeParams.timeOffset || defaultOffset;
            $rootScope.hkEndTimestamp = $routeParams.endTimestamp || moment().valueOf();
            $rootScope.hkStartTimestamp = moment().subtract($rootScope.hkParams.timeOffset, 'milliseconds').valueOf();
            $rootScope.$on('$routeChangeSuccess', function (event, current, previous) {
                $rootScope.hkParams = current.params;
                $rootScope.hkParams.timeOffset = $routeParams.timeOffset || defaultOffset;
                $rootScope.hkEndTimestamp = $routeParams.endTimestamp || moment().valueOf();
                $rootScope.hkStartTimestamp = moment().subtract($rootScope.hkParams.timeOffset, 'milliseconds').valueOf();
                HawkularInventory.Resource.query({ tenantId: Topbar.globalTenantId, environmentId: Topbar.globalEnvironmentId }, function (resourceList) {
                    $rootScope.hkResources = resourceList;
                    for (var i = 0; i < resourceList.length; i++) {
                        if (resourceList[i].id === $rootScope.hkParams.resourceId) {
                            $rootScope.selectedResource = resourceList[i];
                        }
                    }
                });
            }, this);
        }
        HawkularNav.prototype.setTimestamp = function (offset, end) {
            this.$route.updateParams({ timeOffset: offset, endTime: end });
        };
        HawkularNav.$inject = ['$rootScope', '$route', '$routeParams', 'HawkularInventory'];
        return HawkularNav;
    })();
    Topbar.HawkularNav = HawkularNav;
    Topbar._module.service('HawkularNav', HawkularNav);
})(Topbar || (Topbar = {}));

angular.module("hawkular-ui-components-directives-templates", []).run(["$templateCache", function($templateCache) {$templateCache.put("plugins/sidebar/html/sidebar.html","<div class=\"col-sm-3 col-md-2 sidebar-pf sidebar-pf-left sidebar-pf-dark sidebar-pf-big-icons sidebar-pf-fixed\">\n  <nav>\n    <ul class=\"nav nav-pills nav-stacked nav-dark nav-big-icons\" ng-hide=\"isSinglePage()\">\n      <li ng-class=\"getClass(\'/metrics/availability\')\"><a ng-href=\"/metrics/availability/{{hkParams.resourceId}}/{{hkParams.timeOffset}}/{{hkEndTimestamp}}\"><i class=\"fa fa-arrow-up\"></i>Availability</a></li>\n      <li ng-class=\"getClass(\'/metrics/response-time\')\"><a ng-href=\"/metrics/response-time/{{hkParams.resourceId}}/{{hkParams.timeOffset}}/{{hkEndTimestamp}}\"><i class=\"fa fa-line-chart\"></i>Response Time</a></li>\n      <li ng-class=\"getClass(\'/metrics/alerts\')\"><a ng-href=\"/metrics/alerts/{{hkParams.resourceId}}/{{hkParams.timeOffset}}/{{hkEndTimestamp}}\"><i class=\"fa fa-flag\"></i>Alerts</a></li>\n    </ul>\n    <ul class=\"nav nav-pills nav-stacked nav-dark nav-big-icons\" du-spy-context  ng-show=\"isSinglePage()\">\n      <li du-scrollspy=\"secav\" offset=\"135\" class=\"active\"><a href=\"#secav\" du-smooth-scroll offset=\"135\"><i class=\"fa fa-arrow-up\"></i>Availability</a></li>\n      <li du-scrollspy=\"secrt\" offset=\"125\"><a href=\"#secrt\" du-smooth-scroll offset=\"125\"><i class=\"fa fa-line-chart\"></i>Response Time</a></li>\n      <li du-scrollspy=\"secal\" offset=\"125\"><a href=\"#secal\" du-smooth-scroll offset=\"125\"><i class=\"fa fa-flag\"></i>Alerts</a></li>\n    </ul>\n  </nav>\n</div>\n");
$templateCache.put("plugins/topbar/html/topbar.html","<ul class=\"nav navbar-nav navbar-primary navbar-selector navbar-dark row\">\n  <li class=\"col-sm-3 col-md-2\">\n    <a href=\"/metrics/add-url\">URLs List</a>\n  </li>\n  <li class=\"context dropdown\">\n    <a href=\"#\" class=\"additional-info\" dropdown-toggle ng-hide=\"resources.length === 0\">\n      {{selectedResource.properties.url}}\n      <b class=\"caret\"></b>\n    </a>\n    <ul class=\"dropdown-menu\" role=\"menu\">\n      <li ng-class=\"{\'active\': hkParams.resourceId === resource.id}\" ng-repeat=\"resource in hkResources | orderBy:\'properties.url\'\">\n        <a href=\"\" ng-click=\"setSelection(resource)\">{{resource.properties.url}}</a>\n      </li>\n      <li class=\"divider\"></li>\n      <li>\n        <a href=\"/metrics/add-url\">Add Application...</a>\n      </li>\n    </ul>\n  </li>\n  <li class=\"pull-right date-range dropdown\">\n    <i class=\"fa fa-calendar\"></i>\n    <div class=\"input\" dropdown-toggle>\n      {{offsetName}} <span class=\"additional-info\">({{getFormattedDate()}})</span>\n    </div>\n\n    <div class=\"dropdown-menu infotip bottom-right\">\n      <div class=\"arrow\"></div>\n      <div class=\"dropdown-menu-content\">\n        <span class=\"label\">Last</span>\n        <div class=\"btn-group\">\n          <button type=\"button\" class=\"btn btn-default\" ng-class=\"{\'active\': offsetName === \'Last Hour\'}\" ng-click=\"setRange({hour: 1})\">1h</button>\n          <button type=\"button\" class=\"btn btn-default\" ng-class=\"{\'active\': offsetName === \'Last 12 Hours\'}\" ng-click=\"setRange({hours: 12})\">12h</button>\n          <button type=\"button\" class=\"btn btn-default\" ng-class=\"{\'active\': offsetName === \'Last Day\'}\" ng-click=\"setRange({day: 1})\">Day</button>\n          <button type=\"button\" class=\"btn btn-default\" ng-class=\"{\'active\': offsetName === \'Last Week\'}\" ng-click=\"setRange({week: 1})\">Week</button>\n          <button type=\"button\" class=\"btn btn-default\" ng-class=\"{\'active\': offsetName === \'Last Month\'}\" ng-click=\"setRange({month: 1})\">Month</button>\n          <button type=\"button\" class=\"btn btn-default\" ng-class=\"{\'active\': offsetName === \'Last Year\'}\" ng-click=\"setRange({year: 1})\">Year</button>\n        </div>\n      </div>\n    </div>\n  </li>\n</ul>\n");}]); hawtioPluginLoader.addModule("hawkular-ui-components-directives-templates");
//# sourceMappingURL=data:application/json;base64,