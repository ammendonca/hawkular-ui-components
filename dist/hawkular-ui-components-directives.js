/// Copyright 2014-2015 Red Hat, Inc. and/or its affiliates
/// and other contributors as indicated by the @author tags.
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///   http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
if (typeof HawkularComponentsVersions !== 'undefined') { HawkularComponentsVersions.push({name:'directives', version:'d887171 second chunk'})} else {HawkularComponentsVersions = [{name:'directives', version:'d887171 second chunk'}]};


var Sidebar;
(function (Sidebar) {
    Sidebar.pluginName = "sidebar";
    Sidebar.log = Logger.get(Sidebar.pluginName);
    Sidebar.templatePath = "plugins/sidebar/html/sidebar.html";
    Sidebar.globalEnvironmentId = "test";
})(Sidebar || (Sidebar = {}));

var Sidebar;
(function (Sidebar) {
    Sidebar._module = angular.module(Sidebar.pluginName, ['duScroll']);
    Sidebar._module.directive('hawkularSidebar', function () {
        return new Sidebar.SidebarDirective();
    });
    hawtioPluginLoader.addModule(Sidebar.pluginName);
})(Sidebar || (Sidebar = {}));

var Sidebar;
(function (Sidebar) {
    var log = Logger.get("Sidebar");
    var SidebarDirective = (function () {
        function SidebarDirective() {
            this.restrict = 'E';
            this.transclude = true;
            this.replace = false;
            this.templateUrl = Sidebar.templatePath;
        }
        return SidebarDirective;
    })();
    Sidebar.SidebarDirective = SidebarDirective;
    Sidebar.SidebarController = Sidebar._module.controller("Sidebar.SidebarController", ['$scope', '$rootScope', '$location', 'HawkularNav', 'HawkularInventory', function ($scope, $rootScope, $location, HawkularNav, HawkularInventory) {
        $scope.isSinglePage = function () {
            return $location.path().indexOf('/metrics') !== 0;
        };
        $scope.isAppServerPage = function () {
            return $location.path().indexOf('/hawkular-ui/app/') === 0;
        };
        $scope.getClass = function (path) {
            return $location.path().indexOf(path) === 0 ? 'active' : '';
        };
        $scope.rangeNames = {
            '3600000': 'Last Hour',
            '43200000': 'Last 12 Hours',
            '86400000': 'Last Day',
            '604800000': 'Last Week',
            '2592000000': 'Last Month',
            '31536000000': 'Last Year'
        };
        $scope.getFormattedDate = function () {
            var diff = $scope.hkParams.timeOffset;
            $scope.offsetName = $scope.rangeNames[$scope.hkParams.timeOffset] || 'Custom';
            var momStart = moment().subtract($scope.hkParams.timeOffset, 'milliseconds');
            var momEnd = moment();
            if (diff < 24 * 60 * 60 * 1000) {
                return momStart.format('D MMM YYYY') + ' ' + momStart.format('HH:mm') + ' - ' + (momStart.day() !== momEnd.day() ? momEnd.format('D MMM YYYY ') : '') + momEnd.format('HH:mm');
            }
            else {
                return momStart.format('D MMM YYYY') + ' - ' + momEnd.format('D MMM YYYY');
            }
        };
        $scope.setRange = function (range) {
            HawkularNav.setTimestamp(moment.duration(range).valueOf());
        };
        $scope.getUrlFromId = function (id) {
            if (!$scope.resource) {
                $scope.resource = HawkularInventory.Resource.get({ tenantId: $rootScope.currentPersona.id, environmentId: Sidebar.globalEnvironmentId, resourceId: id }, function (data) {
                    $scope.resourceName = data.properties.url;
                });
            }
            return $scope.resource;
        };
        $scope.getAppServerFromId = function (id) {
            switch (id) {
                case "f5087d5d26aeff90cc92c738a10d8bba":
                    $scope.resourceName = 'Eavy Machine';
                    break;
                case "5c4785a7a304d32e5f404242666895f5":
                    $scope.resourceName = 'Tori Machine';
                    break;
                case "21193e7941642baa1285cd7edd8af62e":
                    $scope.resourceName = 'Wiko Machine';
                    break;
                case "20a0e9f5d777a16ad40928dd3ba1bef9":
                    $scope.resourceName = 'Tomy Machine';
                    break;
            }
        };
    }]);
})(Sidebar || (Sidebar = {}));

var Topbar;
(function (Topbar) {
    Topbar.pluginName = "topbar";
    Topbar.log = Logger.get(Topbar.pluginName);
    Topbar.templatePath = "plugins/topbar/html/topbar.html";
    Topbar.globalEnvironmentId = "test";
})(Topbar || (Topbar = {}));

var Topbar;
(function (Topbar) {
    Topbar._module = angular.module(Topbar.pluginName, ['ngResource', 'hawkular.services', 'ui.bootstrap']);
    Topbar._module.directive('hawkularTopbar', function () {
        return new Topbar.TopbarDirective();
    });
    hawtioPluginLoader.addModule(Topbar.pluginName);
})(Topbar || (Topbar = {}));

var Topbar;
(function (Topbar) {
    var log = Logger.get("Topbar");
    var TopbarDirective = (function () {
        function TopbarDirective() {
            this.restrict = 'E';
            this.transclude = false;
            this.replace = false;
            this.templateUrl = Topbar.templatePath;
        }
        return TopbarDirective;
    })();
    Topbar.TopbarDirective = TopbarDirective;
    Topbar.TopbarController = Topbar._module.controller("Topbar.TopbarController", ['$scope', '$rootScope', '$location', '$route', '$routeParams', 'HawkularNav', 'HawkularInventory', function ($scope, $rootScope, $location, $route, $routeParams, HawkularNav, HawkularInventory) {
        $scope.getClass = function (path) {
            return $location.path().indexOf(path) === 0 ? 'active' : '';
        };
    }]);
})(Topbar || (Topbar = {}));

var Topbar;
(function (Topbar) {
    var HawkularNav = (function () {
        function HawkularNav($rootScope, $route, $routeParams, $interval, HawkularInventory) {
            var _this = this;
            this.$rootScope = $rootScope;
            this.$route = $route;
            this.$routeParams = $routeParams;
            this.$interval = $interval;
            this.HawkularInventory = HawkularInventory;
            $rootScope.hkParams = $routeParams || [];
            var defaultOffset = 1 * 60 * 60 * 1000;
            var init = function (tenantId) {
                HawkularInventory.Resource.query({ tenantId: tenantId, environmentId: Topbar.globalEnvironmentId }, function (resourceList) {
                    $rootScope.hkResources = resourceList;
                    for (var i = 0; i < resourceList.length; i++) {
                        if (resourceList[i].id === $rootScope.hkParams.resourceId) {
                            $rootScope.selectedResource = resourceList[i];
                        }
                    }
                });
                $rootScope.hkParams.timeOffset = $routeParams.timeOffset || defaultOffset;
                $rootScope.hkEndTimestamp = $routeParams.endTimestamp || moment().valueOf();
                $rootScope.hkStartTimestamp = moment().subtract($rootScope.hkParams.timeOffset, 'milliseconds').valueOf();
                $rootScope.$on('$routeChangeSuccess', function (event, current, previous) {
                    $rootScope.hkParams = current.params;
                    $rootScope.hkParams.timeOffset = $routeParams.timeOffset || defaultOffset;
                    $rootScope.hkEndTimestamp = $routeParams.endTimestamp || moment().valueOf();
                    $rootScope.hkStartTimestamp = moment().subtract($rootScope.hkParams.timeOffset, 'milliseconds').valueOf();
                    HawkularInventory.Resource.query({ tenantId: tenantId, environmentId: Topbar.globalEnvironmentId }, function (resourceList) {
                        $rootScope.hkResources = resourceList;
                        for (var i = 0; i < resourceList.length; i++) {
                            if (resourceList[i].id === $rootScope.hkParams.resourceId) {
                                $rootScope.selectedResource = resourceList[i];
                            }
                        }
                    });
                }, _this);
            };
            var initPromise;
            var tenantId = this.$rootScope.currentPersona && this.$rootScope.currentPersona.id;
            if (tenantId) {
                init(tenantId);
            }
            else {
                initPromise = this.$interval(function () {
                    init(_this.$rootScope.currentPersona && _this.$rootScope.currentPersona.id);
                }, 1000);
                $rootScope.$on('$destroy', function () {
                    _this.$interval.cancel(initPromise);
                });
            }
        }
        HawkularNav.prototype.setTimestamp = function (offset, end) {
            this.$route.updateParams({ timeOffset: offset, endTime: end });
        };
        HawkularNav.$inject = ['$rootScope', '$route', '$routeParams', '$interval', 'HawkularInventory'];
        return HawkularNav;
    })();
    Topbar.HawkularNav = HawkularNav;
    Topbar._module.service('HawkularNav', HawkularNav);
})(Topbar || (Topbar = {}));

angular.module("hawkular-ui-components-directives-templates", []).run(["$templateCache", function($templateCache) {$templateCache.put("plugins/sidebar/html/sidebar.html","<!-- <div class=\"col-sm-3 col-md-2 sidebar-pf sidebar-pf-left sidebar-pf-dark sidebar-pf-big-icons sidebar-pf-fixed\">\n  <nav>\n    <ul class=\"nav nav-pills nav-stacked nav-dark nav-big-icons\" ng-hide=\"isSinglePage()\">\n      <li ng-class=\"getClass(\'/metrics/availability\')\"><a ng-href=\"/metrics/availability/{{hkParams.resourceId}}/{{hkParams.timeOffset}}/{{hkEndTimestamp}}\"><i class=\"fa fa-arrow-up\"></i>Availability</a></li>\n      <li ng-class=\"getClass(\'/metrics/response-time\')\"><a ng-href=\"/metrics/response-time/{{hkParams.resourceId}}/{{hkParams.timeOffset}}/{{hkEndTimestamp}}\"><i class=\"fa fa-line-chart\"></i>Response Time</a></li>\n      <li ng-class=\"getClass(\'/metrics/alerts\')\"><a ng-href=\"/metrics/alerts/{{hkParams.resourceId}}/{{hkParams.timeOffset}}/{{hkEndTimestamp}}\"><i class=\"fa fa-flag\"></i>Alerts</a></li>\n    </ul>\n    <ul class=\"nav nav-pills nav-stacked nav-dark nav-big-icons\" du-spy-context  ng-show=\"isSinglePage()\">\n      <li du-scrollspy=\"secav\" offset=\"135\" class=\"active\"><a href=\"#secav\" du-smooth-scroll offset=\"135\"><i class=\"fa fa-arrow-up\"></i>Availability</a></li>\n      <li du-scrollspy=\"secrt\" offset=\"125\"><a href=\"#secrt\" du-smooth-scroll offset=\"125\"><i class=\"fa fa-line-chart\"></i>Response Time</a></li>\n      <li du-scrollspy=\"secal\" offset=\"125\"><a href=\"#secal\" du-smooth-scroll offset=\"125\"><i class=\"fa fa-flag\"></i>Alerts</a></li>\n    </ul>\n  </nav>\n</div> -->\n\n<div class=\"screen-top-nav\">\n  <div>\n    <div class=\"row top-row\">\n      <div class=\"col-sm-4\">\n        <a ng-show=\"isAppServerPage()\" href=\"/hawkular-ui/app/app-list\" class=\"back\">« All Application Servers</a>\n        <a ng-hide=\"isAppServerPage()\" href=\"/hawkular-ui/url/url-list\" class=\"back\">« All URLs</a>\n      </div>\n      <div class=\"col-sm-4\">\n        <h1 ng-init=\"isAppServerPage() ? getAppServerFromId(hkParams.resourceId) : getUrlFromId(hkParams.resourceId)\">{{resourceName}}</h1>\n      </div>\n      <div class=\"col-sm-4\">\n        <div class=\"date-range dropdown\">\n          <i class=\"fa fa-calendar\"></i>\n          <div class=\"input\" dropdown-toggle>\n            {{offsetName}} <span class=\"additional-info\">({{getFormattedDate()}})</span>\n          </div>\n          <div class=\"dropdown-menu infotip bottom-right\">\n            <div class=\"arrow\"></div>\n            <div class=\"dropdown-menu-content\">\n              <span class=\"label\">Last</span>\n              <div class=\"btn-group\">\n                <button type=\"button\" class=\"btn btn-default\" ng-class=\"{\'active\': offsetName === \'Last Hour\'}\" ng-click=\"setRange({hour: 1})\">1h</button>\n                <button type=\"button\" class=\"btn btn-default\" ng-class=\"{\'active\': offsetName === \'Last 12 Hours\'}\" ng-click=\"setRange({hours: 12})\">12h</button>\n                <button type=\"button\" class=\"btn btn-default\" ng-class=\"{\'active\': offsetName === \'Last Day\'}\" ng-click=\"setRange({day: 1})\">Day</button>\n                <button type=\"button\" class=\"btn btn-default\" ng-class=\"{\'active\': offsetName === \'Last Week\'}\" ng-click=\"setRange({week: 1})\">Week</button>\n                <button type=\"button\" class=\"btn btn-default\" ng-class=\"{\'active\': offsetName === \'Last Month\'}\" ng-click=\"setRange({month: 1})\">Month</button>\n                <button type=\"button\" class=\"btn btn-default\" ng-class=\"{\'active\': offsetName === \'Last Year\'}\" ng-click=\"setRange({year: 1})\">Year</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div ng-transclude></div>\n  </div>\n</div>\n\n");
$templateCache.put("plugins/topbar/html/topbar.html","<ul class=\"nav navbar-nav navbar-primary\">\n  <li ng-class=\"getClass(\'/hawkular-ui/url/\')\">\n    <a href=\"/hawkular-ui/url/url-list\">URLs</a>\n  </li>\n  <li ng-class=\"getClass(\'/hawkular-ui/app/\')\">\n    <a href=\"/hawkular-ui/app/app-list\">Application Servers</a>\n  </li>\n</ul>\n");}]); hawtioPluginLoader.addModule("hawkular-ui-components-directives-templates");
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpY2VuY2UudHh0IiwiZGlyZWN0aXZlc3ZlcnNpb24uanMiLCIvc291cmNlL2luY2x1ZGVzLmpzIiwiL3NpZGViYXIvdHMvc2lkZWJhckdsb2JhbHMudHMiLCIvc2lkZWJhci90cy9zaWRlYmFyUGx1Z2luLnRzIiwiL3NpZGViYXIvdHMvc2lkZWJhckRpcmVjdGl2ZS50cyIsIi90b3BiYXIvdHMvdG9wYmFyR2xvYmFscy50cyIsIi90b3BiYXIvdHMvdG9wYmFyUGx1Z2luLnRzIiwiL3RvcGJhci90cy90b3BiYXJEaXJlY3RpdmUudHMiLCIvdG9wYmFyL3RzL3RvcGJhclNlcnZpY2VzLnRzIiwidGVtcGxhdGVzLmpzIl0sIm5hbWVzIjpbIlNpZGViYXIiLCJTaWRlYmFyLlNpZGViYXJEaXJlY3RpdmUiLCJTaWRlYmFyLlNpZGViYXJEaXJlY3RpdmUuY29uc3RydWN0b3IiLCJUb3BiYXIiLCJUb3BiYXIuVG9wYmFyRGlyZWN0aXZlIiwiVG9wYmFyLlRvcGJhckRpcmVjdGl2ZS5jb25zdHJ1Y3RvciIsIlRvcGJhci5IYXdrdWxhck5hdiIsIlRvcGJhci5IYXdrdWxhck5hdi5jb25zdHJ1Y3RvciIsIlRvcGJhci5IYXdrdWxhck5hdi5zZXRUaW1lc3RhbXAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNiQTtBQ0FBO0FBQ0E7QUNlQSxJQUFPLE9BQU8sQ0FTYjtBQVRELFdBQU8sT0FBTyxFQUFDLENBQUM7SUFFSEEsa0JBQVVBLEdBQUdBLFNBQVNBLENBQUNBO0lBRXZCQSxXQUFHQSxHQUFrQkEsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0Esa0JBQVVBLENBQUNBLENBQUNBO0lBRTVDQSxvQkFBWUEsR0FBR0EsbUNBQW1DQSxDQUFDQTtJQUVuREEsMkJBQW1CQSxHQUFHQSxNQUFNQSxDQUFDQTtBQUMxQ0EsQ0FBQ0EsRUFUTSxPQUFPLEtBQVAsT0FBTyxRQVNiOztBQ1BELElBQU8sT0FBTyxDQVNiO0FBVEQsV0FBTyxPQUFPLEVBQUMsQ0FBQztJQUVIQSxlQUFPQSxHQUFHQSxPQUFPQSxDQUFDQSxNQUFNQSxDQUFDQSxrQkFBVUEsRUFBRUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFFOURBLGVBQU9BLENBQUNBLFNBQVNBLENBQUNBLGlCQUFpQkEsRUFBRUE7UUFDbkMsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDeEMsQ0FBQyxDQUFDQSxDQUFDQTtJQUVIQSxrQkFBa0JBLENBQUNBLFNBQVNBLENBQUNBLGtCQUFVQSxDQUFDQSxDQUFDQTtBQUMzQ0EsQ0FBQ0EsRUFUTSxPQUFPLEtBQVAsT0FBTyxRQVNiOztBQ1hELElBQU8sT0FBTyxDQXVHYjtBQXZHRCxXQUFPLE9BQU8sRUFBQyxDQUFDO0lBRWRBLElBQUlBLEdBQUdBLEdBQWtCQSxNQUFNQSxDQUFDQSxHQUFHQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQTtJQUUvQ0EsSUFBYUEsZ0JBQWdCQTtRQUE3QkMsU0FBYUEsZ0JBQWdCQTtZQUVwQkMsYUFBUUEsR0FBR0EsR0FBR0EsQ0FBQ0E7WUFDZkEsZUFBVUEsR0FBR0EsSUFBSUEsQ0FBQ0E7WUFDbEJBLFlBQU9BLEdBQUdBLEtBQUtBLENBQUNBO1lBRWhCQSxnQkFBV0EsR0FBR0Esb0JBQVlBLENBQUNBO1FBQ3BDQSxDQUFDQTtRQUFERCx1QkFBQ0E7SUFBREEsQ0FQQUQsQUFPQ0MsSUFBQUQ7SUFQWUEsd0JBQWdCQSxHQUFoQkEsZ0JBT1pBLENBQUFBO0lBZ0JVQSx5QkFBaUJBLEdBQUdBLGVBQU9BLENBQUNBLFVBQVVBLENBQUNBLDJCQUEyQkEsRUFDekVBLENBQUNBLFFBQVFBLEVBQUVBLFlBQVlBLEVBQUVBLFdBQVdBLEVBQUVBLGFBQWFBLEVBQUVBLG1CQUFtQkEsRUFBRUEsVUFBQ0EsTUFBTUEsRUFBRUEsVUFBVUEsRUFBRUEsU0FBU0EsRUFBRUEsV0FBV0EsRUFBRUEsaUJBQWlCQTtRQUUxSUEsTUFBTUEsQ0FBQ0EsWUFBWUEsR0FBR0E7WUFDcEIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3BELENBQUMsQ0FBQ0E7UUFFRkEsTUFBTUEsQ0FBQ0EsZUFBZUEsR0FBR0E7WUFDdkIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDN0QsQ0FBQyxDQUFDQTtRQUVGQSxNQUFNQSxDQUFDQSxRQUFRQSxHQUFHQSxVQUFTQSxJQUFJQTtZQUM3QixNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsUUFBUSxHQUFHLEVBQUUsQ0FBQztRQUM5RCxDQUFDLENBQUNBO1FBRUZBLE1BQU1BLENBQUNBLFVBQVVBLEdBQUdBO1lBQ2xCQSxTQUFTQSxFQUFFQSxXQUFXQTtZQUN0QkEsVUFBVUEsRUFBRUEsZUFBZUE7WUFDM0JBLFVBQVVBLEVBQUVBLFVBQVVBO1lBQ3RCQSxXQUFXQSxFQUFFQSxXQUFXQTtZQUN4QkEsWUFBWUEsRUFBRUEsWUFBWUE7WUFDMUJBLGFBQWFBLEVBQUVBLFdBQVdBO1NBQzNCQSxDQUFDQTtRQUVGQSxNQUFNQSxDQUFDQSxnQkFBZ0JBLEdBQUdBO1lBQ3hCLElBQUksSUFBSSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDO1lBR3RDLE1BQU0sQ0FBQyxVQUFVLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFJLFFBQVEsQ0FBQztZQU05RSxJQUFJLFFBQVEsR0FBRyxNQUFNLEVBQUUsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsY0FBYyxDQUFDLENBQUM7WUFDN0UsSUFBSSxNQUFNLEdBQUcsTUFBTSxFQUFFLENBQUM7WUFFdEIsRUFBRSxDQUFDLENBQUMsSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQy9CLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxHQUFHLEdBQUcsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEtBQUssR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsS0FBSyxNQUFNLENBQUMsR0FBRyxFQUFFLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsR0FBSSxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ2xMLENBQUM7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDTixNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsR0FBRyxLQUFLLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUM3RSxDQUFDO1FBQ0gsQ0FBQyxDQUFDQTtRQUVGQSxNQUFNQSxDQUFDQSxRQUFRQSxHQUFHQSxVQUFTQSxLQUFLQTtZQUM5QixXQUFXLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUM3RCxDQUFDLENBQUNBO1FBRUZBLE1BQU1BLENBQUNBLFlBQVlBLEdBQUdBLFVBQVNBLEVBQUVBO1lBQy9CLEVBQUUsQ0FBQSxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7Z0JBQ3BCLE1BQU0sQ0FBQyxRQUFRLEdBQUcsaUJBQWlCLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsY0FBYyxDQUFDLEVBQUUsRUFBRSxhQUFhLEVBQUUsMkJBQW1CLEVBQUUsVUFBVSxFQUFFLEVBQUUsRUFBQyxFQUFFLFVBQVMsSUFBSTtvQkFDMUosTUFBTSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQztnQkFDMUMsQ0FBQyxDQUFDLENBQUM7WUFDUCxDQUFDO1lBQ0QsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7UUFDekIsQ0FBQyxDQUFDQTtRQUdGQSxNQUFNQSxDQUFDQSxrQkFBa0JBLEdBQUdBLFVBQVNBLEVBQUVBO1lBQ3JDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ1gsS0FBSyxrQ0FBa0M7b0JBQ3JDLE1BQU0sQ0FBQyxZQUFZLEdBQUcsY0FBYyxDQUFDO29CQUNyQyxLQUFLLENBQUM7Z0JBQ1IsS0FBSyxrQ0FBa0M7b0JBQ3JDLE1BQU0sQ0FBQyxZQUFZLEdBQUcsY0FBYyxDQUFDO29CQUNyQyxLQUFLLENBQUM7Z0JBQ1IsS0FBSyxrQ0FBa0M7b0JBQ3JDLE1BQU0sQ0FBQyxZQUFZLEdBQUcsY0FBYyxDQUFDO29CQUNyQyxLQUFLLENBQUM7Z0JBQ1IsS0FBSyxrQ0FBa0M7b0JBQ3JDLE1BQU0sQ0FBQyxZQUFZLEdBQUcsY0FBYyxDQUFDO29CQUNyQyxLQUFLLENBQUM7WUFDVixDQUFDO1FBQ0gsQ0FBQyxDQUFDQTtJQUVGQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtBQUNSQSxDQUFDQSxFQXZHTSxPQUFPLEtBQVAsT0FBTyxRQXVHYjs7QUN2R0QsSUFBTyxNQUFNLENBVVo7QUFWRCxXQUFPLE1BQU0sRUFBQyxDQUFDO0lBRUZHLGlCQUFVQSxHQUFHQSxRQUFRQSxDQUFDQTtJQUV0QkEsVUFBR0EsR0FBa0JBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBLGlCQUFVQSxDQUFDQSxDQUFDQTtJQUU1Q0EsbUJBQVlBLEdBQUdBLGlDQUFpQ0EsQ0FBQ0E7SUFFakRBLDBCQUFtQkEsR0FBR0EsTUFBTUEsQ0FBQ0E7QUFFMUNBLENBQUNBLEVBVk0sTUFBTSxLQUFOLE1BQU0sUUFVWjs7QUNSRCxJQUFPLE1BQU0sQ0FTWjtBQVRELFdBQU8sTUFBTSxFQUFDLENBQUM7SUFFRkEsY0FBT0EsR0FBR0EsT0FBT0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsaUJBQVVBLEVBQUVBLENBQUNBLFlBQVlBLEVBQUVBLG1CQUFtQkEsRUFBRUEsY0FBY0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFFckdBLGNBQU9BLENBQUNBLFNBQVNBLENBQUNBLGdCQUFnQkEsRUFBRUE7UUFDbEMsTUFBTSxDQUFDLElBQUksTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQ3RDLENBQUMsQ0FBQ0EsQ0FBQ0E7SUFFSEEsa0JBQWtCQSxDQUFDQSxTQUFTQSxDQUFDQSxpQkFBVUEsQ0FBQ0EsQ0FBQ0E7QUFDM0NBLENBQUNBLEVBVE0sTUFBTSxLQUFOLE1BQU0sUUFTWjs7QUNYRCxJQUFPLE1BQU0sQ0FxQlo7QUFyQkQsV0FBTyxNQUFNLEVBQUMsQ0FBQztJQUViQSxJQUFJQSxHQUFHQSxHQUFrQkEsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0E7SUFFOUNBLElBQWFBLGVBQWVBO1FBQTVCQyxTQUFhQSxlQUFlQTtZQUVuQkMsYUFBUUEsR0FBR0EsR0FBR0EsQ0FBQ0E7WUFDZkEsZUFBVUEsR0FBR0EsS0FBS0EsQ0FBQ0E7WUFDbkJBLFlBQU9BLEdBQUdBLEtBQUtBLENBQUNBO1lBRWhCQSxnQkFBV0EsR0FBR0EsbUJBQVlBLENBQUNBO1FBQ3BDQSxDQUFDQTtRQUFERCxzQkFBQ0E7SUFBREEsQ0FQQUQsQUFPQ0MsSUFBQUQ7SUFQWUEsc0JBQWVBLEdBQWZBLGVBT1pBLENBQUFBO0lBRVVBLHVCQUFnQkEsR0FBR0EsY0FBT0EsQ0FBQ0EsVUFBVUEsQ0FBQ0EseUJBQXlCQSxFQUN4RUEsQ0FBQ0EsUUFBUUEsRUFBRUEsWUFBWUEsRUFBRUEsV0FBV0EsRUFBRUEsUUFBUUEsRUFBRUEsY0FBY0EsRUFBRUEsYUFBYUEsRUFBRUEsbUJBQW1CQSxFQUFFQSxVQUFDQSxNQUFNQSxFQUFFQSxVQUFVQSxFQUFFQSxTQUFTQSxFQUFFQSxNQUFNQSxFQUFFQSxZQUFZQSxFQUFFQSxXQUFXQSxFQUFFQSxpQkFBaUJBO1FBRXRMQSxNQUFNQSxDQUFDQSxRQUFRQSxHQUFHQSxVQUFTQSxJQUFJQTtZQUMzQixNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsUUFBUSxHQUFHLEVBQUUsQ0FBQztRQUNoRSxDQUFDLENBQUNBO0lBRUpBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO0FBQ1JBLENBQUNBLEVBckJNLE1BQU0sS0FBTixNQUFNLFFBcUJaOztBQ25CRCxJQUFPLE1BQU0sQ0FxRVo7QUFyRUQsV0FBTyxNQUFNLEVBQUMsQ0FBQztJQUViQSxJQUFhQSxXQUFXQTtRQUt0QkcsU0FMV0EsV0FBV0EsQ0FLRkEsVUFBZUEsRUFBVUEsTUFBV0EsRUFBVUEsWUFBaUJBLEVBQVVBLFNBQTZCQSxFQUFVQSxpQkFBc0JBO1lBTDVKQyxpQkErRENBO1lBMURxQkEsZUFBVUEsR0FBVkEsVUFBVUEsQ0FBS0E7WUFBVUEsV0FBTUEsR0FBTkEsTUFBTUEsQ0FBS0E7WUFBVUEsaUJBQVlBLEdBQVpBLFlBQVlBLENBQUtBO1lBQVVBLGNBQVNBLEdBQVRBLFNBQVNBLENBQW9CQTtZQUFVQSxzQkFBaUJBLEdBQWpCQSxpQkFBaUJBLENBQUtBO1lBQ3hKQSxVQUFVQSxDQUFDQSxRQUFRQSxHQUFHQSxZQUFZQSxJQUFJQSxFQUFFQSxDQUFDQTtZQUd6Q0EsSUFBSUEsYUFBYUEsR0FBR0EsQ0FBQ0EsR0FBR0EsRUFBRUEsR0FBR0EsRUFBRUEsR0FBSUEsSUFBSUEsQ0FBQ0E7WUFFeENBLElBQUlBLElBQUlBLEdBQUdBLFVBQUNBLFFBQWdCQTtnQkFDMUJBLGlCQUFpQkEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsRUFBQ0EsUUFBUUEsRUFBRUEsUUFBUUEsRUFBRUEsYUFBYUEsRUFBRUEsMEJBQW1CQSxFQUFDQSxFQUFFQSxVQUFDQSxZQUFZQTtvQkFDdEdBLFVBQVVBLENBQUNBLFdBQVdBLEdBQUdBLFlBQVlBLENBQUNBO29CQUN0Q0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsWUFBWUEsQ0FBQ0EsTUFBTUEsRUFBRUEsQ0FBQ0EsRUFBRUEsRUFBRUEsQ0FBQ0E7d0JBQzdDQSxFQUFFQSxDQUFBQSxDQUFDQSxZQUFZQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxFQUFFQSxLQUFLQSxVQUFVQSxDQUFDQSxRQUFRQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFDQSxDQUFDQTs0QkFDekRBLFVBQVVBLENBQUNBLGdCQUFnQkEsR0FBR0EsWUFBWUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7d0JBQ2hEQSxDQUFDQTtvQkFDSEEsQ0FBQ0E7Z0JBQ0RBLENBQUNBLENBQUNBLENBQUNBO2dCQUVMQSxVQUFVQSxDQUFDQSxRQUFRQSxDQUFDQSxVQUFVQSxHQUFHQSxZQUFZQSxDQUFDQSxVQUFVQSxJQUFJQSxhQUFhQSxDQUFDQTtnQkFDMUVBLFVBQVVBLENBQUNBLGNBQWNBLEdBQUdBLFlBQVlBLENBQUNBLFlBQVlBLElBQUlBLE1BQU1BLEVBQUVBLENBQUNBLE9BQU9BLEVBQUVBLENBQUNBO2dCQUM1RUEsVUFBVUEsQ0FBQ0EsZ0JBQWdCQSxHQUFJQSxNQUFNQSxFQUFFQSxDQUFDQSxRQUFRQSxDQUFDQSxVQUFVQSxDQUFDQSxRQUFRQSxDQUFDQSxVQUFVQSxFQUFFQSxjQUFjQSxDQUFDQSxDQUFDQSxPQUFPQSxFQUFFQSxDQUFDQTtnQkFFM0dBLFVBQVVBLENBQUNBLEdBQUdBLENBQUNBLHFCQUFxQkEsRUFBRUEsVUFBVUEsS0FBS0EsRUFBRUEsT0FBT0EsRUFBRUEsUUFBUUE7b0JBQ3RFLFVBQVUsQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztvQkFFckMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEdBQUcsWUFBWSxDQUFDLFVBQVUsSUFBSSxhQUFhLENBQUM7b0JBQzFFLFVBQVUsQ0FBQyxjQUFjLEdBQUcsWUFBWSxDQUFDLFlBQVksSUFBSSxNQUFNLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztvQkFDNUUsVUFBVSxDQUFDLGdCQUFnQixHQUFJLE1BQU0sRUFBRSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLFVBQVUsRUFBRSxjQUFjLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztvQkFFM0csaUJBQWlCLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsYUFBYSxFQUFFLDBCQUFtQixFQUFDLEVBQUUsVUFBQyxZQUFZO3dCQUN0RyxVQUFVLENBQUMsV0FBVyxHQUFHLFlBQVksQ0FBQzt3QkFDdEMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFlBQVksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQzs0QkFDN0MsRUFBRSxDQUFBLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxVQUFVLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7Z0NBQ3pELFVBQVUsQ0FBQyxnQkFBZ0IsR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7NEJBQ2hELENBQUM7d0JBQ0gsQ0FBQztvQkFDRCxDQUFDLENBQUMsQ0FBQztnQkFFTCxDQUFDLEVBQUVBLEtBQUlBLENBQUNBLENBQUNBO1lBQ2JBLENBQUNBLENBQUNBO1lBQ0ZBLElBQUlBLFdBQStCQSxDQUFDQTtZQUNwQ0EsSUFBSUEsUUFBUUEsR0FBR0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsY0FBY0EsSUFBSUEsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsRUFBRUEsQ0FBQ0E7WUFDbkZBLEVBQUVBLENBQUNBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBLENBQUNBO2dCQUNiQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQTtZQUNqQkEsQ0FBQ0E7WUFBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7Z0JBR05BLFdBQVdBLEdBQUdBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBO29CQUMzQkEsSUFBSUEsQ0FBQ0EsS0FBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsY0FBY0EsSUFBSUEsS0FBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0E7Z0JBQzVFQSxDQUFDQSxFQUFFQSxJQUFJQSxDQUFDQSxDQUFDQTtnQkFFVEEsVUFBVUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsVUFBVUEsRUFBRUE7b0JBQ3pCQSxLQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxNQUFNQSxDQUFDQSxXQUFXQSxDQUFDQSxDQUFDQTtnQkFDckNBLENBQUNBLENBQUNBLENBQUNBO1lBQ0xBLENBQUNBO1FBQ0hBLENBQUNBO1FBRU1ELGtDQUFZQSxHQUFuQkEsVUFBb0JBLE1BQU1BLEVBQUVBLEdBQUdBO1lBQzdCRSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxZQUFZQSxDQUFDQSxFQUFDQSxVQUFVQSxFQUFFQSxNQUFNQSxFQUFFQSxPQUFPQSxFQUFFQSxHQUFHQSxFQUFDQSxDQUFDQSxDQUFDQTtRQUMvREEsQ0FBQ0E7UUE1RGFGLG1CQUFPQSxHQUFHQSxDQUFDQSxZQUFZQSxFQUFFQSxRQUFRQSxFQUFFQSxjQUFjQSxFQUFFQSxXQUFXQSxFQUFFQSxtQkFBbUJBLENBQUNBLENBQUNBO1FBNkRyR0Esa0JBQUNBO0lBQURBLENBL0RBSCxBQStEQ0csSUFBQUg7SUEvRFlBLGtCQUFXQSxHQUFYQSxXQStEWkEsQ0FBQUE7SUFFREEsY0FBT0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsYUFBYUEsRUFBRUEsV0FBV0EsQ0FBQ0EsQ0FBQ0E7QUFFOUNBLENBQUNBLEVBckVNLE1BQU0sS0FBTixNQUFNLFFBcUVaOztBQ3ZGRDtBQUNBIiwiZmlsZSI6Imhhd2t1bGFyLXVpLWNvbXBvbmVudHMtZGlyZWN0aXZlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyBDb3B5cmlnaHQgMjAxNC0yMDE1IFJlZCBIYXQsIEluYy4gYW5kL29yIGl0cyBhZmZpbGlhdGVzXG4vLy8gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycyBhcyBpbmRpY2F0ZWQgYnkgdGhlIEBhdXRob3IgdGFncy5cbi8vL1xuLy8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy8vXG4vLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vL1xuLy8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLiIsImlmICh0eXBlb2YgSGF3a3VsYXJDb21wb25lbnRzVmVyc2lvbnMgIT09ICd1bmRlZmluZWQnKSB7IEhhd2t1bGFyQ29tcG9uZW50c1ZlcnNpb25zLnB1c2goe25hbWU6J2RpcmVjdGl2ZXMnLCB2ZXJzaW9uOidkODg3MTcxIHNlY29uZCBjaHVuayd9KX0gZWxzZSB7SGF3a3VsYXJDb21wb25lbnRzVmVyc2lvbnMgPSBbe25hbWU6J2RpcmVjdGl2ZXMnLCB2ZXJzaW9uOidkODg3MTcxIHNlY29uZCBjaHVuayd9XX07IixudWxsLCIvLy8gQ29weXJpZ2h0IDIwMTQtMjAxNSBSZWQgSGF0LCBJbmMuIGFuZC9vciBpdHMgYWZmaWxpYXRlc1xuLy8vIGFuZCBvdGhlciBjb250cmlidXRvcnMgYXMgaW5kaWNhdGVkIGJ5IHRoZSBAYXV0aG9yIHRhZ3MuXG4vLy9cbi8vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vL1xuLy8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vLy9cbi8vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2luY2x1ZGVzLnRzXCIvPlxubW9kdWxlIFNpZGViYXIge1xuXG4gIGV4cG9ydCB2YXIgcGx1Z2luTmFtZSA9IFwic2lkZWJhclwiO1xuXG4gIGV4cG9ydCB2YXIgbG9nOkxvZ2dpbmcuTG9nZ2VyID0gTG9nZ2VyLmdldChwbHVnaW5OYW1lKTtcblxuICBleHBvcnQgdmFyIHRlbXBsYXRlUGF0aCA9IFwicGx1Z2lucy9zaWRlYmFyL2h0bWwvc2lkZWJhci5odG1sXCI7XG5cbiAgZXhwb3J0IHZhciBnbG9iYWxFbnZpcm9ubWVudElkID0gXCJ0ZXN0XCI7XG59XG4iLCIvLy8gQ29weXJpZ2h0IDIwMTQtMjAxNSBSZWQgSGF0LCBJbmMuIGFuZC9vciBpdHMgYWZmaWxpYXRlc1xuLy8vIGFuZCBvdGhlciBjb250cmlidXRvcnMgYXMgaW5kaWNhdGVkIGJ5IHRoZSBAYXV0aG9yIHRhZ3MuXG4vLy9cbi8vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vL1xuLy8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vLy9cbi8vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2luY2x1ZGVzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cInNpZGViYXJHbG9iYWxzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cInNpZGViYXJEaXJlY3RpdmUudHNcIi8+XG5tb2R1bGUgU2lkZWJhciB7XG5cbiAgZXhwb3J0IHZhciBfbW9kdWxlID0gYW5ndWxhci5tb2R1bGUocGx1Z2luTmFtZSwgWydkdVNjcm9sbCddKTtcblxuICBfbW9kdWxlLmRpcmVjdGl2ZSgnaGF3a3VsYXJTaWRlYmFyJywgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBuZXcgU2lkZWJhci5TaWRlYmFyRGlyZWN0aXZlKCk7XG4gIH0pO1xuXG4gIGhhd3Rpb1BsdWdpbkxvYWRlci5hZGRNb2R1bGUocGx1Z2luTmFtZSk7XG59XG4iLCIvLy8gQ29weXJpZ2h0IDIwMTQtMjAxNSBSZWQgSGF0LCBJbmMuIGFuZC9vciBpdHMgYWZmaWxpYXRlc1xuLy8vIGFuZCBvdGhlciBjb250cmlidXRvcnMgYXMgaW5kaWNhdGVkIGJ5IHRoZSBAYXV0aG9yIHRhZ3MuXG4vLy9cbi8vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vL1xuLy8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vLy9cbi8vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cInNpZGViYXJQbHVnaW4udHNcIi8+XG5tb2R1bGUgU2lkZWJhciB7XG5cbiAgdmFyIGxvZzpMb2dnaW5nLkxvZ2dlciA9IExvZ2dlci5nZXQoXCJTaWRlYmFyXCIpO1xuXG4gIGV4cG9ydCBjbGFzcyBTaWRlYmFyRGlyZWN0aXZlIHtcblxuICAgIHB1YmxpYyByZXN0cmljdCA9ICdFJztcbiAgICBwdWJsaWMgdHJhbnNjbHVkZSA9IHRydWU7XG4gICAgcHVibGljIHJlcGxhY2UgPSBmYWxzZTtcblxuICAgIHB1YmxpYyB0ZW1wbGF0ZVVybCA9IHRlbXBsYXRlUGF0aDtcbiAgfVxuXG4gIC8qXG4gIGV4cG9ydCB2YXIgU2lkZWJhckNvbnRyb2xsZXIgPSBfbW9kdWxlLmNvbnRyb2xsZXIoXCJTaWRlYmFyLlNpZGViYXJDb250cm9sbGVyXCIsXG4gICAgWyckc2NvcGUnLCAnJHJvb3RTY29wZScsICckbG9jYXRpb24nLCAoJHNjb3BlLCAkcm9vdFNjb3BlLCAkbG9jYXRpb24pID0+IHtcblxuICAgICAgJHNjb3BlLmlzU2luZ2xlUGFnZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gJGxvY2F0aW9uLnBhdGgoKS5pbmRleE9mKCcvbWV0cmljcycpICE9PSAwO1xuICAgICAgfTtcblxuICAgICAgJHNjb3BlLmdldENsYXNzID0gZnVuY3Rpb24gKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuICRsb2NhdGlvbi5wYXRoKCkuaW5kZXhPZihwYXRoKSA9PT0gMCA/ICdhY3RpdmUnIDogJyc7XG4gICAgICB9O1xuICAgIH1dKTtcbiAgKi9cblxuICBleHBvcnQgdmFyIFNpZGViYXJDb250cm9sbGVyID0gX21vZHVsZS5jb250cm9sbGVyKFwiU2lkZWJhci5TaWRlYmFyQ29udHJvbGxlclwiLFxuICAgICAgWyckc2NvcGUnLCAnJHJvb3RTY29wZScsICckbG9jYXRpb24nLCAnSGF3a3VsYXJOYXYnLCAnSGF3a3VsYXJJbnZlbnRvcnknLCAoJHNjb3BlLCAkcm9vdFNjb3BlLCAkbG9jYXRpb24sIEhhd2t1bGFyTmF2LCBIYXdrdWxhckludmVudG9yeSkgPT4ge1xuXG4gICAgJHNjb3BlLmlzU2luZ2xlUGFnZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICRsb2NhdGlvbi5wYXRoKCkuaW5kZXhPZignL21ldHJpY3MnKSAhPT0gMDtcbiAgICB9O1xuXG4gICAgJHNjb3BlLmlzQXBwU2VydmVyUGFnZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICRsb2NhdGlvbi5wYXRoKCkuaW5kZXhPZignL2hhd2t1bGFyLXVpL2FwcC8nKSA9PT0gMDtcbiAgICB9O1xuXG4gICAgJHNjb3BlLmdldENsYXNzID0gZnVuY3Rpb24ocGF0aCkge1xuICAgICAgcmV0dXJuICRsb2NhdGlvbi5wYXRoKCkuaW5kZXhPZihwYXRoKSA9PT0gMCA/ICdhY3RpdmUnIDogJyc7XG4gICAgfTtcblxuICAgICRzY29wZS5yYW5nZU5hbWVzID0ge1xuICAgICAgJzM2MDAwMDAnOiAnTGFzdCBIb3VyJyxcbiAgICAgICc0MzIwMDAwMCc6ICdMYXN0IDEyIEhvdXJzJyxcbiAgICAgICc4NjQwMDAwMCc6ICdMYXN0IERheScsXG4gICAgICAnNjA0ODAwMDAwJzogJ0xhc3QgV2VlaycsXG4gICAgICAnMjU5MjAwMDAwMCc6ICdMYXN0IE1vbnRoJyxcbiAgICAgICczMTUzNjAwMDAwMCc6ICdMYXN0IFllYXInXG4gICAgfTtcblxuICAgICRzY29wZS5nZXRGb3JtYXR0ZWREYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZGlmZiA9ICRzY29wZS5oa1BhcmFtcy50aW1lT2Zmc2V0O1xuXG4gICAgICAvLyBGSVhNRTogVXNlIG1vbWVudCA/XG4gICAgICAkc2NvcGUub2Zmc2V0TmFtZSA9ICRzY29wZS5yYW5nZU5hbWVzWyRzY29wZS5oa1BhcmFtcy50aW1lT2Zmc2V0XSB8fCAnQ3VzdG9tJztcblxuICAgICAgLy8gVE9ETzogVXNlIHRoaXMgZm9yIGN1c3RvbVxuICAgICAgLy8gdmFyIG1vbVN0YXJ0ID0gbW9tZW50KCRzY29wZS5oa1N0YXJ0VGltZXN0YW1wKTtcbiAgICAgIC8vIHZhciBtb21FbmQgPSBtb21lbnQoJHNjb3BlLmhrRW5kVGltZXN0YW1wKTtcblxuICAgICAgdmFyIG1vbVN0YXJ0ID0gbW9tZW50KCkuc3VidHJhY3QoJHNjb3BlLmhrUGFyYW1zLnRpbWVPZmZzZXQsICdtaWxsaXNlY29uZHMnKTtcbiAgICAgIHZhciBtb21FbmQgPSBtb21lbnQoKTtcblxuICAgICAgaWYgKGRpZmYgPCAyNCAqIDYwICogNjAgKiAxMDAwKSB7XG4gICAgICAgIHJldHVybiBtb21TdGFydC5mb3JtYXQoJ0QgTU1NIFlZWVknKSArICcgJyArIG1vbVN0YXJ0LmZvcm1hdCgnSEg6bW0nKSArICcgLSAnICsgKG1vbVN0YXJ0LmRheSgpICE9PSBtb21FbmQuZGF5KCkgPyBtb21FbmQuZm9ybWF0KCdEIE1NTSBZWVlZICcpICA6ICcnKSArIG1vbUVuZC5mb3JtYXQoJ0hIOm1tJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbW9tU3RhcnQuZm9ybWF0KCdEIE1NTSBZWVlZJykgKyAnIC0gJyArIG1vbUVuZC5mb3JtYXQoJ0QgTU1NIFlZWVknKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgJHNjb3BlLnNldFJhbmdlID0gZnVuY3Rpb24ocmFuZ2UpIHtcbiAgICAgIEhhd2t1bGFyTmF2LnNldFRpbWVzdGFtcChtb21lbnQuZHVyYXRpb24ocmFuZ2UpLnZhbHVlT2YoKSk7XG4gICAgfTtcblxuICAgICRzY29wZS5nZXRVcmxGcm9tSWQgPSBmdW5jdGlvbihpZCkge1xuICAgICAgaWYoISRzY29wZS5yZXNvdXJjZSkge1xuICAgICAgICAkc2NvcGUucmVzb3VyY2UgPSBIYXdrdWxhckludmVudG9yeS5SZXNvdXJjZS5nZXQoe3RlbmFudElkOiAkcm9vdFNjb3BlLmN1cnJlbnRQZXJzb25hLmlkLCBlbnZpcm9ubWVudElkOiBnbG9iYWxFbnZpcm9ubWVudElkLCByZXNvdXJjZUlkOiBpZH0sIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAkc2NvcGUucmVzb3VyY2VOYW1lID0gZGF0YS5wcm9wZXJ0aWVzLnVybDtcbiAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAkc2NvcGUucmVzb3VyY2U7XG4gICAgfTtcblxuICAgIC8vIEZJWE1FOiBNb2NrIGRhdGEuLiByZW1vdmUgd2hlbiB3ZSBoYXZlIHJlYWwgYXBwIHNlcnZlcnNcbiAgICAkc2NvcGUuZ2V0QXBwU2VydmVyRnJvbUlkID0gZnVuY3Rpb24oaWQpIHtcbiAgICAgIHN3aXRjaCAoaWQpIHtcbiAgICAgICAgY2FzZSBcImY1MDg3ZDVkMjZhZWZmOTBjYzkyYzczOGExMGQ4YmJhXCI6XG4gICAgICAgICAgJHNjb3BlLnJlc291cmNlTmFtZSA9ICdFYXZ5IE1hY2hpbmUnO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiNWM0Nzg1YTdhMzA0ZDMyZTVmNDA0MjQyNjY2ODk1ZjVcIjpcbiAgICAgICAgICAkc2NvcGUucmVzb3VyY2VOYW1lID0gJ1RvcmkgTWFjaGluZSc7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCIyMTE5M2U3OTQxNjQyYmFhMTI4NWNkN2VkZDhhZjYyZVwiOlxuICAgICAgICAgICRzY29wZS5yZXNvdXJjZU5hbWUgPSAnV2lrbyBNYWNoaW5lJztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIjIwYTBlOWY1ZDc3N2ExNmFkNDA5MjhkZDNiYTFiZWY5XCI6XG4gICAgICAgICAgJHNjb3BlLnJlc291cmNlTmFtZSA9ICdUb215IE1hY2hpbmUnO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB9XSk7XG59XG4iLCIvLy8gQ29weXJpZ2h0IDIwMTQtMjAxNSBSZWQgSGF0LCBJbmMuIGFuZC9vciBpdHMgYWZmaWxpYXRlc1xuLy8vIGFuZCBvdGhlciBjb250cmlidXRvcnMgYXMgaW5kaWNhdGVkIGJ5IHRoZSBAYXV0aG9yIHRhZ3MuXG4vLy9cbi8vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vL1xuLy8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vLy9cbi8vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2luY2x1ZGVzLnRzXCIvPlxubW9kdWxlIFRvcGJhciB7XG5cbiAgZXhwb3J0IHZhciBwbHVnaW5OYW1lID0gXCJ0b3BiYXJcIjtcblxuICBleHBvcnQgdmFyIGxvZzpMb2dnaW5nLkxvZ2dlciA9IExvZ2dlci5nZXQocGx1Z2luTmFtZSk7XG5cbiAgZXhwb3J0IHZhciB0ZW1wbGF0ZVBhdGggPSBcInBsdWdpbnMvdG9wYmFyL2h0bWwvdG9wYmFyLmh0bWxcIjtcblxuICBleHBvcnQgdmFyIGdsb2JhbEVudmlyb25tZW50SWQgPSBcInRlc3RcIjtcblxufVxuIiwiLy8vIENvcHlyaWdodCAyMDE0LTIwMTUgUmVkIEhhdCwgSW5jLiBhbmQvb3IgaXRzIGFmZmlsaWF0ZXNcbi8vLyBhbmQgb3RoZXIgY29udHJpYnV0b3JzIGFzIGluZGljYXRlZCBieSB0aGUgQGF1dGhvciB0YWdzLlxuLy8vXG4vLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vLy9cbi8vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy8vXG4vLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9pbmNsdWRlcy50c1wiLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJ0b3BiYXJHbG9iYWxzLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cInRvcGJhckRpcmVjdGl2ZS50c1wiLz5cbm1vZHVsZSBUb3BiYXIge1xuXG4gIGV4cG9ydCB2YXIgX21vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKHBsdWdpbk5hbWUsIFsnbmdSZXNvdXJjZScsICdoYXdrdWxhci5zZXJ2aWNlcycsICd1aS5ib290c3RyYXAnXSk7XG5cbiAgX21vZHVsZS5kaXJlY3RpdmUoJ2hhd2t1bGFyVG9wYmFyJywgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBuZXcgVG9wYmFyLlRvcGJhckRpcmVjdGl2ZSgpO1xuICB9KTtcblxuICBoYXd0aW9QbHVnaW5Mb2FkZXIuYWRkTW9kdWxlKHBsdWdpbk5hbWUpO1xufVxuIiwiLy8vIENvcHlyaWdodCAyMDE0LTIwMTUgUmVkIEhhdCwgSW5jLiBhbmQvb3IgaXRzIGFmZmlsaWF0ZXNcbi8vLyBhbmQgb3RoZXIgY29udHJpYnV0b3JzIGFzIGluZGljYXRlZCBieSB0aGUgQGF1dGhvciB0YWdzLlxuLy8vXG4vLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vLy9cbi8vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy8vXG4vLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJ0b3BiYXJQbHVnaW4udHNcIi8+XG5tb2R1bGUgVG9wYmFyIHtcblxuICB2YXIgbG9nOkxvZ2dpbmcuTG9nZ2VyID0gTG9nZ2VyLmdldChcIlRvcGJhclwiKTtcblxuICBleHBvcnQgY2xhc3MgVG9wYmFyRGlyZWN0aXZlIHtcblxuICAgIHB1YmxpYyByZXN0cmljdCA9ICdFJztcbiAgICBwdWJsaWMgdHJhbnNjbHVkZSA9IGZhbHNlO1xuICAgIHB1YmxpYyByZXBsYWNlID0gZmFsc2U7XG5cbiAgICBwdWJsaWMgdGVtcGxhdGVVcmwgPSB0ZW1wbGF0ZVBhdGg7XG4gIH1cblxuICBleHBvcnQgdmFyIFRvcGJhckNvbnRyb2xsZXIgPSBfbW9kdWxlLmNvbnRyb2xsZXIoXCJUb3BiYXIuVG9wYmFyQ29udHJvbGxlclwiLFxuICAgIFsnJHNjb3BlJywgJyRyb290U2NvcGUnLCAnJGxvY2F0aW9uJywgJyRyb3V0ZScsICckcm91dGVQYXJhbXMnLCAnSGF3a3VsYXJOYXYnLCAnSGF3a3VsYXJJbnZlbnRvcnknLCAoJHNjb3BlLCAkcm9vdFNjb3BlLCAkbG9jYXRpb24sICRyb3V0ZSwgJHJvdXRlUGFyYW1zLCBIYXdrdWxhck5hdiwgSGF3a3VsYXJJbnZlbnRvcnkpID0+IHtcblxuICAgICAgJHNjb3BlLmdldENsYXNzID0gZnVuY3Rpb24ocGF0aCkge1xuICAgICAgICAgIHJldHVybiAkbG9jYXRpb24ucGF0aCgpLmluZGV4T2YocGF0aCkgPT09IDAgPyAnYWN0aXZlJyA6ICcnO1xuICAgICAgfTtcblxuICAgIH1dKTtcbn1cbiIsIi8vLyBDb3B5cmlnaHQgMjAxNC0yMDE1IFJlZCBIYXQsIEluYy4gYW5kL29yIGl0cyBhZmZpbGlhdGVzXG4vLy8gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycyBhcyBpbmRpY2F0ZWQgYnkgdGhlIEBhdXRob3IgdGFncy5cbi8vL1xuLy8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy8vXG4vLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vL1xuLy8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vaW5jbHVkZXMudHNcIi8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwidG9wYmFyR2xvYmFscy50c1wiLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJ0b3BiYXJQbHVnaW4udHNcIi8+XG5tb2R1bGUgVG9wYmFyIHtcblxuICBleHBvcnQgY2xhc3MgSGF3a3VsYXJOYXYge1xuXG4gICAgcHVibGljIHN0YXRpYyAkaW5qZWN0ID0gWyckcm9vdFNjb3BlJywgJyRyb3V0ZScsICckcm91dGVQYXJhbXMnLCAnJGludGVydmFsJywgJ0hhd2t1bGFySW52ZW50b3J5J107XG5cblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgJHJvb3RTY29wZTogYW55LCBwcml2YXRlICRyb3V0ZTogYW55LCBwcml2YXRlICRyb3V0ZVBhcmFtczogYW55LCBwcml2YXRlICRpbnRlcnZhbDpuZy5JSW50ZXJ2YWxTZXJ2aWNlLCBwcml2YXRlIEhhd2t1bGFySW52ZW50b3J5OiBhbnkpIHtcbiAgICAgICRyb290U2NvcGUuaGtQYXJhbXMgPSAkcm91dGVQYXJhbXMgfHwgW107XG5cbiAgICAgIC8vIGRlZmF1bHQgdGltZSBwZXJpb2Qgc2V0IHRvIDI0IGhvdXJzXG4gICAgICB2YXIgZGVmYXVsdE9mZnNldCA9IDEgKiA2MCAqIDYwICAqIDEwMDA7XG5cbiAgICAgIHZhciBpbml0ID0gKHRlbmFudElkOiBzdHJpbmcpID0+IHtcbiAgICAgICAgSGF3a3VsYXJJbnZlbnRvcnkuUmVzb3VyY2UucXVlcnkoe3RlbmFudElkOiB0ZW5hbnRJZCwgZW52aXJvbm1lbnRJZDogZ2xvYmFsRW52aXJvbm1lbnRJZH0sIChyZXNvdXJjZUxpc3QpID0+IHtcbiAgICAgICAgICAkcm9vdFNjb3BlLmhrUmVzb3VyY2VzID0gcmVzb3VyY2VMaXN0O1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzb3VyY2VMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZihyZXNvdXJjZUxpc3RbaV0uaWQgPT09ICRyb290U2NvcGUuaGtQYXJhbXMucmVzb3VyY2VJZCkge1xuICAgICAgICAgICAgICAkcm9vdFNjb3BlLnNlbGVjdGVkUmVzb3VyY2UgPSByZXNvdXJjZUxpc3RbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICRyb290U2NvcGUuaGtQYXJhbXMudGltZU9mZnNldCA9ICRyb3V0ZVBhcmFtcy50aW1lT2Zmc2V0IHx8IGRlZmF1bHRPZmZzZXQ7XG4gICAgICAgICRyb290U2NvcGUuaGtFbmRUaW1lc3RhbXAgPSAkcm91dGVQYXJhbXMuZW5kVGltZXN0YW1wIHx8IG1vbWVudCgpLnZhbHVlT2YoKTtcbiAgICAgICAgJHJvb3RTY29wZS5oa1N0YXJ0VGltZXN0YW1wID0gIG1vbWVudCgpLnN1YnRyYWN0KCRyb290U2NvcGUuaGtQYXJhbXMudGltZU9mZnNldCwgJ21pbGxpc2Vjb25kcycpLnZhbHVlT2YoKTtcblxuICAgICAgICAkcm9vdFNjb3BlLiRvbignJHJvdXRlQ2hhbmdlU3VjY2VzcycsIGZ1bmN0aW9uIChldmVudCwgY3VycmVudCwgcHJldmlvdXMpIHtcbiAgICAgICAgICAkcm9vdFNjb3BlLmhrUGFyYW1zID0gY3VycmVudC5wYXJhbXM7XG5cbiAgICAgICAgICAkcm9vdFNjb3BlLmhrUGFyYW1zLnRpbWVPZmZzZXQgPSAkcm91dGVQYXJhbXMudGltZU9mZnNldCB8fCBkZWZhdWx0T2Zmc2V0O1xuICAgICAgICAgICRyb290U2NvcGUuaGtFbmRUaW1lc3RhbXAgPSAkcm91dGVQYXJhbXMuZW5kVGltZXN0YW1wIHx8IG1vbWVudCgpLnZhbHVlT2YoKTtcbiAgICAgICAgICAkcm9vdFNjb3BlLmhrU3RhcnRUaW1lc3RhbXAgPSAgbW9tZW50KCkuc3VidHJhY3QoJHJvb3RTY29wZS5oa1BhcmFtcy50aW1lT2Zmc2V0LCAnbWlsbGlzZWNvbmRzJykudmFsdWVPZigpO1xuXG4gICAgICAgICAgSGF3a3VsYXJJbnZlbnRvcnkuUmVzb3VyY2UucXVlcnkoe3RlbmFudElkOiB0ZW5hbnRJZCwgZW52aXJvbm1lbnRJZDogZ2xvYmFsRW52aXJvbm1lbnRJZH0sIChyZXNvdXJjZUxpc3QpID0+IHtcbiAgICAgICAgICAgICRyb290U2NvcGUuaGtSZXNvdXJjZXMgPSByZXNvdXJjZUxpc3Q7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc291cmNlTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICBpZihyZXNvdXJjZUxpc3RbaV0uaWQgPT09ICRyb290U2NvcGUuaGtQYXJhbXMucmVzb3VyY2VJZCkge1xuICAgICAgICAgICAgICAgICRyb290U2NvcGUuc2VsZWN0ZWRSZXNvdXJjZSA9IHJlc291cmNlTGlzdFtpXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICB9LCB0aGlzKTtcbiAgICAgIH07XG4gICAgICB2YXIgaW5pdFByb21pc2U6bmcuSVByb21pc2U8bnVtYmVyPjtcbiAgICAgIHZhciB0ZW5hbnRJZCA9IHRoaXMuJHJvb3RTY29wZS5jdXJyZW50UGVyc29uYSAmJiB0aGlzLiRyb290U2NvcGUuY3VycmVudFBlcnNvbmEuaWQ7XG4gICAgICBpZiAodGVuYW50SWQpIHtcbiAgICAgICAgaW5pdCh0ZW5hbnRJZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBjdXJyZW50UGVyc29uYSBoYXNuJ3QgYmVlbiBpbmplY3RlZCB0byB0aGUgcm9vdFNjb3BlIHlldCwgd2FpdCBmb3IgaXQuLlxuICAgICAgICAvLyBwZXJoYXBzIHRoZSBiZXR0ZXIgd2F5IHdvdWxkIGJlIHRvIGxpc3RlbiBvbiB0aGUgZXZlbnRzIGZyb20gYWNjb3VudHNcbiAgICAgICAgaW5pdFByb21pc2UgPSB0aGlzLiRpbnRlcnZhbCgoKSAgPT4ge1xuICAgICAgICAgIGluaXQodGhpcy4kcm9vdFNjb3BlLmN1cnJlbnRQZXJzb25hICYmIHRoaXMuJHJvb3RTY29wZS5jdXJyZW50UGVyc29uYS5pZCk7XG4gICAgICAgIH0sIDEwMDApO1xuXG4gICAgICAgICRyb290U2NvcGUuJG9uKCckZGVzdHJveScsICgpID0+IHtcbiAgICAgICAgICB0aGlzLiRpbnRlcnZhbC5jYW5jZWwoaW5pdFByb21pc2UpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0VGltZXN0YW1wKG9mZnNldCwgZW5kKSB7XG4gICAgICB0aGlzLiRyb3V0ZS51cGRhdGVQYXJhbXMoe3RpbWVPZmZzZXQ6IG9mZnNldCwgZW5kVGltZTogZW5kfSk7XG4gICAgfVxuICB9XG5cbiAgX21vZHVsZS5zZXJ2aWNlKCdIYXdrdWxhck5hdicsIEhhd2t1bGFyTmF2KTtcblxufVxuIiwiYW5ndWxhci5tb2R1bGUoXCJoYXdrdWxhci11aS1jb21wb25lbnRzLWRpcmVjdGl2ZXMtdGVtcGxhdGVzXCIsIFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHskdGVtcGxhdGVDYWNoZS5wdXQoXCJwbHVnaW5zL3NpZGViYXIvaHRtbC9zaWRlYmFyLmh0bWxcIixcIjwhLS0gPGRpdiBjbGFzcz1cXFwiY29sLXNtLTMgY29sLW1kLTIgc2lkZWJhci1wZiBzaWRlYmFyLXBmLWxlZnQgc2lkZWJhci1wZi1kYXJrIHNpZGViYXItcGYtYmlnLWljb25zIHNpZGViYXItcGYtZml4ZWRcXFwiPlxcbiAgPG5hdj5cXG4gICAgPHVsIGNsYXNzPVxcXCJuYXYgbmF2LXBpbGxzIG5hdi1zdGFja2VkIG5hdi1kYXJrIG5hdi1iaWctaWNvbnNcXFwiIG5nLWhpZGU9XFxcImlzU2luZ2xlUGFnZSgpXFxcIj5cXG4gICAgICA8bGkgbmctY2xhc3M9XFxcImdldENsYXNzKFxcJy9tZXRyaWNzL2F2YWlsYWJpbGl0eVxcJylcXFwiPjxhIG5nLWhyZWY9XFxcIi9tZXRyaWNzL2F2YWlsYWJpbGl0eS97e2hrUGFyYW1zLnJlc291cmNlSWR9fS97e2hrUGFyYW1zLnRpbWVPZmZzZXR9fS97e2hrRW5kVGltZXN0YW1wfX1cXFwiPjxpIGNsYXNzPVxcXCJmYSBmYS1hcnJvdy11cFxcXCI+PC9pPkF2YWlsYWJpbGl0eTwvYT48L2xpPlxcbiAgICAgIDxsaSBuZy1jbGFzcz1cXFwiZ2V0Q2xhc3MoXFwnL21ldHJpY3MvcmVzcG9uc2UtdGltZVxcJylcXFwiPjxhIG5nLWhyZWY9XFxcIi9tZXRyaWNzL3Jlc3BvbnNlLXRpbWUve3toa1BhcmFtcy5yZXNvdXJjZUlkfX0ve3toa1BhcmFtcy50aW1lT2Zmc2V0fX0ve3toa0VuZFRpbWVzdGFtcH19XFxcIj48aSBjbGFzcz1cXFwiZmEgZmEtbGluZS1jaGFydFxcXCI+PC9pPlJlc3BvbnNlIFRpbWU8L2E+PC9saT5cXG4gICAgICA8bGkgbmctY2xhc3M9XFxcImdldENsYXNzKFxcJy9tZXRyaWNzL2FsZXJ0c1xcJylcXFwiPjxhIG5nLWhyZWY9XFxcIi9tZXRyaWNzL2FsZXJ0cy97e2hrUGFyYW1zLnJlc291cmNlSWR9fS97e2hrUGFyYW1zLnRpbWVPZmZzZXR9fS97e2hrRW5kVGltZXN0YW1wfX1cXFwiPjxpIGNsYXNzPVxcXCJmYSBmYS1mbGFnXFxcIj48L2k+QWxlcnRzPC9hPjwvbGk+XFxuICAgIDwvdWw+XFxuICAgIDx1bCBjbGFzcz1cXFwibmF2IG5hdi1waWxscyBuYXYtc3RhY2tlZCBuYXYtZGFyayBuYXYtYmlnLWljb25zXFxcIiBkdS1zcHktY29udGV4dCAgbmctc2hvdz1cXFwiaXNTaW5nbGVQYWdlKClcXFwiPlxcbiAgICAgIDxsaSBkdS1zY3JvbGxzcHk9XFxcInNlY2F2XFxcIiBvZmZzZXQ9XFxcIjEzNVxcXCIgY2xhc3M9XFxcImFjdGl2ZVxcXCI+PGEgaHJlZj1cXFwiI3NlY2F2XFxcIiBkdS1zbW9vdGgtc2Nyb2xsIG9mZnNldD1cXFwiMTM1XFxcIj48aSBjbGFzcz1cXFwiZmEgZmEtYXJyb3ctdXBcXFwiPjwvaT5BdmFpbGFiaWxpdHk8L2E+PC9saT5cXG4gICAgICA8bGkgZHUtc2Nyb2xsc3B5PVxcXCJzZWNydFxcXCIgb2Zmc2V0PVxcXCIxMjVcXFwiPjxhIGhyZWY9XFxcIiNzZWNydFxcXCIgZHUtc21vb3RoLXNjcm9sbCBvZmZzZXQ9XFxcIjEyNVxcXCI+PGkgY2xhc3M9XFxcImZhIGZhLWxpbmUtY2hhcnRcXFwiPjwvaT5SZXNwb25zZSBUaW1lPC9hPjwvbGk+XFxuICAgICAgPGxpIGR1LXNjcm9sbHNweT1cXFwic2VjYWxcXFwiIG9mZnNldD1cXFwiMTI1XFxcIj48YSBocmVmPVxcXCIjc2VjYWxcXFwiIGR1LXNtb290aC1zY3JvbGwgb2Zmc2V0PVxcXCIxMjVcXFwiPjxpIGNsYXNzPVxcXCJmYSBmYS1mbGFnXFxcIj48L2k+QWxlcnRzPC9hPjwvbGk+XFxuICAgIDwvdWw+XFxuICA8L25hdj5cXG48L2Rpdj4gLS0+XFxuXFxuPGRpdiBjbGFzcz1cXFwic2NyZWVuLXRvcC1uYXZcXFwiPlxcbiAgPGRpdj5cXG4gICAgPGRpdiBjbGFzcz1cXFwicm93IHRvcC1yb3dcXFwiPlxcbiAgICAgIDxkaXYgY2xhc3M9XFxcImNvbC1zbS00XFxcIj5cXG4gICAgICAgIDxhIG5nLXNob3c9XFxcImlzQXBwU2VydmVyUGFnZSgpXFxcIiBocmVmPVxcXCIvaGF3a3VsYXItdWkvYXBwL2FwcC1saXN0XFxcIiBjbGFzcz1cXFwiYmFja1xcXCI+wqsgQWxsIEFwcGxpY2F0aW9uIFNlcnZlcnM8L2E+XFxuICAgICAgICA8YSBuZy1oaWRlPVxcXCJpc0FwcFNlcnZlclBhZ2UoKVxcXCIgaHJlZj1cXFwiL2hhd2t1bGFyLXVpL3VybC91cmwtbGlzdFxcXCIgY2xhc3M9XFxcImJhY2tcXFwiPsKrIEFsbCBVUkxzPC9hPlxcbiAgICAgIDwvZGl2PlxcbiAgICAgIDxkaXYgY2xhc3M9XFxcImNvbC1zbS00XFxcIj5cXG4gICAgICAgIDxoMSBuZy1pbml0PVxcXCJpc0FwcFNlcnZlclBhZ2UoKSA/IGdldEFwcFNlcnZlckZyb21JZChoa1BhcmFtcy5yZXNvdXJjZUlkKSA6IGdldFVybEZyb21JZChoa1BhcmFtcy5yZXNvdXJjZUlkKVxcXCI+e3tyZXNvdXJjZU5hbWV9fTwvaDE+XFxuICAgICAgPC9kaXY+XFxuICAgICAgPGRpdiBjbGFzcz1cXFwiY29sLXNtLTRcXFwiPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiZGF0ZS1yYW5nZSBkcm9wZG93blxcXCI+XFxuICAgICAgICAgIDxpIGNsYXNzPVxcXCJmYSBmYS1jYWxlbmRhclxcXCI+PC9pPlxcbiAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJpbnB1dFxcXCIgZHJvcGRvd24tdG9nZ2xlPlxcbiAgICAgICAgICAgIHt7b2Zmc2V0TmFtZX19IDxzcGFuIGNsYXNzPVxcXCJhZGRpdGlvbmFsLWluZm9cXFwiPih7e2dldEZvcm1hdHRlZERhdGUoKX19KTwvc3Bhbj5cXG4gICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImRyb3Bkb3duLW1lbnUgaW5mb3RpcCBib3R0b20tcmlnaHRcXFwiPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImFycm93XFxcIj48L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJkcm9wZG93bi1tZW51LWNvbnRlbnRcXFwiPlxcbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImxhYmVsXFxcIj5MYXN0PC9zcGFuPlxcbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiYnRuLWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHRcXFwiIG5nLWNsYXNzPVxcXCJ7XFwnYWN0aXZlXFwnOiBvZmZzZXROYW1lID09PSBcXCdMYXN0IEhvdXJcXCd9XFxcIiBuZy1jbGljaz1cXFwic2V0UmFuZ2Uoe2hvdXI6IDF9KVxcXCI+MWg8L2J1dHRvbj5cXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHRcXFwiIG5nLWNsYXNzPVxcXCJ7XFwnYWN0aXZlXFwnOiBvZmZzZXROYW1lID09PSBcXCdMYXN0IDEyIEhvdXJzXFwnfVxcXCIgbmctY2xpY2s9XFxcInNldFJhbmdlKHtob3VyczogMTJ9KVxcXCI+MTJoPC9idXR0b24+XFxuICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0XFxcIiBuZy1jbGFzcz1cXFwie1xcJ2FjdGl2ZVxcJzogb2Zmc2V0TmFtZSA9PT0gXFwnTGFzdCBEYXlcXCd9XFxcIiBuZy1jbGljaz1cXFwic2V0UmFuZ2Uoe2RheTogMX0pXFxcIj5EYXk8L2J1dHRvbj5cXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHRcXFwiIG5nLWNsYXNzPVxcXCJ7XFwnYWN0aXZlXFwnOiBvZmZzZXROYW1lID09PSBcXCdMYXN0IFdlZWtcXCd9XFxcIiBuZy1jbGljaz1cXFwic2V0UmFuZ2Uoe3dlZWs6IDF9KVxcXCI+V2VlazwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdFxcXCIgbmctY2xhc3M9XFxcIntcXCdhY3RpdmVcXCc6IG9mZnNldE5hbWUgPT09IFxcJ0xhc3QgTW9udGhcXCd9XFxcIiBuZy1jbGljaz1cXFwic2V0UmFuZ2Uoe21vbnRoOiAxfSlcXFwiPk1vbnRoPC9idXR0b24+XFxuICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0XFxcIiBuZy1jbGFzcz1cXFwie1xcJ2FjdGl2ZVxcJzogb2Zmc2V0TmFtZSA9PT0gXFwnTGFzdCBZZWFyXFwnfVxcXCIgbmctY2xpY2s9XFxcInNldFJhbmdlKHt5ZWFyOiAxfSlcXFwiPlllYXI8L2J1dHRvbj5cXG4gICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgIDwvZGl2PlxcbiAgICA8L2Rpdj5cXG4gICAgPGRpdiBuZy10cmFuc2NsdWRlPjwvZGl2PlxcbiAgPC9kaXY+XFxuPC9kaXY+XFxuXFxuXCIpO1xuJHRlbXBsYXRlQ2FjaGUucHV0KFwicGx1Z2lucy90b3BiYXIvaHRtbC90b3BiYXIuaHRtbFwiLFwiPHVsIGNsYXNzPVxcXCJuYXYgbmF2YmFyLW5hdiBuYXZiYXItcHJpbWFyeVxcXCI+XFxuICA8bGkgbmctY2xhc3M9XFxcImdldENsYXNzKFxcJy9oYXdrdWxhci11aS91cmwvXFwnKVxcXCI+XFxuICAgIDxhIGhyZWY9XFxcIi9oYXdrdWxhci11aS91cmwvdXJsLWxpc3RcXFwiPlVSTHM8L2E+XFxuICA8L2xpPlxcbiAgPGxpIG5nLWNsYXNzPVxcXCJnZXRDbGFzcyhcXCcvaGF3a3VsYXItdWkvYXBwL1xcJylcXFwiPlxcbiAgICA8YSBocmVmPVxcXCIvaGF3a3VsYXItdWkvYXBwL2FwcC1saXN0XFxcIj5BcHBsaWNhdGlvbiBTZXJ2ZXJzPC9hPlxcbiAgPC9saT5cXG48L3VsPlxcblwiKTt9XSk7IGhhd3Rpb1BsdWdpbkxvYWRlci5hZGRNb2R1bGUoXCJoYXdrdWxhci11aS1jb21wb25lbnRzLWRpcmVjdGl2ZXMtdGVtcGxhdGVzXCIpOyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==