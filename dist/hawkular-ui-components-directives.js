/// Copyright 2014-2015 Red Hat, Inc. and/or its affiliates
/// and other contributors as indicated by the @author tags.
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///   http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.


var Sidebar;
(function (Sidebar) {
    Sidebar.pluginName = "sidebar";
    Sidebar.log = Logger.get(Sidebar.pluginName);
    Sidebar.templatePath = "plugins/sidebar/html/sidebar.html";
})(Sidebar || (Sidebar = {}));

var Sidebar;
(function (Sidebar) {
    Sidebar._module = angular.module(Sidebar.pluginName, []);
    Sidebar._module.directive('hawkularSidebar', function () {
        return new Sidebar.SidebarDirective();
    });
    hawtioPluginLoader.addModule(Sidebar.pluginName);
})(Sidebar || (Sidebar = {}));

var Sidebar;
(function (Sidebar) {
    var log = Logger.get("Sidebar");
    var SidebarDirective = (function () {
        function SidebarDirective() {
            this.restrict = 'E';
            this.transclude = false;
            this.replace = false;
            this.templateUrl = Sidebar.templatePath;
        }
        return SidebarDirective;
    })();
    Sidebar.SidebarDirective = SidebarDirective;
    Sidebar.SidebarController = Sidebar._module.controller("Sidebar.SidebarController", ['$scope', '$rootScope', '$location', function ($scope, $rootScope, $location) {
        $scope.getClass = function (path) {
            return $location.path().indexOf(path) === 0 ? 'active' : '';
        };
    }]);
})(Sidebar || (Sidebar = {}));

var Topbar;
(function (Topbar) {
    Topbar.pluginName = "topbar";
    Topbar.log = Logger.get(Topbar.pluginName);
    Topbar.templatePath = "plugins/topbar/html/topbar.html";
    Topbar.globalTenantId = "test";
})(Topbar || (Topbar = {}));

var Topbar;
(function (Topbar) {
    Topbar._module = angular.module(Topbar.pluginName, ['ngResource', 'hawkular.services']);
    Topbar._module.directive('hawkularTopbar', function () {
        return new Topbar.TopbarDirective();
    });
    hawtioPluginLoader.addModule(Topbar.pluginName);
})(Topbar || (Topbar = {}));

var Topbar;
(function (Topbar) {
    var log = Logger.get("Topbar");
    var TopbarDirective = (function () {
        function TopbarDirective() {
            this.restrict = 'E';
            this.transclude = false;
            this.replace = false;
            this.templateUrl = Topbar.templatePath;
        }
        return TopbarDirective;
    })();
    Topbar.TopbarDirective = TopbarDirective;
    Topbar.TopbarController = Topbar._module.controller("Topbar.TopbarController", ['$scope', '$rootScope', '$location', '$routeParams', 'DataResource', 'DataRange', 'HawkularInventory', function ($scope, $rootScope, $location, $routeParams, DataResource, DataRange, HawkularInventory) {
        $scope.range = 'week';
        $scope.getDate = function () {
            $scope.rangeDates = DataRange.getFormattedTimeRange();
        };
        $scope.setRange = function (range) {
            DataRange.setCustomRange(range);
            $scope.getDate();
            $scope.range = Object.keys(range)[0];
        };
        $scope.rangeNames = {
            'hour': 'Last Hour',
            'hours': 'Last 12 Hours',
            'day': 'Last Day',
            'week': 'Last Week',
            'month': 'Last Month',
            'year': 'Last Year'
        };
        $scope.updateResources = function () {
            DataResource.updateResources();
        };
        $scope.$watch(function () {
            return $location.path();
        }, function (value) {
            $rootScope.hideSidebar = ($location.path().indexOf('/metrics/addUrl') === 0);
        });
        $scope.$watch(function () {
            return $routeParams.resourceId;
        }, function (value) {
            $scope.selectedResource = HawkularInventory.Resource.get({ tenantId: Topbar.globalTenantId, resourceId: value });
        });
        $scope.setSelection = function (resourceId) {
            $location.path($location.path().replace($routeParams.resourceId, resourceId.id));
        };
        $scope.updateResources();
    }]);
})(Topbar || (Topbar = {}));

var Topbar;
(function (Topbar) {
    var DataRange = (function () {
        function DataRange() {
            this.endTimestamp = moment().valueOf();
            this.startTimestamp = moment(this.endTimestamp).subtract({ days: 7 }).valueOf();
        }
        DataRange.prototype.setCustomRange = function (rangeValue, customEndTimestamp) {
            this.endTimestamp = customEndTimestamp || moment().valueOf();
            this.startTimestamp = moment(this.endTimestamp).subtract(rangeValue).valueOf();
        };
        DataRange.prototype.getStartDate = function () {
            return new Date(this.startTimestamp);
        };
        DataRange.prototype.getEndDate = function () {
            return new Date(this.endTimestamp);
        };
        DataRange.prototype.getFormattedTimeRange = function () {
            var diff = this.endTimestamp - this.startTimestamp;
            var momStart = moment(this.startTimestamp);
            var momEnd = moment(this.endTimestamp);
            if (diff < 24 * 60 * 60 * 1000) {
                return momStart.format('D MMM YYYY') + ' ' + momStart.format('HH:mm') + ' - ' + (momStart.day() !== momEnd.day() ? momEnd.format('D MMM YYYY ') : '') + momEnd.format('HH:mm');
            }
            else {
                return momStart.format('D MMM YYYY') + ' - ' + momEnd.format('D MMM YYYY');
            }
        };
        return DataRange;
    })();
    Topbar.DataRange = DataRange;
    Topbar._module.service('DataRange', DataRange);
    var DataResource = (function () {
        function DataResource($rootScope, HawkularInventory, $timeout) {
            this.$rootScope = $rootScope;
            this.HawkularInventory = HawkularInventory;
            this.$timeout = $timeout;
            this.hkInventory = HawkularInventory;
            this.rootScope = $rootScope;
            this.timeout = $timeout;
            this.updateResources();
        }
        DataResource.prototype.updateResources = function () {
            this.rootScope.hkResourcesList = this.hkInventory.Resource.query({ tenantId: Topbar.globalTenantId });
        };
        DataResource.prototype.getSelectedResource = function () {
            return this.selectedResource;
        };
        DataResource.prototype.getResources = function () {
            return this.rootScope.hkResourcesList;
        };
        DataResource.prototype.setSelectedResource = function (resource) {
            this.selectedResource = resource;
        };
        DataResource.$inject = ['$rootScope', 'HawkularInventory', '$timeout'];
        return DataResource;
    })();
    Topbar.DataResource = DataResource;
    Topbar._module.service('DataResource', DataResource);
})(Topbar || (Topbar = {}));

angular.module("hawkular-ui-components-directives-templates", []).run(["$templateCache", function($templateCache) {$templateCache.put("plugins/sidebar/html/sidebar.html","<div class=\"col-sm-3 col-md-2 sidebar-pf sidebar-pf-left sidebar-pf-dark sidebar-pf-big-icons\">\n\n  <ul class=\"nav nav-pills nav-stacked nav-dark nav-big-icons\">\n    <li ng-class=\"getClass(\'/metrics/responseTime\')\"><a href=\"/metrics/responseTime\"><i class=\"fa fa-line-chart\"></i>Response Time</a></li>\n    <li ng-class=\"getClass(\'/metrics/upDowntime\')\"><a href=\"/metrics/upDowntime\"><i class=\"fa fa-arrow-up\"></i>Up / Downtime</a></li>\n    <li ng-class=\"getClass(\'/metrics/alerts\')\"><a href=\"/metrics/alerts\"><i class=\"fa fa-flag\"></i>Alerts</a></li>\n  </ul>\n</div>");
$templateCache.put("plugins/topbar/html/topbar.html","<ul class=\"nav navbar-nav navbar-primary navbar-selector navbar-dark row\">\n  <li class=\"context col-sm-3 col-md-2\" dropdown>\n    <a href=\"#\" class=\"additional-info\" dropdown-toggle ng-hide=\"resources.length === 0\">\n      {{selectedResource.id}}\n      <span>{{selectedResource.parameters.url}}</span>\n      <b class=\"caret\"></b>\n    </a>\n    <ul class=\"dropdown-menu\" role=\"menu\">\n      <li ng-class=\"{\'active\': selectedResource.id === resource.id}\" ng-repeat=\"resource in hkResourcesList\">\n        <a href=\"\" ng-click=\"setSelection(resource)\">{{resource.parameters.url}} ({{resource.id}})</a>\n      </li>\n      <li class=\"divider\"></li>\n      <li>\n        <a href=\"/metrics/addUrl\">Add Application...</a>\n      </li>\n    </ul>\n  </li>\n  <!--\n  <li class=\"dropdown context col-sm-3 col-md-2\">\n    <a href=\"#\" class=\"dropdown-toggle additional-info\" ng-hide=\"resources.length === 0\">\n      {{selectedResource.id}}\n      <span>{{selectedResource.parameters.url}}</span>\n      <b class=\"caret\"></b>\n    </a>\n    <a href=\"/metrics/addUrl\" class=\"additional-info\" ng-show=\"resources.length === 0\">\n      No Resources Available\n      <span>Add a Resource</span>\n    </a>\n    <ul class=\"dropdown-menu\">\n      <li ng-class=\"{\'active\': selectedResource.id === resource.id}\" ng-repeat=\"resource in hkResourcesList\">\n        <a href=\"\" ng-click=\"setSelection(resource)\">{{resource.parameters.url}} ({{resource.id}})</a>\n      </li>\n      <li class=\"divider\"></li>\n      <li>\n        <a href=\"/metrics/addUrl\">Add Application...</a>\n      </li>\n    </ul>\n  </li>\n  -->\n\n  <li class=\"pull-right date-range dropdown\">\n    <i class=\"fa fa-calendar\"></i>\n    <div class=\"input\" data-toggle=\"dropdown\">\n      {{rangeNames[range]}} <span class=\"additional-info\">({{rangeDates}})</span>\n    </div>\n\n    <div class=\"dropdown-menu infotip bottom-right\">\n      <div class=\"arrow\"></div>\n      <div class=\"dropdown-menu-content\">\n        <span class=\"label\">Last</span>\n        <div class=\"btn-group\">\n          <button type=\"button\" class=\"btn btn-default\" ng-class=\"{\'active\': range === \'hour\'}\" ng-click=\"setRange({hour: 1})\">1h</button>\n          <button type=\"button\" class=\"btn btn-default\" ng-class=\"{\'active\': range === \'hours\'}\" ng-click=\"setRange({hours: 12})\">12h</button>\n          <button type=\"button\" class=\"btn btn-default\" ng-class=\"{\'active\': range === \'day\'}\" ng-click=\"setRange({day: 1})\">Day</button>\n          <button type=\"button\" class=\"btn btn-default\" ng-class=\"{\'active\': range === \'week\'}\" ng-click=\"setRange({week: 1})\">Week</button>\n          <button type=\"button\" class=\"btn btn-default\" ng-class=\"{\'active\': range === \'month\'}\" ng-click=\"setRange({month: 1})\">Month</button>\n          <button type=\"button\" class=\"btn btn-default\" ng-class=\"{\'active\': range === \'year\'}\" ng-click=\"setRange({year: 1})\">Year</button>\n        </div>\n      </div>\n    </div>\n  </li>\n</ul>\n");}]); hawtioPluginLoader.addModule("hawkular-ui-components-directives-templates");
//# sourceMappingURL=data:application/json;base64,