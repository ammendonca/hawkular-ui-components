/// Copyright 2014-2015 Red Hat, Inc. and/or its affiliates
/// and other contributors as indicated by the @author tags.
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///   http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
if (typeof HawkularComponentsVersions !== 'undefined') { HawkularComponentsVersions.push({name:'accounts', version:'e133131 Fixed the account switcher dropdown'})} else {HawkularComponentsVersions = [{name:'accounts', version:'e133131 Fixed the account switcher dropdown'}]};


var HawkularAccounts;
(function (HawkularAccounts) {
    HawkularAccounts.pluginName = "hawkular-accounts";
    HawkularAccounts.log = Logger.get(HawkularAccounts.pluginName);
    HawkularAccounts.templatePath = "plugins/accounts/html";
})(HawkularAccounts || (HawkularAccounts = {}));

var HawkularAccounts;
(function (HawkularAccounts) {
    HawkularAccounts._module = angular.module(HawkularAccounts.pluginName, []);
    var accountsTab = undefined;
    var currentPersona = undefined;
    HawkularAccounts._module.config(['$locationProvider', '$routeProvider', '$httpProvider', 'HawtioNavBuilderProvider', function ($locationProvider, $routeProvider, $httpProvider, builder) {
        accountsTab = builder.create().id(HawkularAccounts.pluginName).title(function () { return "Accounts"; }).href(function () { return "/accounts"; }).subPath("My account", "accounts", builder.join(HawkularAccounts.templatePath, 'accounts.html')).subPath("Organizations", "organizations", builder.join(HawkularAccounts.templatePath, 'organizations.html')).build();
        builder.configureRouting($routeProvider, accountsTab);
        $routeProvider.when('/accounts/organizations/new', { templateUrl: builder.join(HawkularAccounts.templatePath, 'organization_new.html') });
        $locationProvider.html5Mode(true);
        $httpProvider.interceptors.push(PersonaInterceptorService.Factory);
    }]);
    HawkularAccounts._module.run(['$rootScope', 'userDetails', 'HawtioNav', function ($rootScope, userDetails, HawtioNav) {
        $rootScope.userDetails = userDetails;
        $rootScope.$on('IdleStart', function () {
            $('#idle').slideDown();
        });
        $rootScope.$on('IdleEnd', function () {
            $("#idle").slideUp();
        });
        $rootScope.$on('CurrentPersonaLoaded', function (e, persona) {
            currentPersona = persona;
        });
        $rootScope.$on('SwitchedPersona', function (e, persona) {
            currentPersona = persona;
        });
    }]);
    hawtioPluginLoader.registerPreBootstrapTask(function (next) {
        KeycloakConfig = "/keycloak.json";
        next();
    }, true);
    var PersonaInterceptorService = (function () {
        function PersonaInterceptorService($q) {
            this.$q = $q;
            this.request = function (request) {
                if (currentPersona) {
                    request.headers['X-Hawkular-Persona'] = currentPersona.id;
                }
                return request;
            };
        }
        PersonaInterceptorService.Factory = function ($q) {
            return new PersonaInterceptorService($q);
        };
        PersonaInterceptorService.$inject = ['$q'];
        return PersonaInterceptorService;
    })();
    hawtioPluginLoader.addModule(HawkularAccounts.pluginName);
})(HawkularAccounts || (HawkularAccounts = {}));

var HawkularAccounts;
(function (HawkularAccounts) {
    HawkularAccounts.OrganizationsController = HawkularAccounts._module.controller("HawkularAccounts.OrganizationsController", [
        '$rootScope',
        '$scope',
        'HawkularAccounts.OrganizationService',
        '$log',
        '$location',
        function ($rootScope, $scope, OrganizationService, $log, $location) {
            $scope.organizations = [];
            $scope.loading = true;
            $scope.load = function () {
                $scope.loadOrganizations();
            };
            $scope.loadOrganizations = function () {
                $scope.organizations = [];
                $scope.loading = true;
                $scope.organizations = OrganizationService.query({}, function () {
                    $scope.loading = false;
                }, function () {
                    $log.warn("List of organizations could NOT be retrieved.");
                    $scope.loading = false;
                });
            };
            $scope.showCreateForm = function () {
                $location.path('/accounts/organizations/new');
            };
            $scope.remove = function (organization) {
                organization.$remove().then(function () {
                    $scope.$emit('OrganizationRemoved');
                    $scope.organizations.splice($scope.organizations.indexOf(organization), 1);
                });
            };
            $scope.load();
            $rootScope.$on('SwitchedPersona', function () {
                $scope.loadOrganizations();
            });
        }
    ]);
    HawkularAccounts.OrganizationNewController = HawkularAccounts._module.controller("HawkularAccounts.OrganizationNewController", [
        '$scope',
        'HawkularAccounts.OrganizationService',
        '$log',
        '$location',
        function ($scope, OrganizationService, $log, $location) {
            $scope.organizationNew = new OrganizationService({});
            $scope.persist = function () {
                $scope.organizationNew.$save({}, function () {
                    $scope.$emit('OrganizationCreated');
                    $location.path('/accounts/organizations');
                }, function () {
                    $log.debug("Organization could NOT be added.");
                });
                $log.debug("Trying to persist the organization");
            };
        }
    ]);
    HawkularAccounts.OrganizationService = HawkularAccounts._module.service("HawkularAccounts.OrganizationService", ["$resource", function ($resource) {
        return $resource('http://localhost:8080/hawkular-accounts/organizations/:id', { id: '@id' });
    }]);
    HawkularAccounts._module.requires.push("ngResource");
})(HawkularAccounts || (HawkularAccounts = {}));

var HawkularAccounts;
(function (HawkularAccounts) {
    HawkularAccounts.PersonaController = HawkularAccounts._module.controller("HawkularAccounts.PersonaController", [
        '$rootScope',
        '$scope',
        'HawkularAccounts.PersonaService',
        '$log',
        function ($rootScope, $scope, PersonaService, $log) {
            $scope.personas = [];
            $scope.currentPersona = null;
            $scope.load = function () {
                $scope.loadCurrentPersona();
            };
            $scope.loadCurrentPersona = function () {
                $scope.currentPersona = PersonaService.get({ id: "current" }, function () {
                    $scope.$emit("CurrentPersonaLoaded", $scope.currentPersona);
                }, function () {
                    $log.warn("Failed in retrieving the current persona");
                });
            };
            $scope.loadPersonas = function () {
                $scope.personas = PersonaService.query({}, function () {
                    $scope.personas = $scope.personas.filter(function (persona) {
                        return persona.id !== $scope.currentPersona.id;
                    });
                    $scope.loading = false;
                }, function () {
                    $log.warn("List of personas could NOT be retrieved.");
                    $scope.loading = false;
                });
            };
            $scope.switchPersona = function (persona) {
                $scope.personas.push($scope.currentPersona);
                $scope.currentPersona = persona;
                $scope.personas = $scope.personas.filter(function (persona) {
                    return persona.id !== $scope.currentPersona.id;
                });
                $scope.$emit("SwitchedPersona", persona);
            };
            $rootScope.$on('CurrentPersonaLoaded', function () {
                $scope.loadPersonas();
            });
            $rootScope.$on('OrganizationCreated', function () {
                $scope.loadPersonas();
            });
            $rootScope.$on('OrganizationRemoved', function () {
                $scope.loadPersonas();
            });
            $scope.load();
        }
    ]);
    HawkularAccounts.PersonaService = HawkularAccounts._module.service("HawkularAccounts.PersonaService", ["$resource", function ($resource) {
        return $resource('http://localhost:8080/hawkular-accounts/personas/:id', { id: '@id' });
    }]);
    HawkularAccounts._module.requires.push("ngResource");
})(HawkularAccounts || (HawkularAccounts = {}));

angular.module("hawkular-ui-components-accounts-templates", []).run(["$templateCache", function($templateCache) {$templateCache.put("plugins/accounts/html/accounts.html","<div class=\"row\">\n    <div class=\"col-md-12\">\n        <h1>Accounts</h1>\n        Your account can be managed directly at <a href=\"http://localhost:8080/auth/realms/hawkular/account\">Keycloak</a>.\n    </div>\n</div>\n");
$templateCache.put("plugins/accounts/html/organization_new.html","<div class=\"row\">\n    <div class=\"col-md-12\" data-ng-controller=\"HawkularAccounts.OrganizationNewController\">\n        <ol class=\"breadcrumb\">\n            <li><a data-ng-href=\"/\">Hawkular</a></li>\n            <li><a data-ng-href=\"/\">Accounts</a></li>\n            <li><a data-ng-href=\"/accounts/organizations\">Organizations</a></li>\n        </ol>\n        <h1>\n            Add Organization\n        </h1>\n\n        <form role=\"form\" class=\"form-horizontal\">\n            <div class=\"form-group\">\n                <label for=\"name\" class=\"col-md-2 control-label\">Name <span class=\"required\">*</span> </label>\n                <div class=\"col-md-6\">\n                    <input type=\"text\" class=\"form-control\" id=\"name\" placeholder=\"Name\"\n                           data-ng-model=\"organizationNew.name\">\n                </div>\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"description\" class=\"col-md-2 control-label\">Description</label>\n                <div class=\"col-md-6\">\n                    <input type=\"text\" class=\"form-control\" id=\"description\" placeholder=\"Description\"\n                           data-ng-model=\"organizationNew.description\">\n                </div>\n            </div>\n            <div class=\"col-md-8\">\n                <div class=\"pull-right\">\n                    <a data-ng-href=\"/accounts/organizations\" class=\"btn btn-default btn-lg\">Cancel</a>\n                    <button data-ng-click=\"persist()\" type=\"submit\" class=\"btn btn-primary btn-lg\">Save</button>\n                </div>\n            </div>\n\n        </form>\n    </div><!-- /col -->\n</div><!-- /row -->\n");
$templateCache.put("plugins/accounts/html/organizations.html","<div class=\"row\">\n    <div class=\"col-md-12\" data-ng-controller=\"HawkularAccounts.OrganizationsController\">\n        <ol class=\"breadcrumb\">\n            <li><a data-ng-href=\"/\">Hawkular</a></li>\n            <li><a data-ng-href=\"/\">Accounts</a></li>\n            <li><a data-ng-href=\"/accounts/organizations\">Organizations</a></li>\n        </ol>\n        <div class=\"pull-right\">\n            <button class=\"btn btn-primary\" type=\"button\" role=\"button\" data-ng-click=\"showCreateForm()\">Create</button>\n        </div>\n\n        <h1>Organizations</h1>\n        <div class=\"progress-description\" data-ng-show=\"loading\">\n            <div class=\"spinner spinner-xs spinner-inline\"></div> <strong>Loading:</strong> Organizations\n        </div>\n        <div class=\"row\" data-ng-show=\"!organizations.length && !loading\">\n            <div class=\"col-sm-6\">\n                No organizations yet. How about creating one?\n            </div>\n        </div>\n\n        <div data-ng-show=\"organizations.length && !loading\">\n            <table class=\"table table-striped table-bordered\">\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Description</th>\n                        <th>&nbsp;</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr data-ng-repeat=\"organization in organizations\">\n                        <td>{{organization.name}}</td>\n                        <td>{{organization.description}}</td>\n                        <td>\n                            <button type=\"button\" class=\"btn btn-default\" aria-label=\"Remove\" data-ng-click=\"remove(organization)\">\n                                <span class=\"pficon pficon-delete\" aria-hidden=\"true\"></span>\n                            </button>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div><!-- /col -->\n\n</div>\n</div>\n");}]); hawtioPluginLoader.addModule("hawkular-ui-components-accounts-templates");
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpY2VuY2UudHh0IiwiYWNjb3VudHN2ZXJzaW9uLmpzIiwiL3NvdXJjZS9pbmNsdWRlcy5qcyIsIi9hY2NvdW50cy90cy9hY2NvdW50c0dsb2JhbHMudHMiLCIvYWNjb3VudHMvdHMvYWNjb3VudHNQbHVnaW4udHMiLCIvYWNjb3VudHMvdHMvb3JnYW5pemF0aW9ucy50cyIsIi9hY2NvdW50cy90cy9wZXJzb25hLnRzIiwidGVtcGxhdGVzLmpzIl0sIm5hbWVzIjpbIkhhd2t1bGFyQWNjb3VudHMiLCJIYXdrdWxhckFjY291bnRzLlBlcnNvbmFJbnRlcmNlcHRvclNlcnZpY2UiLCJIYXdrdWxhckFjY291bnRzLlBlcnNvbmFJbnRlcmNlcHRvclNlcnZpY2UuY29uc3RydWN0b3IiLCJIYXdrdWxhckFjY291bnRzLlBlcnNvbmFJbnRlcmNlcHRvclNlcnZpY2UuRmFjdG9yeSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ2JBO0FDQUE7QUFDQTtBQ2VBLElBQU8sZ0JBQWdCLENBSXRCO0FBSkQsV0FBTyxnQkFBZ0IsRUFBQyxDQUFDO0lBQ1ZBLDJCQUFVQSxHQUFHQSxtQkFBbUJBLENBQUNBO0lBQ2pDQSxvQkFBR0EsR0FBa0JBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBLDJCQUFVQSxDQUFDQSxDQUFDQTtJQUM1Q0EsNkJBQVlBLEdBQUdBLHVCQUF1QkEsQ0FBQ0E7QUFDdERBLENBQUNBLEVBSk0sZ0JBQWdCLEtBQWhCLGdCQUFnQixRQUl0Qjs7QUNIRCxJQUFPLGdCQUFnQixDQWlFdEI7QUFqRUQsV0FBTyxnQkFBZ0IsRUFBQyxDQUFDO0lBQ1ZBLHdCQUFPQSxHQUFHQSxPQUFPQSxDQUFDQSxNQUFNQSxDQUFDQSxnQkFBZ0JBLENBQUNBLFVBQVVBLEVBQUVBLEVBQUVBLENBQUNBLENBQUNBO0lBQ3JFQSxJQUFJQSxXQUFXQSxHQUFPQSxTQUFTQSxD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QUFDQSxLQUFLQSxDQUFDQSxpQkFBaUJBLEVBQUVBLE9BQU9BLENBQUNBLENBQUNBO1lBQzdDQSxDQUFDQSxDQUFDQTtZQUVGQSxVQUFVQSxDQUFDQSxHQUFHQSxDQUFDQSxzQkFBc0JBLEVBQUVBO2dCQUNuQ0EsTUFBTUEsQ0FBQ0EsWUFBWUEsRUFBRUEsQ0FBQ0E7WUFDMUJBLENBQUNBLENBQUNBLENBQUNBO1lBRUhBLFVBQVVBLENBQUNBLEdBQUdBLENBQUNBLHFCQUFxQkEsRUFBRUE7Z0JBQ2xDQSxNQUFNQSxDQUFDQSxZQUFZQSxFQUFFQSxDQUFDQTtZQUMxQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFFSEEsVUFBVUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EscUJBQXFCQSxFQUFFQTtnQkFDbENBLE1BQU1BLENBQUNBLFlBQVlBLEVBQUVBLENBQUNBO1lBQzFCQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUVIQSxNQUFNQSxDQUFDQSxJQUFJQSxFQUFFQSxDQUFDQTtRQUNsQkEsQ0FBQ0E7S0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFFR0EsK0JBQWNBLEdBQUdBLHdCQUFPQSxDQUFDQSxPQUFPQSxDQUFDQSxpQ0FBaUNBLEVBQUVBLENBQUNBLFdBQVdBLEVBQUVBLFVBQUNBLFNBQVNBO1FBQ25HQSxNQUFNQSxDQUFDQSxTQUFTQSxDQUFDQSxzREFBc0RBLEVBQUVBLEVBQUNBLEVBQUVBLEVBQUNBLEtBQUtBLEVBQUNBLENBQUNBLENBQUNBO0lBQ3pGQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtJQUVKQSx3QkFBT0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsQ0FBQ0E7QUFDeENBLENBQUNBLEVBbkVNLGdCQUFnQixLQUFoQixnQkFBZ0IsUUFtRXRCOztBQ25GRDtBQUNBO0FBQ0EiLCJmaWxlIjoiaGF3a3VsYXItdWktY29tcG9uZW50cy1hY2NvdW50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyBDb3B5cmlnaHQgMjAxNC0yMDE1IFJlZCBIYXQsIEluYy4gYW5kL29yIGl0cyBhZmZpbGlhdGVzXG4vLy8gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycyBhcyBpbmRpY2F0ZWQgYnkgdGhlIEBhdXRob3IgdGFncy5cbi8vL1xuLy8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy8vXG4vLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vL1xuLy8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLiIsImlmICh0eXBlb2YgSGF3a3VsYXJDb21wb25lbnRzVmVyc2lvbnMgIT09ICd1bmRlZmluZWQnKSB7IEhhd2t1bGFyQ29tcG9uZW50c1ZlcnNpb25zLnB1c2goe25hbWU6J2FjY291bnRzJywgdmVyc2lvbjonZTEzMzEzMSBGaXhlZCB0aGUgYWNjb3VudCBzd2l0Y2hlciBkcm9wZG93bid9KX0gZWxzZSB7SGF3a3VsYXJDb21wb25lbnRzVmVyc2lvbnMgPSBbe25hbWU6J2FjY291bnRzJywgdmVyc2lvbjonZTEzMzEzMSBGaXhlZCB0aGUgYWNjb3VudCBzd2l0Y2hlciBkcm9wZG93bid9XX07IixudWxsLCIvLy8gQ29weXJpZ2h0IDIwMTQtMjAxNSBSZWQgSGF0LCBJbmMuIGFuZC9vciBpdHMgYWZmaWxpYXRlc1xuLy8vIGFuZCBvdGhlciBjb250cmlidXRvcnMgYXMgaW5kaWNhdGVkIGJ5IHRoZSBAYXV0aG9yIHRhZ3MuXG4vLy9cbi8vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vL1xuLy8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vLy9cbi8vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2luY2x1ZGVzLnRzXCIvPlxubW9kdWxlIEhhd2t1bGFyQWNjb3VudHMge1xuICAgIGV4cG9ydCB2YXIgcGx1Z2luTmFtZSA9IFwiaGF3a3VsYXItYWNjb3VudHNcIjtcbiAgICBleHBvcnQgdmFyIGxvZzpMb2dnaW5nLkxvZ2dlciA9IExvZ2dlci5nZXQocGx1Z2luTmFtZSk7XG4gICAgZXhwb3J0IHZhciB0ZW1wbGF0ZVBhdGggPSBcInBsdWdpbnMvYWNjb3VudHMvaHRtbFwiO1xufVxuIiwiLy8vIENvcHlyaWdodCAyMDE0LTIwMTUgUmVkIEhhdCwgSW5jLiBhbmQvb3IgaXRzIGFmZmlsaWF0ZXNcbi8vLyBhbmQgb3RoZXIgY29udHJpYnV0b3JzIGFzIGluZGljYXRlZCBieSB0aGUgQGF1dGhvciB0YWdzLlxuLy8vXG4vLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vLy9cbi8vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy8vXG4vLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9pbmNsdWRlcy50c1wiLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJhY2NvdW50c0dsb2JhbHMudHNcIi8+XG5tb2R1bGUgSGF3a3VsYXJBY2NvdW50cyB7XG4gICAgZXhwb3J0IHZhciBfbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoSGF3a3VsYXJBY2NvdW50cy5wbHVnaW5OYW1lLCBbXSk7XG4gICAgdmFyIGFjY291bnRzVGFiOmFueSA9IHVuZGVmaW5lZDtcbiAgICB2YXIgY3VycmVudFBlcnNvbmE6YW55ID0gdW5kZWZpbmVkO1xuXG4gICAgX21vZHVsZS5jb25maWcoWyckbG9jYXRpb25Qcm92aWRlcicsICckcm91dGVQcm92aWRlcicsICckaHR0cFByb3ZpZGVyJywgJ0hhd3Rpb05hdkJ1aWxkZXJQcm92aWRlcicsICgkbG9jYXRpb25Qcm92aWRlciwgJHJvdXRlUHJvdmlkZXI6bmcucm91dGUuSVJvdXRlUHJvdmlkZXIsICRodHRwUHJvdmlkZXI6bmcuSUh0dHBQcm92aWRlciwgYnVpbGRlcjpIYXd0aW9NYWluTmF2LkJ1aWxkZXJGYWN0b3J5KSA9PiB7XG4gICAgICAgIGFjY291bnRzVGFiID0gYnVpbGRlci5jcmVhdGUoKVxuICAgICAgICAgICAgLmlkKEhhd2t1bGFyQWNjb3VudHMucGx1Z2luTmFtZSlcbiAgICAgICAgICAgIC50aXRsZSgoKSA9PiBcIkFjY291bnRzXCIpXG4gICAgICAgICAgICAuaHJlZigoKSA9PiBcIi9hY2NvdW50c1wiKVxuICAgICAgICAgICAgLnN1YlBhdGgoXCJNeSBhY2NvdW50XCIsIFwiYWNjb3VudHNcIiwgYnVpbGRlci5qb2luKEhhd2t1bGFyQWNjb3VudHMudGVtcGxhdGVQYXRoLCAnYWNjb3VudHMuaHRtbCcpKVxuICAgICAgICAgICAgLnN1YlBhdGgoXCJPcmdhbml6YXRpb25zXCIsIFwib3JnYW5pemF0aW9uc1wiLCBidWlsZGVyLmpvaW4oSGF3a3VsYXJBY2NvdW50cy50ZW1wbGF0ZVBhdGgsICdvcmdhbml6YXRpb25zLmh0bWwnKSlcbiAgICAgICAgICAgIC5idWlsZCgpO1xuICAgICAgICBidWlsZGVyLmNvbmZpZ3VyZVJvdXRpbmcoJHJvdXRlUHJvdmlkZXIsIGFjY291bnRzVGFiKTtcblxuICAgICAgICAkcm91dGVQcm92aWRlci53aGVuKCcvYWNjb3VudHMvb3JnYW5pemF0aW9ucy9uZXcnLCB7dGVtcGxhdGVVcmw6IGJ1aWxkZXIuam9pbihIYXdrdWxhckFjY291bnRzLnRlbXBsYXRlUGF0aCwgJ29yZ2FuaXphdGlvbl9uZXcuaHRtbCcpfSk7XG4gICAgICAgICRsb2NhdGlvblByb3ZpZGVyLmh0bWw1TW9kZSh0cnVlKTtcbiAgICAgICAgJGh0dHBQcm92aWRlci5pbnRlcmNlcHRvcnMucHVzaChQZXJzb25hSW50ZXJjZXB0b3JTZXJ2aWNlLkZhY3RvcnkpO1xuICAgIH1dKTtcblxuICAgIF9tb2R1bGUucnVuKFsnJHJvb3RTY29wZScsICd1c2VyRGV0YWlscycsICdIYXd0aW9OYXYnLCAoJHJvb3RTY29wZSwgdXNlckRldGFpbHMsIEhhd3Rpb05hdjpIYXd0aW9NYWluTmF2LlJlZ2lzdHJ5KSA9PiB7XG4gICAgICAgIC8vSGF3dGlvTmF2LmFkZChhY2NvdW50c1RhYik7XG4gICAgICAgICRyb290U2NvcGUudXNlckRldGFpbHMgPSB1c2VyRGV0YWlscztcblxuICAgICAgICAkcm9vdFNjb3BlLiRvbignSWRsZVN0YXJ0JywgKCkgPT4ge1xuICAgICAgICAgICAgJCgnI2lkbGUnKS5zbGlkZURvd24oKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJHJvb3RTY29wZS4kb24oJ0lkbGVFbmQnLCAoKSA9PiB7XG4gICAgICAgICAgICAkKFwiI2lkbGVcIikuc2xpZGVVcCgpO1xuICAgICAgICB9KTtcblxuICAgICAgICAkcm9vdFNjb3BlLiRvbignQ3VycmVudFBlcnNvbmFMb2FkZWQnLCAoZSwgcGVyc29uYSkgPT4ge1xuICAgICAgICAgICAgY3VycmVudFBlcnNvbmEgPSBwZXJzb25hO1xuICAgICAgICB9KTtcblxuICAgICAgICAkcm9vdFNjb3BlLiRvbignU3dpdGNoZWRQZXJzb25hJywgKGUsIHBlcnNvbmEpID0+IHtcbiAgICAgICAgICAgIGN1cnJlbnRQZXJzb25hID0gcGVyc29uYTtcbiAgICAgICAgfSk7XG4gICAgfV0pO1xuXG4gICAgaGF3dGlvUGx1Z2luTG9hZGVyLnJlZ2lzdGVyUHJlQm9vdHN0cmFwVGFzaygobmV4dCkgPT4ge1xuICAgICAgICBLZXljbG9ha0NvbmZpZyA9IFwiL2tleWNsb2FrLmpzb25cIjtcbiAgICAgICAgbmV4dCgpO1xuICAgIH0sIHRydWUpO1xuXG4gICAgY2xhc3MgUGVyc29uYUludGVyY2VwdG9yU2VydmljZSB7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgJGluamVjdCA9IFsnJHEnXTtcblxuICAgICAgICBwdWJsaWMgc3RhdGljIEZhY3RvcnkoJHE6bmcuSVFTZXJ2aWNlKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFBlcnNvbmFJbnRlcmNlcHRvclNlcnZpY2UoJHEpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3RydWN0b3IocHJpdmF0ZSAkcTpuZy5JUVNlcnZpY2UpIHtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcXVlc3QgPSAocmVxdWVzdCkgPT4ge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRQZXJzb25hKSB7XG4gICAgICAgICAgICAgICAgcmVxdWVzdC5oZWFkZXJzWydYLUhhd2t1bGFyLVBlcnNvbmEnXSA9IGN1cnJlbnRQZXJzb25hLmlkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlcXVlc3Q7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgaGF3dGlvUGx1Z2luTG9hZGVyLmFkZE1vZHVsZShIYXdrdWxhckFjY291bnRzLnBsdWdpbk5hbWUpO1xufVxuIiwiLy8vIENvcHlyaWdodCAyMDE0LTIwMTUgUmVkIEhhdCwgSW5jLiBhbmQvb3IgaXRzIGFmZmlsaWF0ZXNcbi8vLyBhbmQgb3RoZXIgY29udHJpYnV0b3JzIGFzIGluZGljYXRlZCBieSB0aGUgQGF1dGhvciB0YWdzLlxuLy8vXG4vLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vLy9cbi8vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy8vXG4vLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJhY2NvdW50c1BsdWdpbi50c1wiLz5cbm1vZHVsZSBIYXdrdWxhckFjY291bnRzIHtcblxuICAgIGV4cG9ydCB2YXIgT3JnYW5pemF0aW9uc0NvbnRyb2xsZXIgPSBfbW9kdWxlLmNvbnRyb2xsZXIoXCJIYXdrdWxhckFjY291bnRzLk9yZ2FuaXphdGlvbnNDb250cm9sbGVyXCIsIFtcbiAgICAgICAgJyRyb290U2NvcGUnLCAnJHNjb3BlJywgJ0hhd2t1bGFyQWNjb3VudHMuT3JnYW5pemF0aW9uU2VydmljZScsICckbG9nJywgJyRsb2NhdGlvbicsXG4gICAgICAgICgkcm9vdFNjb3BlLCAkc2NvcGUsIE9yZ2FuaXphdGlvblNlcnZpY2UsICRsb2csICRsb2NhdGlvbikgPT4ge1xuXG4gICAgICAgICAgICAkc2NvcGUub3JnYW5pemF0aW9ucyA9IFtdO1xuICAgICAgICAgICAgJHNjb3BlLmxvYWRpbmcgPSB0cnVlO1xuXG4gICAgICAgICAgICAkc2NvcGUubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAkc2NvcGUubG9hZE9yZ2FuaXphdGlvbnMoKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICRzY29wZS5sb2FkT3JnYW5pemF0aW9ucyA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAkc2NvcGUub3JnYW5pemF0aW9ucyA9IFtdO1xuICAgICAgICAgICAgICAgICRzY29wZS5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAkc2NvcGUub3JnYW5pemF0aW9ucyA9IE9yZ2FuaXphdGlvblNlcnZpY2UucXVlcnkoe30sXG4gICAgICAgICAgICAgICAgICAgICgpPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgJGxvZy53YXJuKFwiTGlzdCBvZiBvcmdhbml6YXRpb25zIGNvdWxkIE5PVCBiZSByZXRyaWV2ZWQuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgJHNjb3BlLnNob3dDcmVhdGVGb3JtID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvYWNjb3VudHMvb3JnYW5pemF0aW9ucy9uZXcnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAkc2NvcGUucmVtb3ZlID0gKG9yZ2FuaXphdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgIG9yZ2FuaXphdGlvbi4kcmVtb3ZlKCkudGhlbihcbiAgICAgICAgICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdPcmdhbml6YXRpb25SZW1vdmVkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub3JnYW5pemF0aW9ucy5zcGxpY2UoJHNjb3BlLm9yZ2FuaXphdGlvbnMuaW5kZXhPZihvcmdhbml6YXRpb24pLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAkc2NvcGUubG9hZCgpO1xuXG4gICAgICAgICAgICAkcm9vdFNjb3BlLiRvbignU3dpdGNoZWRQZXJzb25hJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICRzY29wZS5sb2FkT3JnYW5pemF0aW9ucygpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1dKTtcblxuICAgIGV4cG9ydCB2YXIgT3JnYW5pemF0aW9uTmV3Q29udHJvbGxlciA9IF9tb2R1bGUuY29udHJvbGxlcihcIkhhd2t1bGFyQWNjb3VudHMuT3JnYW5pemF0aW9uTmV3Q29udHJvbGxlclwiLCBbXG4gICAgICAgICckc2NvcGUnLCAnSGF3a3VsYXJBY2NvdW50cy5Pcmdhbml6YXRpb25TZXJ2aWNlJywgJyRsb2cnLCAnJGxvY2F0aW9uJyxcbiAgICAgICAgKCRzY29wZSwgT3JnYW5pemF0aW9uU2VydmljZSwgJGxvZywgJGxvY2F0aW9uKSA9PiB7XG5cbiAgICAgICAgICAgICRzY29wZS5vcmdhbml6YXRpb25OZXcgPSBuZXcgT3JnYW5pemF0aW9uU2VydmljZSh7fSk7XG4gICAgICAgICAgICAkc2NvcGUucGVyc2lzdCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAkc2NvcGUub3JnYW5pemF0aW9uTmV3LiRzYXZlKHt9LFxuICAgICAgICAgICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ09yZ2FuaXphdGlvbkNyZWF0ZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvYWNjb3VudHMvb3JnYW5pemF0aW9ucycpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBlcnJvclxuICAgICAgICAgICAgICAgICAgICAgICAgJGxvZy5kZWJ1ZyhcIk9yZ2FuaXphdGlvbiBjb3VsZCBOT1QgYmUgYWRkZWQuXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAkbG9nLmRlYnVnKFwiVHJ5aW5nIHRvIHBlcnNpc3QgdGhlIG9yZ2FuaXphdGlvblwiKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1dKTtcblxuICAgIGV4cG9ydCB2YXIgT3JnYW5pemF0aW9uU2VydmljZSA9IF9tb2R1bGUuc2VydmljZShcIkhhd2t1bGFyQWNjb3VudHMuT3JnYW5pemF0aW9uU2VydmljZVwiLCBbXCIkcmVzb3VyY2VcIiwgKCRyZXNvdXJjZSkgPT4ge1xuICAgICAgICByZXR1cm4gJHJlc291cmNlKCdodHRwOi8vbG9jYWxob3N0OjgwODAvaGF3a3VsYXItYWNjb3VudHMvb3JnYW5pemF0aW9ucy86aWQnLCB7aWQ6J0BpZCd9KTtcbiAgICB9XSk7XG5cbiAgICBfbW9kdWxlLnJlcXVpcmVzLnB1c2goXCJuZ1Jlc291cmNlXCIpO1xufVxuIiwiLy8vIENvcHlyaWdodCAyMDE0LTIwMTUgUmVkIEhhdCwgSW5jLiBhbmQvb3IgaXRzIGFmZmlsaWF0ZXNcbi8vLyBhbmQgb3RoZXIgY29udHJpYnV0b3JzIGFzIGluZGljYXRlZCBieSB0aGUgQGF1dGhvciB0YWdzLlxuLy8vXG4vLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vLy9cbi8vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy8vXG4vLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJhY2NvdW50c1BsdWdpbi50c1wiLz5cbm1vZHVsZSBIYXdrdWxhckFjY291bnRzIHtcblxuICAgIGV4cG9ydCB2YXIgUGVyc29uYUNvbnRyb2xsZXIgPSBfbW9kdWxlLmNvbnRyb2xsZXIoXCJIYXdrdWxhckFjY291bnRzLlBlcnNvbmFDb250cm9sbGVyXCIsIFtcbiAgICAgICAgJyRyb290U2NvcGUnLCAnJHNjb3BlJywgJ0hhd2t1bGFyQWNjb3VudHMuUGVyc29uYVNlcnZpY2UnLCAnJGxvZycsXG4gICAgICAgICgkcm9vdFNjb3BlLCAkc2NvcGUsIFBlcnNvbmFTZXJ2aWNlLCAkbG9nKSA9PiB7XG4gICAgICAgICAgICAkc2NvcGUucGVyc29uYXMgPSBbXTtcbiAgICAgICAgICAgICRzY29wZS5jdXJyZW50UGVyc29uYSA9IG51bGw7XG5cbiAgICAgICAgICAgICRzY29wZS5sb2FkID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICRzY29wZS5sb2FkQ3VycmVudFBlcnNvbmEoKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICRzY29wZS5sb2FkQ3VycmVudFBlcnNvbmEgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmN1cnJlbnRQZXJzb25hID0gUGVyc29uYVNlcnZpY2UuZ2V0KHtpZDogXCJjdXJyZW50XCJ9LFxuICAgICAgICAgICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoXCJDdXJyZW50UGVyc29uYUxvYWRlZFwiLCAkc2NvcGUuY3VycmVudFBlcnNvbmEpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkbG9nLndhcm4oXCJGYWlsZWQgaW4gcmV0cmlldmluZyB0aGUgY3VycmVudCBwZXJzb25hXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICRzY29wZS5sb2FkUGVyc29uYXMgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnBlcnNvbmFzID0gUGVyc29uYVNlcnZpY2UucXVlcnkoe30sXG4gICAgICAgICAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5wZXJzb25hcyA9ICRzY29wZS5wZXJzb25hcy5maWx0ZXIoKHBlcnNvbmEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGVyc29uYS5pZCAhPT0gJHNjb3BlLmN1cnJlbnRQZXJzb25hLmlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkbG9nLndhcm4oXCJMaXN0IG9mIHBlcnNvbmFzIGNvdWxkIE5PVCBiZSByZXRyaWV2ZWQuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAkc2NvcGUuc3dpdGNoUGVyc29uYSA9IChwZXJzb25hKSA9PiB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnBlcnNvbmFzLnB1c2goJHNjb3BlLmN1cnJlbnRQZXJzb25hKTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuY3VycmVudFBlcnNvbmEgPSBwZXJzb25hO1xuICAgICAgICAgICAgICAgICRzY29wZS5wZXJzb25hcyA9ICRzY29wZS5wZXJzb25hcy5maWx0ZXIoKHBlcnNvbmEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBlcnNvbmEuaWQgIT09ICRzY29wZS5jdXJyZW50UGVyc29uYS5pZDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoXCJTd2l0Y2hlZFBlcnNvbmFcIiwgcGVyc29uYSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAkcm9vdFNjb3BlLiRvbignQ3VycmVudFBlcnNvbmFMb2FkZWQnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmxvYWRQZXJzb25hcygpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICRyb290U2NvcGUuJG9uKCdPcmdhbml6YXRpb25DcmVhdGVkJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICRzY29wZS5sb2FkUGVyc29uYXMoKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAkcm9vdFNjb3BlLiRvbignT3JnYW5pemF0aW9uUmVtb3ZlZCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICAkc2NvcGUubG9hZFBlcnNvbmFzKCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgJHNjb3BlLmxvYWQoKTtcbiAgICAgICAgfV0pO1xuXG4gICAgZXhwb3J0IHZhciBQZXJzb25hU2VydmljZSA9IF9tb2R1bGUuc2VydmljZShcIkhhd2t1bGFyQWNjb3VudHMuUGVyc29uYVNlcnZpY2VcIiwgW1wiJHJlc291cmNlXCIsICgkcmVzb3VyY2UpID0+IHtcbiAgICAgICAgcmV0dXJuICRyZXNvdXJjZSgnaHR0cDovL2xvY2FsaG9zdDo4MDgwL2hhd2t1bGFyLWFjY291bnRzL3BlcnNvbmFzLzppZCcsIHtpZDonQGlkJ30pO1xuICAgIH1dKTtcblxuICAgIF9tb2R1bGUucmVxdWlyZXMucHVzaChcIm5nUmVzb3VyY2VcIik7XG59XG4iLCJhbmd1bGFyLm1vZHVsZShcImhhd2t1bGFyLXVpLWNvbXBvbmVudHMtYWNjb3VudHMtdGVtcGxhdGVzXCIsIFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHskdGVtcGxhdGVDYWNoZS5wdXQoXCJwbHVnaW5zL2FjY291bnRzL2h0bWwvYWNjb3VudHMuaHRtbFwiLFwiPGRpdiBjbGFzcz1cXFwicm93XFxcIj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTEyXFxcIj5cXG4gICAgICAgIDxoMT5BY2NvdW50czwvaDE+XFxuICAgICAgICBZb3VyIGFjY291bnQgY2FuIGJlIG1hbmFnZWQgZGlyZWN0bHkgYXQgPGEgaHJlZj1cXFwiaHR0cDovL2xvY2FsaG9zdDo4MDgwL2F1dGgvcmVhbG1zL2hhd2t1bGFyL2FjY291bnRcXFwiPktleWNsb2FrPC9hPi5cXG4gICAgPC9kaXY+XFxuPC9kaXY+XFxuXCIpO1xuJHRlbXBsYXRlQ2FjaGUucHV0KFwicGx1Z2lucy9hY2NvdW50cy9odG1sL29yZ2FuaXphdGlvbl9uZXcuaHRtbFwiLFwiPGRpdiBjbGFzcz1cXFwicm93XFxcIj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTEyXFxcIiBkYXRhLW5nLWNvbnRyb2xsZXI9XFxcIkhhd2t1bGFyQWNjb3VudHMuT3JnYW5pemF0aW9uTmV3Q29udHJvbGxlclxcXCI+XFxuICAgICAgICA8b2wgY2xhc3M9XFxcImJyZWFkY3J1bWJcXFwiPlxcbiAgICAgICAgICAgIDxsaT48YSBkYXRhLW5nLWhyZWY9XFxcIi9cXFwiPkhhd2t1bGFyPC9hPjwvbGk+XFxuICAgICAgICAgICAgPGxpPjxhIGRhdGEtbmctaHJlZj1cXFwiL1xcXCI+QWNjb3VudHM8L2E+PC9saT5cXG4gICAgICAgICAgICA8bGk+PGEgZGF0YS1uZy1ocmVmPVxcXCIvYWNjb3VudHMvb3JnYW5pemF0aW9uc1xcXCI+T3JnYW5pemF0aW9uczwvYT48L2xpPlxcbiAgICAgICAgPC9vbD5cXG4gICAgICAgIDxoMT5cXG4gICAgICAgICAgICBBZGQgT3JnYW5pemF0aW9uXFxuICAgICAgICA8L2gxPlxcblxcbiAgICAgICAgPGZvcm0gcm9sZT1cXFwiZm9ybVxcXCIgY2xhc3M9XFxcImZvcm0taG9yaXpvbnRhbFxcXCI+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XFxcIm5hbWVcXFwiIGNsYXNzPVxcXCJjb2wtbWQtMiBjb250cm9sLWxhYmVsXFxcIj5OYW1lIDxzcGFuIGNsYXNzPVxcXCJyZXF1aXJlZFxcXCI+Kjwvc3Bhbj4gPC9sYWJlbD5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTZcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcInRleHRcXFwiIGNsYXNzPVxcXCJmb3JtLWNvbnRyb2xcXFwiIGlkPVxcXCJuYW1lXFxcIiBwbGFjZWhvbGRlcj1cXFwiTmFtZVxcXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW5nLW1vZGVsPVxcXCJvcmdhbml6YXRpb25OZXcubmFtZVxcXCI+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDwvZGl2PlxcblxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcbiAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPVxcXCJkZXNjcmlwdGlvblxcXCIgY2xhc3M9XFxcImNvbC1tZC0yIGNvbnRyb2wtbGFiZWxcXFwiPkRlc2NyaXB0aW9uPC9sYWJlbD5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTZcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcInRleHRcXFwiIGNsYXNzPVxcXCJmb3JtLWNvbnRyb2xcXFwiIGlkPVxcXCJkZXNjcmlwdGlvblxcXCIgcGxhY2Vob2xkZXI9XFxcIkRlc2NyaXB0aW9uXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbmctbW9kZWw9XFxcIm9yZ2FuaXphdGlvbk5ldy5kZXNjcmlwdGlvblxcXCI+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbC1tZC04XFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwicHVsbC1yaWdodFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8YSBkYXRhLW5nLWhyZWY9XFxcIi9hY2NvdW50cy9vcmdhbml6YXRpb25zXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi1sZ1xcXCI+Q2FuY2VsPC9hPlxcbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBkYXRhLW5nLWNsaWNrPVxcXCJwZXJzaXN0KClcXFwiIHR5cGU9XFxcInN1Ym1pdFxcXCIgY2xhc3M9XFxcImJ0biBidG4tcHJpbWFyeSBidG4tbGdcXFwiPlNhdmU8L2J1dHRvbj5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPC9kaXY+XFxuXFxuICAgICAgICA8L2Zvcm0+XFxuICAgIDwvZGl2PjwhLS0gL2NvbCAtLT5cXG48L2Rpdj48IS0tIC9yb3cgLS0+XFxuXCIpO1xuJHRlbXBsYXRlQ2FjaGUucHV0KFwicGx1Z2lucy9hY2NvdW50cy9odG1sL29yZ2FuaXphdGlvbnMuaHRtbFwiLFwiPGRpdiBjbGFzcz1cXFwicm93XFxcIj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTEyXFxcIiBkYXRhLW5nLWNvbnRyb2xsZXI9XFxcIkhhd2t1bGFyQWNjb3VudHMuT3JnYW5pemF0aW9uc0NvbnRyb2xsZXJcXFwiPlxcbiAgICAgICAgPG9sIGNsYXNzPVxcXCJicmVhZGNydW1iXFxcIj5cXG4gICAgICAgICAgICA8bGk+PGEgZGF0YS1uZy1ocmVmPVxcXCIvXFxcIj5IYXdrdWxhcjwvYT48L2xpPlxcbiAgICAgICAgICAgIDxsaT48YSBkYXRhLW5nLWhyZWY9XFxcIi9cXFwiPkFjY291bnRzPC9hPjwvbGk+XFxuICAgICAgICAgICAgPGxpPjxhIGRhdGEtbmctaHJlZj1cXFwiL2FjY291bnRzL29yZ2FuaXphdGlvbnNcXFwiPk9yZ2FuaXphdGlvbnM8L2E+PC9saT5cXG4gICAgICAgIDwvb2w+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJwdWxsLXJpZ2h0XFxcIj5cXG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLXByaW1hcnlcXFwiIHR5cGU9XFxcImJ1dHRvblxcXCIgcm9sZT1cXFwiYnV0dG9uXFxcIiBkYXRhLW5nLWNsaWNrPVxcXCJzaG93Q3JlYXRlRm9ybSgpXFxcIj5DcmVhdGU8L2J1dHRvbj5cXG4gICAgICAgIDwvZGl2PlxcblxcbiAgICAgICAgPGgxPk9yZ2FuaXphdGlvbnM8L2gxPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwicHJvZ3Jlc3MtZGVzY3JpcHRpb25cXFwiIGRhdGEtbmctc2hvdz1cXFwibG9hZGluZ1xcXCI+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic3Bpbm5lciBzcGlubmVyLXhzIHNwaW5uZXItaW5saW5lXFxcIj48L2Rpdj4gPHN0cm9uZz5Mb2FkaW5nOjwvc3Ryb25nPiBPcmdhbml6YXRpb25zXFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInJvd1xcXCIgZGF0YS1uZy1zaG93PVxcXCIhb3JnYW5pemF0aW9ucy5sZW5ndGggJiYgIWxvYWRpbmdcXFwiPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbC1zbS02XFxcIj5cXG4gICAgICAgICAgICAgICAgTm8gb3JnYW5pemF0aW9ucyB5ZXQuIEhvdyBhYm91dCBjcmVhdGluZyBvbmU/XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG5cXG4gICAgICAgIDxkaXYgZGF0YS1uZy1zaG93PVxcXCJvcmdhbml6YXRpb25zLmxlbmd0aCAmJiAhbG9hZGluZ1xcXCI+XFxuICAgICAgICAgICAgPHRhYmxlIGNsYXNzPVxcXCJ0YWJsZSB0YWJsZS1zdHJpcGVkIHRhYmxlLWJvcmRlcmVkXFxcIj5cXG4gICAgICAgICAgICAgICAgPHRoZWFkPlxcbiAgICAgICAgICAgICAgICAgICAgPHRyPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5OYW1lPC90aD5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGg+RGVzY3JpcHRpb248L3RoPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0aD4mbmJzcDs8L3RoPlxcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cXG4gICAgICAgICAgICAgICAgPC90aGVhZD5cXG4gICAgICAgICAgICAgICAgPHRib2R5PlxcbiAgICAgICAgICAgICAgICAgICAgPHRyIGRhdGEtbmctcmVwZWF0PVxcXCJvcmdhbml6YXRpb24gaW4gb3JnYW5pemF0aW9uc1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnt7b3JnYW5pemF0aW9uLm5hbWV9fTwvdGQ+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnt7b3JnYW5pemF0aW9uLmRlc2NyaXB0aW9ufX08L3RkPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHRcXFwiIGFyaWEtbGFiZWw9XFxcIlJlbW92ZVxcXCIgZGF0YS1uZy1jbGljaz1cXFwicmVtb3ZlKG9yZ2FuaXphdGlvbilcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInBmaWNvbiBwZmljb24tZGVsZXRlXFxcIiBhcmlhLWhpZGRlbj1cXFwidHJ1ZVxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cXG4gICAgICAgICAgICAgICAgPC90Ym9keT5cXG4gICAgICAgICAgICA8L3RhYmxlPlxcbiAgICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PjwhLS0gL2NvbCAtLT5cXG5cXG48L2Rpdj5cXG48L2Rpdj5cXG5cIik7fV0pOyBoYXd0aW9QbHVnaW5Mb2FkZXIuYWRkTW9kdWxlKFwiaGF3a3VsYXItdWktY29tcG9uZW50cy1hY2NvdW50cy10ZW1wbGF0ZXNcIik7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9