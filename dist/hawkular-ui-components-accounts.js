/// Copyright 2014-2015 Red Hat, Inc. and/or its affiliates
/// and other contributors as indicated by the @author tags.
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///   http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.


var HawkularAccounts;
(function (HawkularAccounts) {
    HawkularAccounts.pluginName = "hawkular-accounts";
    HawkularAccounts.log = Logger.get(HawkularAccounts.pluginName);
    HawkularAccounts.templatePath = "plugins/accounts/html";
})(HawkularAccounts || (HawkularAccounts = {}));

var HawkularAccounts;
(function (HawkularAccounts) {
    HawkularAccounts._module = angular.module(HawkularAccounts.pluginName, []);
    var accountsTab = undefined;
    HawkularAccounts._module.config(['$locationProvider', '$routeProvider', 'HawtioNavBuilderProvider', function ($locationProvider, $routeProvider, builder) {
        accountsTab = builder.create().id(HawkularAccounts.pluginName).title(function () { return "Accounts"; }).href(function () { return "/accounts"; }).subPath("My account", "accounts", builder.join(HawkularAccounts.templatePath, 'accounts.html')).subPath("Organizations", "organizations", builder.join(HawkularAccounts.templatePath, 'organizations.html')).build();
        builder.configureRouting($routeProvider, accountsTab);
        $routeProvider.when('/accounts/organizations/new', { templateUrl: builder.join(HawkularAccounts.templatePath, 'organization_new.html') });
        $locationProvider.html5Mode(true);
    }]);
    HawkularAccounts._module.run(['HawtioNav', function (HawtioNav) {
    }]);
    hawtioPluginLoader.addModule(HawkularAccounts.pluginName);
})(HawkularAccounts || (HawkularAccounts = {}));

var HawkularAccounts;
(function (HawkularAccounts) {
    var AuthService = (function () {
        function AuthService($rootScope, $window) {
            var _this = this;
            this.$rootScope = $rootScope;
            this.$window = $window;
            this.onReady(function () {
                _this.$rootScope['username'] = _this.keycloak().idTokenParsed.name;
                _this.$rootScope['user_email'] = _this.keycloak().idTokenParsed.email;
            });
        }
        AuthService.prototype.keycloak = function () {
            return this.$window['keycloak'];
        };
        AuthService.prototype.onReady = function (callback) {
            var _this = this;
            if (this.$window['keycloakReady'] === true) {
                callback();
            }
            else {
                this.keycloak().onReady = function () {
                    _this.$window['keycloakReady'] = true;
                    callback();
                };
            }
        };
        AuthService.prototype.logout = function () {
            return this.keycloak().logout();
        };
        AuthService.prototype.updateToken = function (periodicity) {
            return this.keycloak().updateToken(periodicity);
        };
        AuthService.prototype.token = function () {
            return this.keycloak().token;
        };
        AuthService.prototype.isAuthenticated = function () {
            return this.keycloak() && this.keycloak().authenticated;
        };
        AuthService.$inject = ['$rootScope', '$window'];
        return AuthService;
    })();
    HawkularAccounts.AuthService = AuthService;
    HawkularAccounts._module.service('Auth', AuthService);
})(HawkularAccounts || (HawkularAccounts = {}));

var HawkularAccounts;
(function (HawkularAccounts) {
    var AuthInterceptorService = (function () {
        function AuthInterceptorService($q, Auth) {
            var _this = this;
            this.$q = $q;
            this.Auth = Auth;
            this.request = function (request) {
                console.debug('Intercepting request');
                var BASE_URL = "http://localhost:8080/hawkular-";
                var addBearer, deferred;
                if (request.url.indexOf(BASE_URL) === -1) {
                    console.debug('The requested URL is not part of the base URL. Base URL: ' + BASE_URL + ', requested URL: ' + request.url);
                    return request;
                }
                addBearer = function () {
                    return _this.Auth.updateToken(5).success(function () {
                        var token = _this.Auth.token();
                        console.debug('Adding bearer token to the request: ' + token);
                        request.headers.Authorization = 'Bearer ' + token;
                        deferred.notify();
                        return deferred.resolve(request);
                    }).error(function () {
                        console.log("Couldn't update token");
                    });
                };
                deferred = _this.$q.defer();
                _this.Auth.onReady(addBearer);
                return _this.$q.when(deferred.promise);
            };
            this.responseError = function (rejection) {
                console.debug('Intercepting error response');
                if (rejection.status === 401) {
                    _this.Auth.logout();
                }
                return _this.$q.reject(rejection);
            };
        }
        AuthInterceptorService.Factory = function ($q, Auth) {
            return new AuthInterceptorService($q, Auth);
        };
        AuthInterceptorService.$inject = ['$q', 'Auth'];
        return AuthInterceptorService;
    })();
    HawkularAccounts.AuthInterceptorService = AuthInterceptorService;
    HawkularAccounts._module.config(function ($httpProvider) {
        console.debug('Adding AuthInterceptor');
        return $httpProvider.interceptors.push(HawkularAccounts.AuthInterceptorService.Factory);
    });
})(HawkularAccounts || (HawkularAccounts = {}));

var HawkularAccounts;
(function (HawkularAccounts) {
    HawkularAccounts.OrganizationsController = HawkularAccounts._module.controller("HawkularAccounts.OrganizationsController", [
        '$scope',
        'HawkularAccounts.OrganizationService',
        '$log',
        '$location',
        function ($scope, OrganizationService, $log, $location) {
            $scope.organizations = [];
            $scope.loading = true;
            $scope.load = function () {
                $log.debug("Trying to load the organizations for this user.");
                $scope.organizations = OrganizationService.query({}, function () {
                    $log.debug("List of organizations retrieved.");
                    $scope.loading = false;
                }, function () {
                    $log.warn("List of organizations could NOT be retrieved.");
                    $scope.loading = false;
                });
            };
            $scope.showCreateForm = function () {
                $location.path('/accounts/organizations/new');
            };
            $scope.remove = function (organization) {
                organization.$remove().then(function () {
                    $log.debug("Organization removed");
                    $scope.organizations.splice($scope.organizations.indexOf(organization), 1);
                });
            };
            $scope.load();
        }
    ]);
    HawkularAccounts.OrganizationNewController = HawkularAccounts._module.controller("HawkularAccounts.OrganizationNewController", [
        '$scope',
        'HawkularAccounts.OrganizationService',
        '$log',
        '$location',
        function ($scope, OrganizationService, $log, $location) {
            $scope.organizationNew = new OrganizationService({});
            $scope.persist = function () {
                $scope.organizationNew.$save({}, function () {
                    $log.debug("Organization added.");
                    $location.path('/accounts/organizations');
                }, function () {
                    $log.debug("Organization could NOT be added.");
                });
                $log.debug("Trying to persist the organization");
            };
        }
    ]);
    HawkularAccounts.OrganizationService = HawkularAccounts._module.service("HawkularAccounts.OrganizationService", ["$resource", function ($resource) {
        return $resource('http://localhost:8080/hawkular-accounts/organizations/:id', { id: '@id' });
    }]);
    HawkularAccounts._module.requires.push("ngResource");
})(HawkularAccounts || (HawkularAccounts = {}));

angular.module("hawkular-ui-components-accounts-templates", []).run(["$templateCache", function($templateCache) {$templateCache.put("plugins/accounts/html/accounts.html","<div class=\"row\">\n    <div class=\"col-md-12\">\n        <h1>Accounts</h1>\n        Your account can be managed directly at <a href=\"http://localhost:8080/auth/realms/hawkular/account\">Keycloak</a>.\n    </div>\n</div>\n");
$templateCache.put("plugins/accounts/html/organization_new.html","<div class=\"row\">\n    <div class=\"col-md-12\" data-ng-controller=\"HawkularAccounts.OrganizationNewController\">\n        <ol class=\"breadcrumb\">\n            <li><a data-ng-href=\"/\">Hawkular</a></li>\n            <li><a data-ng-href=\"/\">Accounts</a></li>\n            <li><a data-ng-href=\"/accounts/organizations\">Organizations</a></li>\n        </ol>\n        <h1>\n            Add Organization\n        </h1>\n\n        <form role=\"form\" class=\"form-horizontal\">\n            <div class=\"form-group\">\n                <label for=\"name\" class=\"col-md-2 control-label\">Name <span class=\"required\">*</span> </label>\n                <div class=\"col-md-6\">\n                    <input type=\"text\" class=\"form-control\" id=\"name\" placeholder=\"Name\"\n                           data-ng-model=\"organizationNew.name\">\n                </div>\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"description\" class=\"col-md-2 control-label\">Description</label>\n                <div class=\"col-md-6\">\n                    <input type=\"text\" class=\"form-control\" id=\"description\" placeholder=\"Description\"\n                           data-ng-model=\"organizationNew.description\">\n                </div>\n            </div>\n            <div class=\"col-md-8\">\n                <div class=\"pull-right\">\n                    <a data-ng-href=\"/accounts/organizations\" class=\"btn btn-default btn-lg\">Cancel</a>\n                    <button data-ng-click=\"persist()\" type=\"submit\" class=\"btn btn-primary btn-lg\">Save</button>\n                </div>\n            </div>\n\n        </form>\n    </div><!-- /col -->\n</div><!-- /row -->\n");
$templateCache.put("plugins/accounts/html/organizations.html","<div class=\"row\">\n    <div class=\"col-md-12\" data-ng-controller=\"HawkularAccounts.OrganizationsController\">\n        <ol class=\"breadcrumb\">\n            <li><a data-ng-href=\"/\">Hawkular</a></li>\n            <li><a data-ng-href=\"/\">Accounts</a></li>\n            <li><a data-ng-href=\"/accounts/organizations\">Organizations</a></li>\n        </ol>\n        <div class=\"pull-right\">\n            <button class=\"btn btn-primary\" type=\"button\" role=\"button\" data-ng-click=\"showCreateForm()\">Create</button>\n        </div>\n\n        <h1>Organizations</h1>\n        <div class=\"progress-description\" data-ng-show=\"loading\">\n            <div class=\"spinner spinner-xs spinner-inline\"></div> <strong>Loading:</strong> Organizations\n        </div>\n        <div class=\"row\" data-ng-show=\"!organizations.length && !loading\">\n            <div class=\"col-sm-6\">\n                No organizations yet. How about creating one?\n            </div>\n        </div>\n\n        <div data-ng-show=\"organizations.length && !loading\">\n            <table class=\"table table-striped table-bordered\">\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Description</th>\n                        <th>&nbsp;</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr data-ng-repeat=\"organization in organizations\">\n                        <td>{{organization.name}}</td>\n                        <td>{{organization.description}}</td>\n                        <td>\n                            <button type=\"button\" class=\"btn btn-default\" aria-label=\"Remove\" data-ng-click=\"remove(organization)\">\n                                <span class=\"pficon pficon-delete\" aria-hidden=\"true\"></span>\n                            </button>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div><!-- /col -->\n\n</div>\n</div>\n");}]); hawtioPluginLoader.addModule("hawkular-ui-components-accounts-templates");
//# sourceMappingURL=data:application/json;base64,