/// Copyright 2014-2015 Red Hat, Inc. and/or its affiliates
/// and other contributors as indicated by the @author tags.
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///   http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.


var HawkularAccounts;
(function (HawkularAccounts) {
    HawkularAccounts.pluginName = "hawkular-accounts";
    HawkularAccounts.log = Logger.get(HawkularAccounts.pluginName);
    HawkularAccounts.templatePath = "plugins/accounts/html";
})(HawkularAccounts || (HawkularAccounts = {}));

var HawkularAccounts;
(function (HawkularAccounts) {
    HawkularAccounts._module = angular.module(HawkularAccounts.pluginName, []);
    var accountsTab = undefined;
    HawkularAccounts._module.config(['$locationProvider', '$routeProvider', 'HawtioNavBuilderProvider', function ($locationProvider, $routeProvider, builder) {
        accountsTab = builder.create().id(HawkularAccounts.pluginName).title(function () { return "Accounts"; }).href(function () { return "/accounts"; }).subPath("My account", "accounts", builder.join(HawkularAccounts.templatePath, 'accounts.html')).subPath("Organizations", "organizations", builder.join(HawkularAccounts.templatePath, 'organizations.html')).build();
        builder.configureRouting($routeProvider, accountsTab);
        $routeProvider.when('/accounts/organizations/new', { templateUrl: builder.join(HawkularAccounts.templatePath, 'organization_new.html') });
        $locationProvider.html5Mode(true);
    }]);
    HawkularAccounts._module.run(['HawtioNav', function (HawtioNav) {
    }]);
    hawtioPluginLoader.addModule(HawkularAccounts.pluginName);
})(HawkularAccounts || (HawkularAccounts = {}));

var HawkularAccounts;
(function (HawkularAccounts) {
    var AuthService = (function () {
        function AuthService($rootScope, $window) {
            var _this = this;
            this.$rootScope = $rootScope;
            this.$window = $window;
            this.onReady(function () {
                _this.$rootScope['username'] = _this.keycloak().idTokenParsed.name;
            });
        }
        AuthService.prototype.keycloak = function () {
            return this.$window['keycloak'];
        };
        AuthService.prototype.onReady = function (callback) {
            var _this = this;
            if (this.$window['keycloakReady'] === true) {
                callback();
            }
            else {
                this.keycloak().onReady = function () {
                    _this.$window['keycloakReady'] = true;
                    callback();
                };
            }
        };
        AuthService.prototype.logout = function () {
            return this.keycloak().logout();
        };
        AuthService.prototype.updateToken = function (periodicity) {
            return this.keycloak().updateToken(periodicity);
        };
        AuthService.prototype.token = function () {
            return this.keycloak().token;
        };
        AuthService.prototype.isAuthenticated = function () {
            return this.keycloak() && this.keycloak().authenticated;
        };
        AuthService.$inject = ['$rootScope', '$window'];
        return AuthService;
    })();
    HawkularAccounts.AuthService = AuthService;
    HawkularAccounts._module.service('Auth', AuthService);
})(HawkularAccounts || (HawkularAccounts = {}));

var HawkularAccounts;
(function (HawkularAccounts) {
    var AuthInterceptorService = (function () {
        function AuthInterceptorService($q, Auth) {
            var _this = this;
            this.$q = $q;
            this.Auth = Auth;
            this.request = function (request) {
                console.debug('Intercepting request');
                var BASE_URL = "http://localhost:8080/hawkular-";
                var addBearer, deferred;
                if (request.url.indexOf(BASE_URL) === -1) {
                    console.debug('The requested URL is not part of the base URL. Base URL: ' + BASE_URL + ', requested URL: ' + request.url);
                    return request;
                }
                addBearer = function () {
                    return _this.Auth.updateToken(5).success(function () {
                        var token = _this.Auth.token();
                        console.debug('Adding bearer token to the request: ' + token);
                        request.headers.Authorization = 'Bearer ' + token;
                        deferred.notify();
                        return deferred.resolve(request);
                    }).error(function () {
                        console.log("Couldn't update token");
                    });
                };
                deferred = _this.$q.defer();
                _this.Auth.onReady(addBearer);
                return _this.$q.when(deferred.promise);
            };
            this.responseError = function (rejection) {
                console.debug('Intercepting error response');
                if (rejection.status === 401) {
                    _this.Auth.logout();
                }
                return _this.$q.reject(rejection);
            };
        }
        AuthInterceptorService.Factory = function ($q, Auth) {
            return new AuthInterceptorService($q, Auth);
        };
        AuthInterceptorService.$inject = ['$q', 'Auth'];
        return AuthInterceptorService;
    })();
    HawkularAccounts.AuthInterceptorService = AuthInterceptorService;
    HawkularAccounts._module.config(function ($httpProvider) {
        console.debug('Adding AuthInterceptor');
        return $httpProvider.interceptors.push(HawkularAccounts.AuthInterceptorService.Factory);
    });
})(HawkularAccounts || (HawkularAccounts = {}));

var HawkularAccounts;
(function (HawkularAccounts) {
    HawkularAccounts.OrganizationsController = HawkularAccounts._module.controller("HawkularAccounts.OrganizationsController", [
        '$scope',
        'HawkularAccounts.OrganizationService',
        '$log',
        '$location',
        function ($scope, OrganizationService, $log, $location) {
            $scope.organizations = [];
            $scope.loading = true;
            $scope.load = function () {
                $log.debug("Trying to load the organizations for this user.");
                $scope.organizations = OrganizationService.query({}, function () {
                    $log.debug("List of organizations retrieved.");
                    $scope.loading = false;
                }, function () {
                    $log.warn("List of organizations could NOT be retrieved.");
                    $scope.loading = false;
                });
            };
            $scope.showCreateForm = function () {
                $location.path('/accounts/organizations/new');
            };
            $scope.remove = function (organization) {
                organization.$remove().then(function () {
                    $log.debug("Organization removed");
                    $scope.organizations.splice($scope.organizations.indexOf(organization), 1);
                });
            };
            $scope.load();
        }
    ]);
    HawkularAccounts.OrganizationNewController = HawkularAccounts._module.controller("HawkularAccounts.OrganizationNewController", [
        '$scope',
        'HawkularAccounts.OrganizationService',
        '$log',
        '$location',
        function ($scope, OrganizationService, $log, $location) {
            $scope.organizationNew = new OrganizationService({});
            $scope.persist = function () {
                $scope.organizationNew.$save({}, function () {
                    $log.debug("Organization added.");
                    $location.path('/accounts/organizations');
                }, function () {
                    $log.debug("Organization could NOT be added.");
                });
                $log.debug("Trying to persist the organization");
            };
        }
    ]);
    HawkularAccounts.OrganizationService = HawkularAccounts._module.service("HawkularAccounts.OrganizationService", ["$resource", function ($resource) {
        return $resource('http://localhost:8080/hawkular-accounts/organizations/:id', { id: '@id' });
    }]);
    HawkularAccounts._module.requires.push("ngResource");
})(HawkularAccounts || (HawkularAccounts = {}));

angular.module("hawkular-ui-components-accounts-templates", []).run(["$templateCache", function($templateCache) {$templateCache.put("plugins/accounts/html/accounts.html","<div class=\"row\">\n    <div class=\"col-md-12\">\n        <h1>Accounts</h1>\n        Your account can be managed directly at <a href=\"http://localhost:8080/auth/realms/hawkular/account\">Keycloak</a>.\n    </div>\n</div>\n");
$templateCache.put("plugins/accounts/html/organization_new.html","<div class=\"row\">\n    <div class=\"col-md-12\" data-ng-controller=\"HawkularAccounts.OrganizationNewController\">\n        <ol class=\"breadcrumb\">\n            <li><a data-ng-href=\"/\">Hawkular</a></li>\n            <li><a data-ng-href=\"/\">Accounts</a></li>\n            <li><a data-ng-href=\"/accounts/organizations\">Organizations</a></li>\n        </ol>\n        <h1>\n            Add Organization\n        </h1>\n\n        <form role=\"form\" class=\"form-horizontal\">\n            <div class=\"form-group\">\n                <label for=\"name\" class=\"col-md-2 control-label\">Name <span class=\"required\">*</span> </label>\n                <div class=\"col-md-6\">\n                    <input type=\"text\" class=\"form-control\" id=\"name\" placeholder=\"Name\"\n                           data-ng-model=\"organizationNew.name\">\n                </div>\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"description\" class=\"col-md-2 control-label\">Description</label>\n                <div class=\"col-md-6\">\n                    <input type=\"text\" class=\"form-control\" id=\"description\" placeholder=\"Description\"\n                           data-ng-model=\"organizationNew.description\">\n                </div>\n            </div>\n            <div class=\"col-md-8\">\n                <div class=\"pull-right\">\n                    <a data-ng-href=\"/accounts/organizations\" class=\"btn btn-default btn-lg\">Cancel</a>\n                    <button data-ng-click=\"persist()\" type=\"submit\" class=\"btn btn-primary btn-lg\">Save</button>\n                </div>\n            </div>\n\n        </form>\n    </div><!-- /col -->\n</div><!-- /row -->\n");
$templateCache.put("plugins/accounts/html/organizations.html","<div class=\"row\">\n    <div class=\"col-md-12\" data-ng-controller=\"HawkularAccounts.OrganizationsController\">\n        <ol class=\"breadcrumb\">\n            <li><a data-ng-href=\"/\">Hawkular</a></li>\n            <li><a data-ng-href=\"/\">Accounts</a></li>\n            <li><a data-ng-href=\"/accounts/organizations\">Organizations</a></li>\n        </ol>\n        <div class=\"pull-right\">\n            <button class=\"btn btn-primary\" type=\"button\" role=\"button\" data-ng-click=\"showCreateForm()\">Create</button>\n        </div>\n\n        <h1>Organizations</h1>\n        <div class=\"progress-description\" data-ng-show=\"loading\">\n            <div class=\"spinner spinner-xs spinner-inline\"></div> <strong>Loading:</strong> Organizations\n        </div>\n        <div class=\"row\" data-ng-show=\"!organizations.length && !loading\">\n            <div class=\"col-sm-6\">\n                No organizations yet. How about creating one?\n            </div>\n        </div>\n\n        <div data-ng-show=\"organizations.length && !loading\">\n            <table class=\"table table-striped table-bordered\">\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Description</th>\n                        <th>&nbsp;</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr data-ng-repeat=\"organization in organizations\">\n                        <td>{{organization.name}}</td>\n                        <td>{{organization.description}}</td>\n                        <td>\n                            <button type=\"button\" class=\"btn btn-default\" aria-label=\"Remove\" data-ng-click=\"remove(organization)\">\n                                <span class=\"pficon pficon-delete\" aria-hidden=\"true\"></span>\n                            </button>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div><!-- /col -->\n\n</div>\n</div>\n");}]); hawtioPluginLoader.addModule("hawkular-ui-components-accounts-templates");
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpY2VuY2UudHh0IiwiL3NvdXJjZS9pbmNsdWRlcy5qcyIsIi9hY2NvdW50cy90cy9hY2NvdW50c0dsb2JhbHMudHMiLCIvYWNjb3VudHMvdHMvYWNjb3VudHNQbHVnaW4udHMiLCIvYWNjb3VudHMvdHMvYXV0aC50cyIsIi9hY2NvdW50cy90cy9hdXRoSW50ZXJjZXB0b3IudHMiLCIvYWNjb3VudHMvdHMvb3JnYW5pemF0aW9ucy50cyIsInRlbXBsYXRlcy5qcyJdLCJuYW1lcyI6WyJIYXdrdWxhckFjY291bnRzIiwiSGF3a3VsYXJBY2NvdW50cy5BdXRoU2VydmljZSIsIkhhd2t1bGFyQWNjb3VudHMuQXV0aFNlcnZpY2UuY29uc3RydWN0b3IiLCJIYXdrdWxhckFjY291bnRzLkF1dGhTZXJ2aWNlLmtleWNsb2FrIiwiSGF3a3VsYXJBY2NvdW50cy5BdXRoU2VydmljZS5vblJlYWR5IiwiSGF3a3VsYXJBY2NvdW50cy5BdXRoU2VydmljZS5sb2dvdXQiLCJIYXdrdWxhckFjY291bnRzLkF1dGhTZXJ2aWNlLnVwZGF0ZVRva2VuIiwiSGF3a3VsYXJBY2NvdW50cy5BdXRoU2VydmljZS50b2tlbiIsIkhhd2t1bGFyQWNjb3VudHMuQXV0aFNlcnZpY2UuaXNBdXRoZW50aWNhdGVkIiwiSGF3a3VsYXJBY2NvdW50cy5BdXRoSW50ZXJjZXB0b3JTZXJ2aWNlIiwiSGF3a3VsYXJBY2NvdW50cy5BdXRoSW50ZXJjZXB0b3JTZXJ2aWNlLmNvbnN0cnVjdG9yIiwiSGF3a3VsYXJBY2NvdW50cy5BdXRoSW50ZXJjZXB0b3JTZXJ2aWNlLkZhY3RvcnkiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNiQTtBQUNBO0FDZUEsSUFBTyxnQkFBZ0IsQ0FJdEI7QUFKRCxXQUFPLGdCQUFnQixFQUFDLENBQUM7SUFDVkEsMkJBQVVBLEdBQUdBLG1CQUFtQkEsQ0FBQ0E7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Z0IsUUErRHRCOztBQy9FRDtBQUNBO0FBQ0EiLCJmaWxlIjoiaGF3a3VsYXItdWktY29tcG9uZW50cy1hY2NvdW50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyBDb3B5cmlnaHQgMjAxNC0yMDE1IFJlZCBIYXQsIEluYy4gYW5kL29yIGl0cyBhZmZpbGlhdGVzXG4vLy8gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycyBhcyBpbmRpY2F0ZWQgYnkgdGhlIEBhdXRob3IgdGFncy5cbi8vL1xuLy8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy8vXG4vLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vL1xuLy8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLiIsbnVsbCwiLy8vIENvcHlyaWdodCAyMDE0LTIwMTUgUmVkIEhhdCwgSW5jLiBhbmQvb3IgaXRzIGFmZmlsaWF0ZXNcbi8vLyBhbmQgb3RoZXIgY29udHJpYnV0b3JzIGFzIGluZGljYXRlZCBieSB0aGUgQGF1dGhvciB0YWdzLlxuLy8vXG4vLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vLy9cbi8vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy8vXG4vLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9pbmNsdWRlcy50c1wiLz5cbm1vZHVsZSBIYXdrdWxhckFjY291bnRzIHtcbiAgICBleHBvcnQgdmFyIHBsdWdpbk5hbWUgPSBcImhhd2t1bGFyLWFjY291bnRzXCI7XG4gICAgZXhwb3J0IHZhciBsb2c6TG9nZ2luZy5Mb2dnZXIgPSBMb2dnZXIuZ2V0KHBsdWdpbk5hbWUpO1xuICAgIGV4cG9ydCB2YXIgdGVtcGxhdGVQYXRoID0gXCJwbHVnaW5zL2FjY291bnRzL2h0bWxcIjtcbn1cbiIsIi8vLyBDb3B5cmlnaHQgMjAxNC0yMDE1IFJlZCBIYXQsIEluYy4gYW5kL29yIGl0cyBhZmZpbGlhdGVzXG4vLy8gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycyBhcyBpbmRpY2F0ZWQgYnkgdGhlIEBhdXRob3IgdGFncy5cbi8vL1xuLy8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy8vXG4vLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vL1xuLy8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vaW5jbHVkZXMudHNcIi8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiYWNjb3VudHNHbG9iYWxzLnRzXCIvPlxubW9kdWxlIEhhd2t1bGFyQWNjb3VudHMge1xuICAgIGV4cG9ydCB2YXIgX21vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKEhhd2t1bGFyQWNjb3VudHMucGx1Z2luTmFtZSwgW10pO1xuICAgIHZhciBhY2NvdW50c1RhYjphbnkgPSB1bmRlZmluZWQ7XG5cbiAgICBfbW9kdWxlLmNvbmZpZyhbJyRsb2NhdGlvblByb3ZpZGVyJywgJyRyb3V0ZVByb3ZpZGVyJywgJ0hhd3Rpb05hdkJ1aWxkZXJQcm92aWRlcicsICgkbG9jYXRpb25Qcm92aWRlciwgJHJvdXRlUHJvdmlkZXI6bmcucm91dGUuSVJvdXRlUHJvdmlkZXIsIGJ1aWxkZXI6SGF3dGlvTWFpbk5hdi5CdWlsZGVyRmFjdG9yeSkgPT4ge1xuICAgICAgICBhY2NvdW50c1RhYiA9IGJ1aWxkZXIuY3JlYXRlKClcbiAgICAgICAgICAgIC5pZChIYXdrdWxhckFjY291bnRzLnBsdWdpbk5hbWUpXG4gICAgICAgICAgICAudGl0bGUoKCkgPT4gXCJBY2NvdW50c1wiKVxuICAgICAgICAgICAgLmhyZWYoKCkgPT4gXCIvYWNjb3VudHNcIilcbiAgICAgICAgICAgIC5zdWJQYXRoKFwiTXkgYWNjb3VudFwiLCBcImFjY291bnRzXCIsIGJ1aWxkZXIuam9pbihIYXdrdWxhckFjY291bnRzLnRlbXBsYXRlUGF0aCwgJ2FjY291bnRzLmh0bWwnKSlcbiAgICAgICAgICAgIC5zdWJQYXRoKFwiT3JnYW5pemF0aW9uc1wiLCBcIm9yZ2FuaXphdGlvbnNcIiwgYnVpbGRlci5qb2luKEhhd2t1bGFyQWNjb3VudHMudGVtcGxhdGVQYXRoLCAnb3JnYW5pemF0aW9ucy5odG1sJykpXG4gICAgICAgICAgICAuYnVpbGQoKTtcbiAgICAgICAgYnVpbGRlci5jb25maWd1cmVSb3V0aW5nKCRyb3V0ZVByb3ZpZGVyLCBhY2NvdW50c1RhYik7XG5cbiAgICAgICAgJHJvdXRlUHJvdmlkZXIud2hlbignL2FjY291bnRzL29yZ2FuaXphdGlvbnMvbmV3Jywge3RlbXBsYXRlVXJsOiBidWlsZGVyLmpvaW4oSGF3a3VsYXJBY2NvdW50cy50ZW1wbGF0ZVBhdGgsICdvcmdhbml6YXRpb25fbmV3Lmh0bWwnKX0pO1xuICAgICAgICAkbG9jYXRpb25Qcm92aWRlci5odG1sNU1vZGUodHJ1ZSk7XG4gICAgfV0pO1xuXG4gICAgX21vZHVsZS5ydW4oWydIYXd0aW9OYXYnLCAoSGF3dGlvTmF2Okhhd3Rpb01haW5OYXYuUmVnaXN0cnkpID0+IHtcbiAgICAgICAgLy9IYXd0aW9OYXYuYWRkKGFjY291bnRzVGFiKTtcbiAgICB9XSk7XG5cbiAgICBoYXd0aW9QbHVnaW5Mb2FkZXIuYWRkTW9kdWxlKEhhd2t1bGFyQWNjb3VudHMucGx1Z2luTmFtZSk7XG59XG4iLCIvLy8gQ29weXJpZ2h0IDIwMTQtMjAxNSBSZWQgSGF0LCBJbmMuIGFuZC9vciBpdHMgYWZmaWxpYXRlc1xuLy8vIGFuZCBvdGhlciBjb250cmlidXRvcnMgYXMgaW5kaWNhdGVkIGJ5IHRoZSBAYXV0aG9yIHRhZ3MuXG4vLy9cbi8vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vL1xuLy8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vLy9cbi8vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImFjY291bnRzUGx1Z2luLnRzXCIvPlxuLyoqXG4gKiBBdHRlbnRpb246IHRoaXMgY2xhc3Mgd2lsbCBwcm9iYWJseSBiZSByZXBsYWNlZCBieSB0aGUgcHJvcGVyIGhhd3QuaW8gS2V5Y2xvYWsgaW50ZWdyYXRpb24uXG4gKiBXaGlsZSBpdCdzIG5vdCBkb25lLCB3ZSBhcmUgZG9pbmcgdGhlIGludGVncmF0aW9uIGJ5IG91cnNlbHZlcy5cbiAqL1xubW9kdWxlIEhhd2t1bGFyQWNjb3VudHMge1xuXG4gICAgZXhwb3J0IGNsYXNzIEF1dGhTZXJ2aWNlIHtcbiAgICAgICAgcHVibGljIHN0YXRpYyAkaW5qZWN0ID0gWyckcm9vdFNjb3BlJywgJyR3aW5kb3cnXTtcbiAgICAgICAgY29uc3RydWN0b3IocHJpdmF0ZSAkcm9vdFNjb3BlOm5nLklSb290U2NvcGVTZXJ2aWNlLCBwcml2YXRlICR3aW5kb3c6bmcuSVdpbmRvd1NlcnZpY2UpIHtcbiAgICAgICAgICB0aGlzLm9uUmVhZHkoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy4kcm9vdFNjb3BlWyd1c2VybmFtZSddID0gdGhpcy5rZXljbG9haygpLmlkVG9rZW5QYXJzZWQubmFtZTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUga2V5Y2xvYWsoKTphbnkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJHdpbmRvd1sna2V5Y2xvYWsnXTtcbiAgICAgICAgfVxuXG4gICAgICAgIG9uUmVhZHkoY2FsbGJhY2spOmFueSB7XG4gICAgICAgICAgICBpZiAodGhpcy4kd2luZG93WydrZXljbG9ha1JlYWR5J10gPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy5rZXljbG9haygpLm9uUmVhZHkgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy4kd2luZG93WydrZXljbG9ha1JlYWR5J10gPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsb2dvdXQoKTp2b2lkIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmtleWNsb2FrKCkubG9nb3V0KCk7XG4gICAgICAgIH1cblxuICAgICAgICB1cGRhdGVUb2tlbihwZXJpb2RpY2l0eTpudW1iZXIpOmFueSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5rZXljbG9haygpLnVwZGF0ZVRva2VuKHBlcmlvZGljaXR5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRva2VuKCk6c3RyaW5nIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmtleWNsb2FrKCkudG9rZW47XG4gICAgICAgIH1cblxuICAgICAgICBpc0F1dGhlbnRpY2F0ZWQoKTpib29sZWFuIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmtleWNsb2FrKCkgJiYgdGhpcy5rZXljbG9haygpLmF1dGhlbnRpY2F0ZWQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfbW9kdWxlLnNlcnZpY2UoJ0F1dGgnLCBBdXRoU2VydmljZSk7XG59XG4iLCIvLy8gQ29weXJpZ2h0IDIwMTQtMjAxNSBSZWQgSGF0LCBJbmMuIGFuZC9vciBpdHMgYWZmaWxpYXRlc1xuLy8vIGFuZCBvdGhlciBjb250cmlidXRvcnMgYXMgaW5kaWNhdGVkIGJ5IHRoZSBAYXV0aG9yIHRhZ3MuXG4vLy9cbi8vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vL1xuLy8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vLy9cbi8vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImFjY291bnRzUGx1Z2luLnRzXCIvPlxuLyoqXG4gKiBBdHRlbnRpb246IHRoaXMgY2xhc3Mgd2lsbCBwcm9iYWJseSBiZSByZXBsYWNlZCBieSB0aGUgcHJvcGVyIGhhd3QuaW8gS2V5Y2xvYWsgaW50ZWdyYXRpb24uXG4gKiBXaGlsZSBpdCdzIG5vdCBkb25lLCB3ZSBhcmUgZG9pbmcgdGhlIGludGVncmF0aW9uIGJ5IG91cnNlbHZlcy5cbiAqL1xubW9kdWxlIEhhd2t1bGFyQWNjb3VudHMge1xuXG4gICAgZXhwb3J0IGNsYXNzIEF1dGhJbnRlcmNlcHRvclNlcnZpY2Uge1xuICAgICAgICBwdWJsaWMgc3RhdGljICRpbmplY3QgPSBbJyRxJywgJ0F1dGgnXTtcblxuICAgICAgICBwdWJsaWMgc3RhdGljIEZhY3RvcnkoJHE6bmcuSVFTZXJ2aWNlLCBBdXRoOkhhd2t1bGFyQWNjb3VudHMuQXV0aFNlcnZpY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQXV0aEludGVyY2VwdG9yU2VydmljZSgkcSwgQXV0aCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdHJ1Y3Rvcihwcml2YXRlICRxOm5nLklRU2VydmljZSwgcHJpdmF0ZSBBdXRoOkhhd2t1bGFyQWNjb3VudHMuQXV0aFNlcnZpY2UpIHtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcXVlc3QgPSAocmVxdWVzdCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5kZWJ1ZygnSW50ZXJjZXB0aW5nIHJlcXVlc3QnKTtcbiAgICAgICAgICAgIHZhciBCQVNFX1VSTCA9IFwiaHR0cDovL2xvY2FsaG9zdDo4MDgwL2hhd2t1bGFyLVwiO1xuICAgICAgICAgICAgdmFyIGFkZEJlYXJlciwgZGVmZXJyZWQ7XG4gICAgICAgICAgICBpZiAocmVxdWVzdC51cmwuaW5kZXhPZihCQVNFX1VSTCkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5kZWJ1ZygnVGhlIHJlcXVlc3RlZCBVUkwgaXMgbm90IHBhcnQgb2YgdGhlIGJhc2UgVVJMLiBCYXNlIFVSTDogJyArIEJBU0VfVVJMICsgJywgcmVxdWVzdGVkIFVSTDogJyArIHJlcXVlc3QudXJsKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVxdWVzdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFkZEJlYXJlciA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5BdXRoLnVwZGF0ZVRva2VuKDUpLnN1Y2Nlc3MoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRva2VuID0gdGhpcy5BdXRoLnRva2VuKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmRlYnVnKCdBZGRpbmcgYmVhcmVyIHRva2VuIHRvIHRoZSByZXF1ZXN0OiAnICsgdG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdC5oZWFkZXJzLkF1dGhvcml6YXRpb24gPSAnQmVhcmVyICcgKyB0b2tlbjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLm5vdGlmeSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnJlc29sdmUocmVxdWVzdCk7XG4gICAgICAgICAgICAgICAgICAgIH0pLmVycm9yKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQ291bGRuJ3QgdXBkYXRlIHRva2VuXCIpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBkZWZlcnJlZCA9IHRoaXMuJHEuZGVmZXIoKTtcbiAgICAgICAgICAgIHRoaXMuQXV0aC5vblJlYWR5KGFkZEJlYXJlcik7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kcS53aGVuKGRlZmVycmVkLnByb21pc2UpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJlc3BvbnNlRXJyb3IgPSAocmVqZWN0aW9uKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmRlYnVnKCdJbnRlcmNlcHRpbmcgZXJyb3IgcmVzcG9uc2UnKTtcbiAgICAgICAgICAgIGlmIChyZWplY3Rpb24uc3RhdHVzID09PSA0MDEpIHtcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBub3RpZnkgdGhlIHVzZXIgdGhhdCB0aGUgc2Vzc2lvbiBpcyBleHBpcmVkXG4gICAgICAgICAgICAgICAgdGhpcy5BdXRoLmxvZ291dCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJHEucmVqZWN0KHJlamVjdGlvbik7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgX21vZHVsZS5jb25maWcoZnVuY3Rpb24oJGh0dHBQcm92aWRlcikge1xuICAgICAgICBjb25zb2xlLmRlYnVnKCdBZGRpbmcgQXV0aEludGVyY2VwdG9yJyk7XG4gICAgICAgIHJldHVybiAkaHR0cFByb3ZpZGVyLmludGVyY2VwdG9ycy5wdXNoKEhhd2t1bGFyQWNjb3VudHMuQXV0aEludGVyY2VwdG9yU2VydmljZS5GYWN0b3J5KTtcbiAgICB9KTtcbn1cbiIsIi8vLyBDb3B5cmlnaHQgMjAxNC0yMDE1IFJlZCBIYXQsIEluYy4gYW5kL29yIGl0cyBhZmZpbGlhdGVzXG4vLy8gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycyBhcyBpbmRpY2F0ZWQgYnkgdGhlIEBhdXRob3IgdGFncy5cbi8vL1xuLy8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy8vXG4vLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vL1xuLy8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiYWNjb3VudHNQbHVnaW4udHNcIi8+XG5tb2R1bGUgSGF3a3VsYXJBY2NvdW50cyB7XG5cbiAgICBleHBvcnQgdmFyIE9yZ2FuaXphdGlvbnNDb250cm9sbGVyID0gX21vZHVsZS5jb250cm9sbGVyKFwiSGF3a3VsYXJBY2NvdW50cy5Pcmdhbml6YXRpb25zQ29udHJvbGxlclwiLCBbXG4gICAgICAgICckc2NvcGUnLCAnSGF3a3VsYXJBY2NvdW50cy5Pcmdhbml6YXRpb25TZXJ2aWNlJywgJyRsb2cnLCAnJGxvY2F0aW9uJyxcbiAgICAgICAgKCRzY29wZSwgT3JnYW5pemF0aW9uU2VydmljZSwgJGxvZywgJGxvY2F0aW9uKSA9PiB7XG5cbiAgICAgICAgICAgICRzY29wZS5vcmdhbml6YXRpb25zID0gW107XG4gICAgICAgICAgICAkc2NvcGUubG9hZGluZyA9IHRydWU7XG4gICAgICAgICAgICAkc2NvcGUubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAkbG9nLmRlYnVnKFwiVHJ5aW5nIHRvIGxvYWQgdGhlIG9yZ2FuaXphdGlvbnMgZm9yIHRoaXMgdXNlci5cIik7XG4gICAgICAgICAgICAgICAgJHNjb3BlLm9yZ2FuaXphdGlvbnMgPSBPcmdhbml6YXRpb25TZXJ2aWNlLnF1ZXJ5KHt9LFxuICAgICAgICAgICAgICAgICAgICAoKT0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRsb2cuZGVidWcoXCJMaXN0IG9mIG9yZ2FuaXphdGlvbnMgcmV0cmlldmVkLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRsb2cud2FybihcIkxpc3Qgb2Ygb3JnYW5pemF0aW9ucyBjb3VsZCBOT1QgYmUgcmV0cmlldmVkLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICRzY29wZS5zaG93Q3JlYXRlRm9ybSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL2FjY291bnRzL29yZ2FuaXphdGlvbnMvbmV3Jyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgJHNjb3BlLnJlbW92ZSA9IChvcmdhbml6YXRpb24pID0+IHtcbiAgICAgICAgICAgICAgICBvcmdhbml6YXRpb24uJHJlbW92ZSgpLnRoZW4oXG4gICAgICAgICAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlbW92ZWQhXG4gICAgICAgICAgICAgICAgICAgICAgICAkbG9nLmRlYnVnKFwiT3JnYW5pemF0aW9uIHJlbW92ZWRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub3JnYW5pemF0aW9ucy5zcGxpY2UoJHNjb3BlLm9yZ2FuaXphdGlvbnMuaW5kZXhPZihvcmdhbml6YXRpb24pLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAkc2NvcGUubG9hZCgpO1xuICAgICAgICB9XSk7XG5cbiAgICBleHBvcnQgdmFyIE9yZ2FuaXphdGlvbk5ld0NvbnRyb2xsZXIgPSBfbW9kdWxlLmNvbnRyb2xsZXIoXCJIYXdrdWxhckFjY291bnRzLk9yZ2FuaXphdGlvbk5ld0NvbnRyb2xsZXJcIiwgW1xuICAgICAgICAnJHNjb3BlJywgJ0hhd2t1bGFyQWNjb3VudHMuT3JnYW5pemF0aW9uU2VydmljZScsICckbG9nJywgJyRsb2NhdGlvbicsXG4gICAgICAgICgkc2NvcGUsIE9yZ2FuaXphdGlvblNlcnZpY2UsICRsb2csICRsb2NhdGlvbikgPT4ge1xuXG4gICAgICAgICAgICAkc2NvcGUub3JnYW5pemF0aW9uTmV3ID0gbmV3IE9yZ2FuaXphdGlvblNlcnZpY2Uoe30pO1xuICAgICAgICAgICAgJHNjb3BlLnBlcnNpc3QgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLm9yZ2FuaXphdGlvbk5ldy4kc2F2ZSh7fSxcbiAgICAgICAgICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3VjY2Vzc1xuICAgICAgICAgICAgICAgICAgICAgICAgJGxvZy5kZWJ1ZyhcIk9yZ2FuaXphdGlvbiBhZGRlZC5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL2FjY291bnRzL29yZ2FuaXphdGlvbnMnKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXJyb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICRsb2cuZGVidWcoXCJPcmdhbml6YXRpb24gY291bGQgTk9UIGJlIGFkZGVkLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgJGxvZy5kZWJ1ZyhcIlRyeWluZyB0byBwZXJzaXN0IHRoZSBvcmdhbml6YXRpb25cIik7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XSk7XG5cbiAgICBleHBvcnQgdmFyIE9yZ2FuaXphdGlvblNlcnZpY2UgPSBfbW9kdWxlLnNlcnZpY2UoXCJIYXdrdWxhckFjY291bnRzLk9yZ2FuaXphdGlvblNlcnZpY2VcIiwgW1wiJHJlc291cmNlXCIsICgkcmVzb3VyY2UpID0+IHtcbiAgICAgICAgcmV0dXJuICRyZXNvdXJjZSgnaHR0cDovL2xvY2FsaG9zdDo4MDgwL2hhd2t1bGFyLWFjY291bnRzL29yZ2FuaXphdGlvbnMvOmlkJywge2lkOidAaWQnfSk7XG4gICAgfV0pO1xuXG4gICAgX21vZHVsZS5yZXF1aXJlcy5wdXNoKFwibmdSZXNvdXJjZVwiKTtcbn1cbiIsImFuZ3VsYXIubW9kdWxlKFwiaGF3a3VsYXItdWktY29tcG9uZW50cy1hY2NvdW50cy10ZW1wbGF0ZXNcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkgeyR0ZW1wbGF0ZUNhY2hlLnB1dChcInBsdWdpbnMvYWNjb3VudHMvaHRtbC9hY2NvdW50cy5odG1sXCIsXCI8ZGl2IGNsYXNzPVxcXCJyb3dcXFwiPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtMTJcXFwiPlxcbiAgICAgICAgPGgxPkFjY291bnRzPC9oMT5cXG4gICAgICAgIFlvdXIgYWNjb3VudCBjYW4gYmUgbWFuYWdlZCBkaXJlY3RseSBhdCA8YSBocmVmPVxcXCJodHRwOi8vbG9jYWxob3N0OjgwODAvYXV0aC9yZWFsbXMvaGF3a3VsYXIvYWNjb3VudFxcXCI+S2V5Y2xvYWs8L2E+LlxcbiAgICA8L2Rpdj5cXG48L2Rpdj5cXG5cIik7XG4kdGVtcGxhdGVDYWNoZS5wdXQoXCJwbHVnaW5zL2FjY291bnRzL2h0bWwvb3JnYW5pemF0aW9uX25ldy5odG1sXCIsXCI8ZGl2IGNsYXNzPVxcXCJyb3dcXFwiPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtMTJcXFwiIGRhdGEtbmctY29udHJvbGxlcj1cXFwiSGF3a3VsYXJBY2NvdW50cy5Pcmdhbml6YXRpb25OZXdDb250cm9sbGVyXFxcIj5cXG4gICAgICAgIDxvbCBjbGFzcz1cXFwiYnJlYWRjcnVtYlxcXCI+XFxuICAgICAgICAgICAgPGxpPjxhIGRhdGEtbmctaHJlZj1cXFwiL1xcXCI+SGF3a3VsYXI8L2E+PC9saT5cXG4gICAgICAgICAgICA8bGk+PGEgZGF0YS1uZy1ocmVmPVxcXCIvXFxcIj5BY2NvdW50czwvYT48L2xpPlxcbiAgICAgICAgICAgIDxsaT48YSBkYXRhLW5nLWhyZWY9XFxcIi9hY2NvdW50cy9vcmdhbml6YXRpb25zXFxcIj5Pcmdhbml6YXRpb25zPC9hPjwvbGk+XFxuICAgICAgICA8L29sPlxcbiAgICAgICAgPGgxPlxcbiAgICAgICAgICAgIEFkZCBPcmdhbml6YXRpb25cXG4gICAgICAgIDwvaDE+XFxuXFxuICAgICAgICA8Zm9ybSByb2xlPVxcXCJmb3JtXFxcIiBjbGFzcz1cXFwiZm9ybS1ob3Jpem9udGFsXFxcIj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cXFwibmFtZVxcXCIgY2xhc3M9XFxcImNvbC1tZC0yIGNvbnRyb2wtbGFiZWxcXFwiPk5hbWUgPHNwYW4gY2xhc3M9XFxcInJlcXVpcmVkXFxcIj4qPC9zcGFuPiA8L2xhYmVsPlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtNlxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwidGV4dFxcXCIgY2xhc3M9XFxcImZvcm0tY29udHJvbFxcXCIgaWQ9XFxcIm5hbWVcXFwiIHBsYWNlaG9sZGVyPVxcXCJOYW1lXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbmctbW9kZWw9XFxcIm9yZ2FuaXphdGlvbk5ldy5uYW1lXFxcIj5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPC9kaXY+XFxuXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XFxcImRlc2NyaXB0aW9uXFxcIiBjbGFzcz1cXFwiY29sLW1kLTIgY29udHJvbC1sYWJlbFxcXCI+RGVzY3JpcHRpb248L2xhYmVsPlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtNlxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwidGV4dFxcXCIgY2xhc3M9XFxcImZvcm0tY29udHJvbFxcXCIgaWQ9XFxcImRlc2NyaXB0aW9uXFxcIiBwbGFjZWhvbGRlcj1cXFwiRGVzY3JpcHRpb25cXFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1uZy1tb2RlbD1cXFwib3JnYW5pemF0aW9uTmV3LmRlc2NyaXB0aW9uXFxcIj5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLThcXFwiPlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJwdWxsLXJpZ2h0XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxhIGRhdGEtbmctaHJlZj1cXFwiL2FjY291bnRzL29yZ2FuaXphdGlvbnNcXFwiIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHQgYnRuLWxnXFxcIj5DYW5jZWw8L2E+XFxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGRhdGEtbmctY2xpY2s9XFxcInBlcnNpc3QoKVxcXCIgdHlwZT1cXFwic3VibWl0XFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1wcmltYXJ5IGJ0bi1sZ1xcXCI+U2F2ZTwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG5cXG4gICAgICAgIDwvZm9ybT5cXG4gICAgPC9kaXY+PCEtLSAvY29sIC0tPlxcbjwvZGl2PjwhLS0gL3JvdyAtLT5cXG5cIik7XG4kdGVtcGxhdGVDYWNoZS5wdXQoXCJwbHVnaW5zL2FjY291bnRzL2h0bWwvb3JnYW5pemF0aW9ucy5odG1sXCIsXCI8ZGl2IGNsYXNzPVxcXCJyb3dcXFwiPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtMTJcXFwiIGRhdGEtbmctY29udHJvbGxlcj1cXFwiSGF3a3VsYXJBY2NvdW50cy5Pcmdhbml6YXRpb25zQ29udHJvbGxlclxcXCI+XFxuICAgICAgICA8b2wgY2xhc3M9XFxcImJyZWFkY3J1bWJcXFwiPlxcbiAgICAgICAgICAgIDxsaT48YSBkYXRhLW5nLWhyZWY9XFxcIi9cXFwiPkhhd2t1bGFyPC9hPjwvbGk+XFxuICAgICAgICAgICAgPGxpPjxhIGRhdGEtbmctaHJlZj1cXFwiL1xcXCI+QWNjb3VudHM8L2E+PC9saT5cXG4gICAgICAgICAgICA8bGk+PGEgZGF0YS1uZy1ocmVmPVxcXCIvYWNjb3VudHMvb3JnYW5pemF0aW9uc1xcXCI+T3JnYW5pemF0aW9uczwvYT48L2xpPlxcbiAgICAgICAgPC9vbD5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInB1bGwtcmlnaHRcXFwiPlxcbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XFxcImJ0biBidG4tcHJpbWFyeVxcXCIgdHlwZT1cXFwiYnV0dG9uXFxcIiByb2xlPVxcXCJidXR0b25cXFwiIGRhdGEtbmctY2xpY2s9XFxcInNob3dDcmVhdGVGb3JtKClcXFwiPkNyZWF0ZTwvYnV0dG9uPlxcbiAgICAgICAgPC9kaXY+XFxuXFxuICAgICAgICA8aDE+T3JnYW5pemF0aW9uczwvaDE+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJwcm9ncmVzcy1kZXNjcmlwdGlvblxcXCIgZGF0YS1uZy1zaG93PVxcXCJsb2FkaW5nXFxcIj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzcGlubmVyIHNwaW5uZXIteHMgc3Bpbm5lci1pbmxpbmVcXFwiPjwvZGl2PiA8c3Ryb25nPkxvYWRpbmc6PC9zdHJvbmc+IE9yZ2FuaXphdGlvbnNcXG4gICAgICAgIDwvZGl2PlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwicm93XFxcIiBkYXRhLW5nLXNob3c9XFxcIiFvcmdhbml6YXRpb25zLmxlbmd0aCAmJiAhbG9hZGluZ1xcXCI+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29sLXNtLTZcXFwiPlxcbiAgICAgICAgICAgICAgICBObyBvcmdhbml6YXRpb25zIHlldC4gSG93IGFib3V0IGNyZWF0aW5nIG9uZT9cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcblxcbiAgICAgICAgPGRpdiBkYXRhLW5nLXNob3c9XFxcIm9yZ2FuaXphdGlvbnMubGVuZ3RoICYmICFsb2FkaW5nXFxcIj5cXG4gICAgICAgICAgICA8dGFibGUgY2xhc3M9XFxcInRhYmxlIHRhYmxlLXN0cmlwZWQgdGFibGUtYm9yZGVyZWRcXFwiPlxcbiAgICAgICAgICAgICAgICA8dGhlYWQ+XFxuICAgICAgICAgICAgICAgICAgICA8dHI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPHRoPk5hbWU8L3RoPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5EZXNjcmlwdGlvbjwvdGg+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPHRoPiZuYnNwOzwvdGg+XFxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxcbiAgICAgICAgICAgICAgICA8L3RoZWFkPlxcbiAgICAgICAgICAgICAgICA8dGJvZHk+XFxuICAgICAgICAgICAgICAgICAgICA8dHIgZGF0YS1uZy1yZXBlYXQ9XFxcIm9yZ2FuaXphdGlvbiBpbiBvcmdhbml6YXRpb25zXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQ+e3tvcmdhbml6YXRpb24ubmFtZX19PC90ZD5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQ+e3tvcmdhbml6YXRpb24uZGVzY3JpcHRpb259fTwvdGQ+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdFxcXCIgYXJpYS1sYWJlbD1cXFwiUmVtb3ZlXFxcIiBkYXRhLW5nLWNsaWNrPVxcXCJyZW1vdmUob3JnYW5pemF0aW9uKVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwicGZpY29uIHBmaWNvbi1kZWxldGVcXFwiIGFyaWEtaGlkZGVuPVxcXCJ0cnVlXFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XFxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxcbiAgICAgICAgICAgICAgICA8L3Rib2R5PlxcbiAgICAgICAgICAgIDwvdGFibGU+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgPC9kaXY+PCEtLSAvY29sIC0tPlxcblxcbjwvZGl2PlxcbjwvZGl2PlxcblwiKTt9XSk7IGhhd3Rpb1BsdWdpbkxvYWRlci5hZGRNb2R1bGUoXCJoYXdrdWxhci11aS1jb21wb25lbnRzLWFjY291bnRzLXRlbXBsYXRlc1wiKTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=