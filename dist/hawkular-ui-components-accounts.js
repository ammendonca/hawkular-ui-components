/// Copyright 2014-2015 Red Hat, Inc. and/or its affiliates
/// and other contributors as indicated by the @author tags.
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///   http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
if (typeof HawkularComponentsVersions !== 'undefined') { HawkularComponentsVersions.push({name:'accounts', version:'c59137f HWKINVENT-38 Propagating the currentPersona.id (~tenant) to other plugins/directives.'})} else {HawkularComponentsVersions = [{name:'accounts', version:'c59137f HWKINVENT-38 Propagating the currentPersona.id (~tenant) to other plugins/directives.'}]};


var HawkularAccounts;
(function (HawkularAccounts) {
    HawkularAccounts.pluginName = "hawkular-accounts";
    HawkularAccounts.log = Logger.get(HawkularAccounts.pluginName);
    HawkularAccounts.templatePath = "plugins/accounts/html";
})(HawkularAccounts || (HawkularAccounts = {}));

var HawkularAccounts;
(function (HawkularAccounts) {
    HawkularAccounts._module = angular.module(HawkularAccounts.pluginName, ['ui.bootstrap']);
    var accountsTab = undefined;
    var currentPersona = undefined;
    HawkularAccounts._module.config(['$locationProvider', '$routeProvider', '$httpProvider', 'HawtioNavBuilderProvider', function ($locationProvider, $routeProvider, $httpProvider, builder) {
        accountsTab = builder.create().id(HawkularAccounts.pluginName).title(function () { return "Accounts"; }).href(function () { return "/accounts"; }).subPath("My account", "accounts", builder.join(HawkularAccounts.templatePath, 'accounts.html')).subPath("Organizations", "organizations", builder.join(HawkularAccounts.templatePath, 'organizations.html')).build();
        builder.configureRouting($routeProvider, accountsTab);
        $routeProvider.when('/accounts/organizations/new', { templateUrl: builder.join(HawkularAccounts.templatePath, 'organization_new.html') });
        $locationProvider.html5Mode(true);
        $httpProvider.interceptors.push(PersonaInterceptorService.Factory);
    }]);
    HawkularAccounts._module.run(['$rootScope', '$log', '$modal', '$document', 'userDetails', 'HawtioNav', 'HawkularInventory', function ($rootScope, $log, $modal, $document, userDetails, HawtioNav, hawkularInventory) {
        $rootScope.userDetails = userDetails;
        $rootScope.$on('IdleStart', function () {
            $('#idle').slideDown();
        });
        $rootScope.$on('IdleEnd', function () {
            $("#idle").slideUp();
        });
        $rootScope.$on('IdleTimeout', function () {
            $log.debug('Idle timeout');
            $document.find('body').eq(0).addClass('inactivity-modal-open');
            $modal.open({
                templateUrl: 'plugins/accounts/html/inactivityModal.html',
                backdrop: 'static'
            });
        });
        var initializeInventory = function (tenantId) {
            var addTenant = function () {
                var tenant = {
                    id: tenantId
                };
                return hawkularInventory.Tenant.save(tenant).$promise;
            };
            var addEnvironment = function () {
                var environment = {
                    id: 'test'
                };
                return hawkularInventory.Environment.save({ tenantId: tenantId }, environment).$promise;
            };
            var addResourceType = function () {
                var resourceType = {
                    id: 'URL',
                    version: '1.0'
                };
                return hawkularInventory.ResourceType.save({ tenantId: tenantId }, resourceType).$promise;
            };
            var addMetricType = function (id, units) {
                var metricType = {
                    id: id,
                    unit: units
                };
                return hawkularInventory.MetricType.save({ tenantId: tenantId }, metricType).$promise;
            };
            var notify = function () { return $rootScope.$emit("UserInitialized", tenantId); };
            var err = function (error, msg) {
                toastr.error(msg);
            };
            addTenant().then(function () { return addEnvironment().then(addResourceType).then(addMetricType('status.duration.type', 'MILLI_SECOND')).then(addMetricType('status.code.type', 'NONE')).then(notify).catch(function (e) {
                err(e, 'Error initializing the data for user.');
                notify();
            }); }, function () {
                console.log('Inventory has already beed initialized.');
                notify();
            });
        };
        $rootScope.$on('CurrentPersonaLoaded', function (e, persona) {
            currentPersona = persona;
            $rootScope.currentPersona = currentPersona;
            initializeInventory(currentPersona.id);
        });
        $rootScope.$on('SwitchedPersona', function (e, persona) {
            currentPersona = persona;
            $rootScope.currentPersona = currentPersona;
            initializeInventory(currentPersona.id);
        });
    }]);
    hawtioPluginLoader.registerPreBootstrapTask(function (next) {
        window['KeycloakConfig'] = "/keycloak.json";
        next();
    }, true);
    var PersonaInterceptorService = (function () {
        function PersonaInterceptorService($q) {
            this.$q = $q;
            this.request = function (request) {
                if (currentPersona) {
                    request.headers['X-Hawkular-Persona'] = currentPersona.id;
                }
                return request;
            };
        }
        PersonaInterceptorService.Factory = function ($q) {
            return new PersonaInterceptorService($q);
        };
        PersonaInterceptorService.$inject = ['$q'];
        return PersonaInterceptorService;
    })();
    hawtioPluginLoader.addModule(HawkularAccounts.pluginName);
})(HawkularAccounts || (HawkularAccounts = {}));

var HawkularAccounts;
(function (HawkularAccounts) {
    HawkularAccounts.OrganizationsController = HawkularAccounts._module.controller("HawkularAccounts.OrganizationsController", [
        '$rootScope',
        '$scope',
        'HawkularAccounts.OrganizationService',
        '$log',
        '$location',
        function ($rootScope, $scope, OrganizationService, $log, $location) {
            $scope.organizations = [];
            $scope.loading = true;
            $scope.load = function () {
                $scope.loadOrganizations();
            };
            $scope.loadOrganizations = function () {
                $scope.organizations = [];
                $scope.loading = true;
                $scope.organizations = OrganizationService.query({}, function () {
                    $scope.loading = false;
                }, function () {
                    $log.warn("List of organizations could NOT be retrieved.");
                    $scope.loading = false;
                });
            };
            $scope.showCreateForm = function () {
                $location.path('/accounts/organizations/new');
            };
            $scope.remove = function (organization) {
                organization.$remove().then(function () {
                    $scope.$emit('OrganizationRemoved');
                    $scope.organizations.splice($scope.organizations.indexOf(organization), 1);
                });
            };
            $scope.load();
            $rootScope.$on('SwitchedPersona', function () {
                $scope.loadOrganizations();
            });
        }
    ]);
    HawkularAccounts.OrganizationNewController = HawkularAccounts._module.controller("HawkularAccounts.OrganizationNewController", [
        '$scope',
        'HawkularAccounts.OrganizationService',
        '$log',
        '$location',
        function ($scope, OrganizationService, $log, $location) {
            $scope.organizationNew = new OrganizationService({});
            $scope.persist = function () {
                $scope.organizationNew.$save({}, function () {
                    $scope.$emit('OrganizationCreated');
                    $location.path('/accounts/organizations');
                }, function () {
                    $log.debug("Organization could NOT be added.");
                });
                $log.debug("Trying to persist the organization");
            };
        }
    ]);
    HawkularAccounts.OrganizationService = HawkularAccounts._module.service("HawkularAccounts.OrganizationService", ["$resource", function ($resource) {
        return $resource('http://localhost:8080/hawkular-accounts/organizations/:id', { id: '@id' });
    }]);
    HawkularAccounts._module.requires.push("ngResource");
})(HawkularAccounts || (HawkularAccounts = {}));

var HawkularAccounts;
(function (HawkularAccounts) {
    HawkularAccounts.PersonaController = HawkularAccounts._module.controller("HawkularAccounts.PersonaController", [
        '$rootScope',
        '$scope',
        'HawkularAccounts.PersonaService',
        '$log',
        function ($rootScope, $scope, PersonaService, $log) {
            $scope.personas = [];
            $scope.currentPersona = null;
            $scope.load = function () {
                $scope.loadCurrentPersona();
            };
            $scope.loadCurrentPersona = function () {
                $scope.currentPersona = PersonaService.get({ id: "current" }, function () {
                    $scope.$emit("CurrentPersonaLoaded", $scope.currentPersona);
                }, function () {
                    $log.warn("Failed in retrieving the current persona");
                });
            };
            $scope.loadPersonas = function () {
                $scope.personas = PersonaService.query({}, function () {
                    $scope.personas = $scope.personas.filter(function (persona) {
                        return persona.id !== $scope.currentPersona.id;
                    });
                    $scope.loading = false;
                }, function () {
                    $log.warn("List of personas could NOT be retrieved.");
                    $scope.loading = false;
                });
            };
            $scope.switchPersona = function (persona) {
                $scope.personas.push($scope.currentPersona);
                $scope.currentPersona = persona;
                $scope.personas = $scope.personas.filter(function (persona) {
                    return persona.id !== $scope.currentPersona.id;
                });
                $scope.$emit("SwitchedPersona", persona);
            };
            $rootScope.$on('CurrentPersonaLoaded', function () {
                $scope.loadPersonas();
            });
            $rootScope.$on('OrganizationCreated', function () {
                $scope.loadPersonas();
            });
            $rootScope.$on('OrganizationRemoved', function () {
                $scope.loadPersonas();
            });
            $scope.load();
        }
    ]);
    HawkularAccounts.PersonaService = HawkularAccounts._module.service("HawkularAccounts.PersonaService", ["$resource", function ($resource) {
        return $resource('http://localhost:8080/hawkular-accounts/personas/:id', { id: '@id' });
    }]);
    HawkularAccounts._module.requires.push("ngResource");
})(HawkularAccounts || (HawkularAccounts = {}));

angular.module("hawkular-ui-components-accounts-templates", []).run(["$templateCache", function($templateCache) {$templateCache.put("plugins/accounts/html/accounts.html","<div class=\"row\">\n    <div class=\"col-md-12\">\n        <h1>Accounts</h1>\n        Your account can be managed directly at <a href=\"http://localhost:8080/auth/realms/hawkular/account\">Keycloak</a>.\n    </div>\n</div>\n");
$templateCache.put("plugins/accounts/html/inactivityModal.html","<div class=\"modal-header\">\n    <h3 class=\"modal-title\">Session expired</h3>\n</div>\n<div class=\"modal-body\">\n    Due to inactivity, we had to close your session.\n</div>\n<div class=\"modal-footer\">\n    <button id=\"logoutBtn\" class=\"btn btn-primary\" data-ng-click=\"userDetails.logout()\">Login again</button>\n</div>");
$templateCache.put("plugins/accounts/html/organization_new.html","<div class=\"row\">\n    <div class=\"col-md-12\" data-ng-controller=\"HawkularAccounts.OrganizationNewController\">\n        <ol class=\"breadcrumb\">\n            <li><a data-ng-href=\"/\">Hawkular</a></li>\n            <li><a data-ng-href=\"/\">Accounts</a></li>\n            <li><a data-ng-href=\"/accounts/organizations\">Organizations</a></li>\n        </ol>\n        <h1>\n            Add Organization\n        </h1>\n\n        <form role=\"form\" class=\"form-horizontal\">\n            <div class=\"form-group\">\n                <label for=\"name\" class=\"col-md-2 control-label\">Name <span class=\"required\">*</span> </label>\n                <div class=\"col-md-6\">\n                    <input type=\"text\" class=\"form-control\" id=\"name\" placeholder=\"Name\"\n                           data-ng-model=\"organizationNew.name\">\n                </div>\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"description\" class=\"col-md-2 control-label\">Description</label>\n                <div class=\"col-md-6\">\n                    <input type=\"text\" class=\"form-control\" id=\"description\" placeholder=\"Description\"\n                           data-ng-model=\"organizationNew.description\">\n                </div>\n            </div>\n            <div class=\"col-md-8\">\n                <div class=\"pull-right\">\n                    <a data-ng-href=\"/accounts/organizations\" class=\"btn btn-default btn-lg\">Cancel</a>\n                    <button data-ng-click=\"persist()\" type=\"submit\" class=\"btn btn-primary btn-lg\">Save</button>\n                </div>\n            </div>\n\n        </form>\n    </div><!-- /col -->\n</div><!-- /row -->\n");
$templateCache.put("plugins/accounts/html/organizations.html","<div class=\"row\">\n    <div class=\"col-md-12\" data-ng-controller=\"HawkularAccounts.OrganizationsController\">\n        <ol class=\"breadcrumb\">\n            <li><a data-ng-href=\"/\">Hawkular</a></li>\n            <li><a data-ng-href=\"/\">Accounts</a></li>\n            <li><a data-ng-href=\"/accounts/organizations\">Organizations</a></li>\n        </ol>\n        <div class=\"pull-right\">\n            <button class=\"btn btn-primary\" type=\"button\" role=\"button\" data-ng-click=\"showCreateForm()\">Create</button>\n        </div>\n\n        <h1>Organizations</h1>\n        <div class=\"progress-description\" data-ng-show=\"loading\">\n            <div class=\"spinner spinner-xs spinner-inline\"></div> <strong>Loading:</strong> Organizations\n        </div>\n        <div class=\"row\" data-ng-show=\"!organizations.length && !loading\">\n            <div class=\"col-sm-6\">\n                No organizations yet. How about creating one?\n            </div>\n        </div>\n\n        <div data-ng-show=\"organizations.length && !loading\">\n            <table class=\"table table-striped table-bordered\">\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Description</th>\n                        <th>&nbsp;</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr data-ng-repeat=\"organization in organizations\">\n                        <td>{{organization.name}}</td>\n                        <td>{{organization.description}}</td>\n                        <td>\n                            <button type=\"button\" class=\"btn btn-default\" aria-label=\"Remove\" data-ng-click=\"remove(organization)\">\n                                <span class=\"pficon pficon-delete\" aria-hidden=\"true\"></span>\n                            </button>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div><!-- /col -->\n\n</div>\n</div>\n");}]); hawtioPluginLoader.addModule("hawkular-ui-components-accounts-templates");
//# sourceMappingURL=data:application/json;base64,